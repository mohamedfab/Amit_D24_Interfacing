
Amit_D24_Interfacing.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000026c8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000148  00800060  000026c8  0000273c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         0000270c  00000000  00000000  00002884  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000173f  00000000  00000000  00004f90  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000001a0  00000000  00000000  000066cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000001f2  00000000  00000000  0000686f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000240b  00000000  00000000  00006a61  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001386  00000000  00000000  00008e6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000011d6  00000000  00000000  0000a1f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c0  00000000  00000000  0000b3c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002f6  00000000  00000000  0000b588  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000096e  00000000  00000000  0000b87e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000c1ec  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 ec       	ldi	r30, 0xC8	; 200
      68:	f6 e2       	ldi	r31, 0x26	; 38
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 3a       	cpi	r26, 0xA8	; 168
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 0f 07 	call	0xe1e	; 0xe1e <main>
      7a:	0c 94 62 13 	jmp	0x26c4	; 0x26c4 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 2b 13 	jmp	0x2656	; 0x2656 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 47 13 	jmp	0x268e	; 0x268e <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 37 13 	jmp	0x266e	; 0x266e <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 53 13 	jmp	0x26a6	; 0x26a6 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 37 13 	jmp	0x266e	; 0x266e <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 53 13 	jmp	0x26a6	; 0x26a6 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 2b 13 	jmp	0x2656	; 0x2656 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 47 13 	jmp	0x268e	; 0x268e <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 33 13 	jmp	0x2666	; 0x2666 <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	60 e6       	ldi	r22, 0x60	; 96
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 4f 13 	jmp	0x269e	; 0x269e <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 37 13 	jmp	0x266e	; 0x266e <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 53 13 	jmp	0x26a6	; 0x26a6 <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 37 13 	jmp	0x266e	; 0x266e <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 53 13 	jmp	0x26a6	; 0x26a6 <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 37 13 	jmp	0x266e	; 0x266e <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 53 13 	jmp	0x26a6	; 0x26a6 <__epilogue_restores__+0x18>

0000089a <__fixsfsi>:
     89a:	ac e0       	ldi	r26, 0x0C	; 12
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 3b 13 	jmp	0x2676	; 0x2676 <__prologue_saves__+0x20>
     8a6:	69 83       	std	Y+1, r22	; 0x01
     8a8:	7a 83       	std	Y+2, r23	; 0x02
     8aa:	8b 83       	std	Y+3, r24	; 0x03
     8ac:	9c 83       	std	Y+4, r25	; 0x04
     8ae:	ce 01       	movw	r24, r28
     8b0:	01 96       	adiw	r24, 0x01	; 1
     8b2:	be 01       	movw	r22, r28
     8b4:	6b 5f       	subi	r22, 0xFB	; 251
     8b6:	7f 4f       	sbci	r23, 0xFF	; 255
     8b8:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     8bc:	8d 81       	ldd	r24, Y+5	; 0x05
     8be:	82 30       	cpi	r24, 0x02	; 2
     8c0:	61 f1       	breq	.+88     	; 0x91a <__fixsfsi+0x80>
     8c2:	82 30       	cpi	r24, 0x02	; 2
     8c4:	50 f1       	brcs	.+84     	; 0x91a <__fixsfsi+0x80>
     8c6:	84 30       	cpi	r24, 0x04	; 4
     8c8:	21 f4       	brne	.+8      	; 0x8d2 <__fixsfsi+0x38>
     8ca:	8e 81       	ldd	r24, Y+6	; 0x06
     8cc:	88 23       	and	r24, r24
     8ce:	51 f1       	breq	.+84     	; 0x924 <__fixsfsi+0x8a>
     8d0:	2e c0       	rjmp	.+92     	; 0x92e <__fixsfsi+0x94>
     8d2:	2f 81       	ldd	r18, Y+7	; 0x07
     8d4:	38 85       	ldd	r19, Y+8	; 0x08
     8d6:	37 fd       	sbrc	r19, 7
     8d8:	20 c0       	rjmp	.+64     	; 0x91a <__fixsfsi+0x80>
     8da:	6e 81       	ldd	r22, Y+6	; 0x06
     8dc:	2f 31       	cpi	r18, 0x1F	; 31
     8de:	31 05       	cpc	r19, r1
     8e0:	1c f0       	brlt	.+6      	; 0x8e8 <__fixsfsi+0x4e>
     8e2:	66 23       	and	r22, r22
     8e4:	f9 f0       	breq	.+62     	; 0x924 <__fixsfsi+0x8a>
     8e6:	23 c0       	rjmp	.+70     	; 0x92e <__fixsfsi+0x94>
     8e8:	8e e1       	ldi	r24, 0x1E	; 30
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	82 1b       	sub	r24, r18
     8ee:	93 0b       	sbc	r25, r19
     8f0:	29 85       	ldd	r18, Y+9	; 0x09
     8f2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8f4:	4b 85       	ldd	r20, Y+11	; 0x0b
     8f6:	5c 85       	ldd	r21, Y+12	; 0x0c
     8f8:	04 c0       	rjmp	.+8      	; 0x902 <__fixsfsi+0x68>
     8fa:	56 95       	lsr	r21
     8fc:	47 95       	ror	r20
     8fe:	37 95       	ror	r19
     900:	27 95       	ror	r18
     902:	8a 95       	dec	r24
     904:	d2 f7       	brpl	.-12     	; 0x8fa <__fixsfsi+0x60>
     906:	66 23       	and	r22, r22
     908:	b1 f0       	breq	.+44     	; 0x936 <__fixsfsi+0x9c>
     90a:	50 95       	com	r21
     90c:	40 95       	com	r20
     90e:	30 95       	com	r19
     910:	21 95       	neg	r18
     912:	3f 4f       	sbci	r19, 0xFF	; 255
     914:	4f 4f       	sbci	r20, 0xFF	; 255
     916:	5f 4f       	sbci	r21, 0xFF	; 255
     918:	0e c0       	rjmp	.+28     	; 0x936 <__fixsfsi+0x9c>
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	09 c0       	rjmp	.+18     	; 0x936 <__fixsfsi+0x9c>
     924:	2f ef       	ldi	r18, 0xFF	; 255
     926:	3f ef       	ldi	r19, 0xFF	; 255
     928:	4f ef       	ldi	r20, 0xFF	; 255
     92a:	5f e7       	ldi	r21, 0x7F	; 127
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__fixsfsi+0x9c>
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	50 e8       	ldi	r21, 0x80	; 128
     936:	b9 01       	movw	r22, r18
     938:	ca 01       	movw	r24, r20
     93a:	2c 96       	adiw	r28, 0x0c	; 12
     93c:	e2 e0       	ldi	r30, 0x02	; 2
     93e:	0c 94 57 13 	jmp	0x26ae	; 0x26ae <__epilogue_restores__+0x20>

00000942 <__floatunsisf>:
     942:	a8 e0       	ldi	r26, 0x08	; 8
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e7 ea       	ldi	r30, 0xA7	; 167
     948:	f4 e0       	ldi	r31, 0x04	; 4
     94a:	0c 94 33 13 	jmp	0x2666	; 0x2666 <__prologue_saves__+0x10>
     94e:	7b 01       	movw	r14, r22
     950:	8c 01       	movw	r16, r24
     952:	61 15       	cp	r22, r1
     954:	71 05       	cpc	r23, r1
     956:	81 05       	cpc	r24, r1
     958:	91 05       	cpc	r25, r1
     95a:	19 f4       	brne	.+6      	; 0x962 <__floatunsisf+0x20>
     95c:	82 e0       	ldi	r24, 0x02	; 2
     95e:	89 83       	std	Y+1, r24	; 0x01
     960:	60 c0       	rjmp	.+192    	; 0xa22 <__floatunsisf+0xe0>
     962:	83 e0       	ldi	r24, 0x03	; 3
     964:	89 83       	std	Y+1, r24	; 0x01
     966:	8e e1       	ldi	r24, 0x1E	; 30
     968:	c8 2e       	mov	r12, r24
     96a:	d1 2c       	mov	r13, r1
     96c:	dc 82       	std	Y+4, r13	; 0x04
     96e:	cb 82       	std	Y+3, r12	; 0x03
     970:	ed 82       	std	Y+5, r14	; 0x05
     972:	fe 82       	std	Y+6, r15	; 0x06
     974:	0f 83       	std	Y+7, r16	; 0x07
     976:	18 87       	std	Y+8, r17	; 0x08
     978:	c8 01       	movw	r24, r16
     97a:	b7 01       	movw	r22, r14
     97c:	0e 94 1a 05 	call	0xa34	; 0xa34 <__clzsi2>
     980:	fc 01       	movw	r30, r24
     982:	31 97       	sbiw	r30, 0x01	; 1
     984:	f7 ff       	sbrs	r31, 7
     986:	3b c0       	rjmp	.+118    	; 0x9fe <__floatunsisf+0xbc>
     988:	22 27       	eor	r18, r18
     98a:	33 27       	eor	r19, r19
     98c:	2e 1b       	sub	r18, r30
     98e:	3f 0b       	sbc	r19, r31
     990:	57 01       	movw	r10, r14
     992:	68 01       	movw	r12, r16
     994:	02 2e       	mov	r0, r18
     996:	04 c0       	rjmp	.+8      	; 0x9a0 <__floatunsisf+0x5e>
     998:	d6 94       	lsr	r13
     99a:	c7 94       	ror	r12
     99c:	b7 94       	ror	r11
     99e:	a7 94       	ror	r10
     9a0:	0a 94       	dec	r0
     9a2:	d2 f7       	brpl	.-12     	; 0x998 <__floatunsisf+0x56>
     9a4:	40 e0       	ldi	r20, 0x00	; 0
     9a6:	50 e0       	ldi	r21, 0x00	; 0
     9a8:	60 e0       	ldi	r22, 0x00	; 0
     9aa:	70 e0       	ldi	r23, 0x00	; 0
     9ac:	81 e0       	ldi	r24, 0x01	; 1
     9ae:	90 e0       	ldi	r25, 0x00	; 0
     9b0:	a0 e0       	ldi	r26, 0x00	; 0
     9b2:	b0 e0       	ldi	r27, 0x00	; 0
     9b4:	04 c0       	rjmp	.+8      	; 0x9be <__floatunsisf+0x7c>
     9b6:	88 0f       	add	r24, r24
     9b8:	99 1f       	adc	r25, r25
     9ba:	aa 1f       	adc	r26, r26
     9bc:	bb 1f       	adc	r27, r27
     9be:	2a 95       	dec	r18
     9c0:	d2 f7       	brpl	.-12     	; 0x9b6 <__floatunsisf+0x74>
     9c2:	01 97       	sbiw	r24, 0x01	; 1
     9c4:	a1 09       	sbc	r26, r1
     9c6:	b1 09       	sbc	r27, r1
     9c8:	8e 21       	and	r24, r14
     9ca:	9f 21       	and	r25, r15
     9cc:	a0 23       	and	r26, r16
     9ce:	b1 23       	and	r27, r17
     9d0:	00 97       	sbiw	r24, 0x00	; 0
     9d2:	a1 05       	cpc	r26, r1
     9d4:	b1 05       	cpc	r27, r1
     9d6:	21 f0       	breq	.+8      	; 0x9e0 <__floatunsisf+0x9e>
     9d8:	41 e0       	ldi	r20, 0x01	; 1
     9da:	50 e0       	ldi	r21, 0x00	; 0
     9dc:	60 e0       	ldi	r22, 0x00	; 0
     9de:	70 e0       	ldi	r23, 0x00	; 0
     9e0:	4a 29       	or	r20, r10
     9e2:	5b 29       	or	r21, r11
     9e4:	6c 29       	or	r22, r12
     9e6:	7d 29       	or	r23, r13
     9e8:	4d 83       	std	Y+5, r20	; 0x05
     9ea:	5e 83       	std	Y+6, r21	; 0x06
     9ec:	6f 83       	std	Y+7, r22	; 0x07
     9ee:	78 87       	std	Y+8, r23	; 0x08
     9f0:	8e e1       	ldi	r24, 0x1E	; 30
     9f2:	90 e0       	ldi	r25, 0x00	; 0
     9f4:	8e 1b       	sub	r24, r30
     9f6:	9f 0b       	sbc	r25, r31
     9f8:	9c 83       	std	Y+4, r25	; 0x04
     9fa:	8b 83       	std	Y+3, r24	; 0x03
     9fc:	12 c0       	rjmp	.+36     	; 0xa22 <__floatunsisf+0xe0>
     9fe:	30 97       	sbiw	r30, 0x00	; 0
     a00:	81 f0       	breq	.+32     	; 0xa22 <__floatunsisf+0xe0>
     a02:	0e 2e       	mov	r0, r30
     a04:	04 c0       	rjmp	.+8      	; 0xa0e <__floatunsisf+0xcc>
     a06:	ee 0c       	add	r14, r14
     a08:	ff 1c       	adc	r15, r15
     a0a:	00 1f       	adc	r16, r16
     a0c:	11 1f       	adc	r17, r17
     a0e:	0a 94       	dec	r0
     a10:	d2 f7       	brpl	.-12     	; 0xa06 <__floatunsisf+0xc4>
     a12:	ed 82       	std	Y+5, r14	; 0x05
     a14:	fe 82       	std	Y+6, r15	; 0x06
     a16:	0f 83       	std	Y+7, r16	; 0x07
     a18:	18 87       	std	Y+8, r17	; 0x08
     a1a:	ce 1a       	sub	r12, r30
     a1c:	df 0a       	sbc	r13, r31
     a1e:	dc 82       	std	Y+4, r13	; 0x04
     a20:	cb 82       	std	Y+3, r12	; 0x03
     a22:	1a 82       	std	Y+2, r1	; 0x02
     a24:	ce 01       	movw	r24, r28
     a26:	01 96       	adiw	r24, 0x01	; 1
     a28:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     a2c:	28 96       	adiw	r28, 0x08	; 8
     a2e:	ea e0       	ldi	r30, 0x0A	; 10
     a30:	0c 94 4f 13 	jmp	0x269e	; 0x269e <__epilogue_restores__+0x10>

00000a34 <__clzsi2>:
     a34:	ef 92       	push	r14
     a36:	ff 92       	push	r15
     a38:	0f 93       	push	r16
     a3a:	1f 93       	push	r17
     a3c:	7b 01       	movw	r14, r22
     a3e:	8c 01       	movw	r16, r24
     a40:	80 e0       	ldi	r24, 0x00	; 0
     a42:	e8 16       	cp	r14, r24
     a44:	80 e0       	ldi	r24, 0x00	; 0
     a46:	f8 06       	cpc	r15, r24
     a48:	81 e0       	ldi	r24, 0x01	; 1
     a4a:	08 07       	cpc	r16, r24
     a4c:	80 e0       	ldi	r24, 0x00	; 0
     a4e:	18 07       	cpc	r17, r24
     a50:	88 f4       	brcc	.+34     	; 0xa74 <__clzsi2+0x40>
     a52:	8f ef       	ldi	r24, 0xFF	; 255
     a54:	e8 16       	cp	r14, r24
     a56:	f1 04       	cpc	r15, r1
     a58:	01 05       	cpc	r16, r1
     a5a:	11 05       	cpc	r17, r1
     a5c:	31 f0       	breq	.+12     	; 0xa6a <__clzsi2+0x36>
     a5e:	28 f0       	brcs	.+10     	; 0xa6a <__clzsi2+0x36>
     a60:	88 e0       	ldi	r24, 0x08	; 8
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	a0 e0       	ldi	r26, 0x00	; 0
     a66:	b0 e0       	ldi	r27, 0x00	; 0
     a68:	17 c0       	rjmp	.+46     	; 0xa98 <__clzsi2+0x64>
     a6a:	80 e0       	ldi	r24, 0x00	; 0
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	a0 e0       	ldi	r26, 0x00	; 0
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	12 c0       	rjmp	.+36     	; 0xa98 <__clzsi2+0x64>
     a74:	80 e0       	ldi	r24, 0x00	; 0
     a76:	e8 16       	cp	r14, r24
     a78:	80 e0       	ldi	r24, 0x00	; 0
     a7a:	f8 06       	cpc	r15, r24
     a7c:	80 e0       	ldi	r24, 0x00	; 0
     a7e:	08 07       	cpc	r16, r24
     a80:	81 e0       	ldi	r24, 0x01	; 1
     a82:	18 07       	cpc	r17, r24
     a84:	28 f0       	brcs	.+10     	; 0xa90 <__clzsi2+0x5c>
     a86:	88 e1       	ldi	r24, 0x18	; 24
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	b0 e0       	ldi	r27, 0x00	; 0
     a8e:	04 c0       	rjmp	.+8      	; 0xa98 <__clzsi2+0x64>
     a90:	80 e1       	ldi	r24, 0x10	; 16
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	a0 e0       	ldi	r26, 0x00	; 0
     a96:	b0 e0       	ldi	r27, 0x00	; 0
     a98:	20 e2       	ldi	r18, 0x20	; 32
     a9a:	30 e0       	ldi	r19, 0x00	; 0
     a9c:	40 e0       	ldi	r20, 0x00	; 0
     a9e:	50 e0       	ldi	r21, 0x00	; 0
     aa0:	28 1b       	sub	r18, r24
     aa2:	39 0b       	sbc	r19, r25
     aa4:	4a 0b       	sbc	r20, r26
     aa6:	5b 0b       	sbc	r21, r27
     aa8:	04 c0       	rjmp	.+8      	; 0xab2 <__clzsi2+0x7e>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	8a 95       	dec	r24
     ab4:	d2 f7       	brpl	.-12     	; 0xaaa <__clzsi2+0x76>
     ab6:	f7 01       	movw	r30, r14
     ab8:	e8 59       	subi	r30, 0x98	; 152
     aba:	ff 4f       	sbci	r31, 0xFF	; 255
     abc:	80 81       	ld	r24, Z
     abe:	28 1b       	sub	r18, r24
     ac0:	31 09       	sbc	r19, r1
     ac2:	41 09       	sbc	r20, r1
     ac4:	51 09       	sbc	r21, r1
     ac6:	c9 01       	movw	r24, r18
     ac8:	1f 91       	pop	r17
     aca:	0f 91       	pop	r16
     acc:	ff 90       	pop	r15
     ace:	ef 90       	pop	r14
     ad0:	08 95       	ret

00000ad2 <__pack_f>:
     ad2:	df 92       	push	r13
     ad4:	ef 92       	push	r14
     ad6:	ff 92       	push	r15
     ad8:	0f 93       	push	r16
     ada:	1f 93       	push	r17
     adc:	fc 01       	movw	r30, r24
     ade:	e4 80       	ldd	r14, Z+4	; 0x04
     ae0:	f5 80       	ldd	r15, Z+5	; 0x05
     ae2:	06 81       	ldd	r16, Z+6	; 0x06
     ae4:	17 81       	ldd	r17, Z+7	; 0x07
     ae6:	d1 80       	ldd	r13, Z+1	; 0x01
     ae8:	80 81       	ld	r24, Z
     aea:	82 30       	cpi	r24, 0x02	; 2
     aec:	48 f4       	brcc	.+18     	; 0xb00 <__pack_f+0x2e>
     aee:	80 e0       	ldi	r24, 0x00	; 0
     af0:	90 e0       	ldi	r25, 0x00	; 0
     af2:	a0 e1       	ldi	r26, 0x10	; 16
     af4:	b0 e0       	ldi	r27, 0x00	; 0
     af6:	e8 2a       	or	r14, r24
     af8:	f9 2a       	or	r15, r25
     afa:	0a 2b       	or	r16, r26
     afc:	1b 2b       	or	r17, r27
     afe:	a5 c0       	rjmp	.+330    	; 0xc4a <__pack_f+0x178>
     b00:	84 30       	cpi	r24, 0x04	; 4
     b02:	09 f4       	brne	.+2      	; 0xb06 <__pack_f+0x34>
     b04:	9f c0       	rjmp	.+318    	; 0xc44 <__pack_f+0x172>
     b06:	82 30       	cpi	r24, 0x02	; 2
     b08:	21 f4       	brne	.+8      	; 0xb12 <__pack_f+0x40>
     b0a:	ee 24       	eor	r14, r14
     b0c:	ff 24       	eor	r15, r15
     b0e:	87 01       	movw	r16, r14
     b10:	05 c0       	rjmp	.+10     	; 0xb1c <__pack_f+0x4a>
     b12:	e1 14       	cp	r14, r1
     b14:	f1 04       	cpc	r15, r1
     b16:	01 05       	cpc	r16, r1
     b18:	11 05       	cpc	r17, r1
     b1a:	19 f4       	brne	.+6      	; 0xb22 <__pack_f+0x50>
     b1c:	e0 e0       	ldi	r30, 0x00	; 0
     b1e:	f0 e0       	ldi	r31, 0x00	; 0
     b20:	96 c0       	rjmp	.+300    	; 0xc4e <__pack_f+0x17c>
     b22:	62 81       	ldd	r22, Z+2	; 0x02
     b24:	73 81       	ldd	r23, Z+3	; 0x03
     b26:	9f ef       	ldi	r25, 0xFF	; 255
     b28:	62 38       	cpi	r22, 0x82	; 130
     b2a:	79 07       	cpc	r23, r25
     b2c:	0c f0       	brlt	.+2      	; 0xb30 <__pack_f+0x5e>
     b2e:	5b c0       	rjmp	.+182    	; 0xbe6 <__pack_f+0x114>
     b30:	22 e8       	ldi	r18, 0x82	; 130
     b32:	3f ef       	ldi	r19, 0xFF	; 255
     b34:	26 1b       	sub	r18, r22
     b36:	37 0b       	sbc	r19, r23
     b38:	2a 31       	cpi	r18, 0x1A	; 26
     b3a:	31 05       	cpc	r19, r1
     b3c:	2c f0       	brlt	.+10     	; 0xb48 <__pack_f+0x76>
     b3e:	20 e0       	ldi	r18, 0x00	; 0
     b40:	30 e0       	ldi	r19, 0x00	; 0
     b42:	40 e0       	ldi	r20, 0x00	; 0
     b44:	50 e0       	ldi	r21, 0x00	; 0
     b46:	2a c0       	rjmp	.+84     	; 0xb9c <__pack_f+0xca>
     b48:	b8 01       	movw	r22, r16
     b4a:	a7 01       	movw	r20, r14
     b4c:	02 2e       	mov	r0, r18
     b4e:	04 c0       	rjmp	.+8      	; 0xb58 <__pack_f+0x86>
     b50:	76 95       	lsr	r23
     b52:	67 95       	ror	r22
     b54:	57 95       	ror	r21
     b56:	47 95       	ror	r20
     b58:	0a 94       	dec	r0
     b5a:	d2 f7       	brpl	.-12     	; 0xb50 <__pack_f+0x7e>
     b5c:	81 e0       	ldi	r24, 0x01	; 1
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	04 c0       	rjmp	.+8      	; 0xb6e <__pack_f+0x9c>
     b66:	88 0f       	add	r24, r24
     b68:	99 1f       	adc	r25, r25
     b6a:	aa 1f       	adc	r26, r26
     b6c:	bb 1f       	adc	r27, r27
     b6e:	2a 95       	dec	r18
     b70:	d2 f7       	brpl	.-12     	; 0xb66 <__pack_f+0x94>
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	a1 09       	sbc	r26, r1
     b76:	b1 09       	sbc	r27, r1
     b78:	8e 21       	and	r24, r14
     b7a:	9f 21       	and	r25, r15
     b7c:	a0 23       	and	r26, r16
     b7e:	b1 23       	and	r27, r17
     b80:	00 97       	sbiw	r24, 0x00	; 0
     b82:	a1 05       	cpc	r26, r1
     b84:	b1 05       	cpc	r27, r1
     b86:	21 f0       	breq	.+8      	; 0xb90 <__pack_f+0xbe>
     b88:	81 e0       	ldi	r24, 0x01	; 1
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	a0 e0       	ldi	r26, 0x00	; 0
     b8e:	b0 e0       	ldi	r27, 0x00	; 0
     b90:	9a 01       	movw	r18, r20
     b92:	ab 01       	movw	r20, r22
     b94:	28 2b       	or	r18, r24
     b96:	39 2b       	or	r19, r25
     b98:	4a 2b       	or	r20, r26
     b9a:	5b 2b       	or	r21, r27
     b9c:	da 01       	movw	r26, r20
     b9e:	c9 01       	movw	r24, r18
     ba0:	8f 77       	andi	r24, 0x7F	; 127
     ba2:	90 70       	andi	r25, 0x00	; 0
     ba4:	a0 70       	andi	r26, 0x00	; 0
     ba6:	b0 70       	andi	r27, 0x00	; 0
     ba8:	80 34       	cpi	r24, 0x40	; 64
     baa:	91 05       	cpc	r25, r1
     bac:	a1 05       	cpc	r26, r1
     bae:	b1 05       	cpc	r27, r1
     bb0:	39 f4       	brne	.+14     	; 0xbc0 <__pack_f+0xee>
     bb2:	27 ff       	sbrs	r18, 7
     bb4:	09 c0       	rjmp	.+18     	; 0xbc8 <__pack_f+0xf6>
     bb6:	20 5c       	subi	r18, 0xC0	; 192
     bb8:	3f 4f       	sbci	r19, 0xFF	; 255
     bba:	4f 4f       	sbci	r20, 0xFF	; 255
     bbc:	5f 4f       	sbci	r21, 0xFF	; 255
     bbe:	04 c0       	rjmp	.+8      	; 0xbc8 <__pack_f+0xf6>
     bc0:	21 5c       	subi	r18, 0xC1	; 193
     bc2:	3f 4f       	sbci	r19, 0xFF	; 255
     bc4:	4f 4f       	sbci	r20, 0xFF	; 255
     bc6:	5f 4f       	sbci	r21, 0xFF	; 255
     bc8:	e0 e0       	ldi	r30, 0x00	; 0
     bca:	f0 e0       	ldi	r31, 0x00	; 0
     bcc:	20 30       	cpi	r18, 0x00	; 0
     bce:	a0 e0       	ldi	r26, 0x00	; 0
     bd0:	3a 07       	cpc	r19, r26
     bd2:	a0 e0       	ldi	r26, 0x00	; 0
     bd4:	4a 07       	cpc	r20, r26
     bd6:	a0 e4       	ldi	r26, 0x40	; 64
     bd8:	5a 07       	cpc	r21, r26
     bda:	10 f0       	brcs	.+4      	; 0xbe0 <__pack_f+0x10e>
     bdc:	e1 e0       	ldi	r30, 0x01	; 1
     bde:	f0 e0       	ldi	r31, 0x00	; 0
     be0:	79 01       	movw	r14, r18
     be2:	8a 01       	movw	r16, r20
     be4:	27 c0       	rjmp	.+78     	; 0xc34 <__pack_f+0x162>
     be6:	60 38       	cpi	r22, 0x80	; 128
     be8:	71 05       	cpc	r23, r1
     bea:	64 f5       	brge	.+88     	; 0xc44 <__pack_f+0x172>
     bec:	fb 01       	movw	r30, r22
     bee:	e1 58       	subi	r30, 0x81	; 129
     bf0:	ff 4f       	sbci	r31, 0xFF	; 255
     bf2:	d8 01       	movw	r26, r16
     bf4:	c7 01       	movw	r24, r14
     bf6:	8f 77       	andi	r24, 0x7F	; 127
     bf8:	90 70       	andi	r25, 0x00	; 0
     bfa:	a0 70       	andi	r26, 0x00	; 0
     bfc:	b0 70       	andi	r27, 0x00	; 0
     bfe:	80 34       	cpi	r24, 0x40	; 64
     c00:	91 05       	cpc	r25, r1
     c02:	a1 05       	cpc	r26, r1
     c04:	b1 05       	cpc	r27, r1
     c06:	39 f4       	brne	.+14     	; 0xc16 <__pack_f+0x144>
     c08:	e7 fe       	sbrs	r14, 7
     c0a:	0d c0       	rjmp	.+26     	; 0xc26 <__pack_f+0x154>
     c0c:	80 e4       	ldi	r24, 0x40	; 64
     c0e:	90 e0       	ldi	r25, 0x00	; 0
     c10:	a0 e0       	ldi	r26, 0x00	; 0
     c12:	b0 e0       	ldi	r27, 0x00	; 0
     c14:	04 c0       	rjmp	.+8      	; 0xc1e <__pack_f+0x14c>
     c16:	8f e3       	ldi	r24, 0x3F	; 63
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	a0 e0       	ldi	r26, 0x00	; 0
     c1c:	b0 e0       	ldi	r27, 0x00	; 0
     c1e:	e8 0e       	add	r14, r24
     c20:	f9 1e       	adc	r15, r25
     c22:	0a 1f       	adc	r16, r26
     c24:	1b 1f       	adc	r17, r27
     c26:	17 ff       	sbrs	r17, 7
     c28:	05 c0       	rjmp	.+10     	; 0xc34 <__pack_f+0x162>
     c2a:	16 95       	lsr	r17
     c2c:	07 95       	ror	r16
     c2e:	f7 94       	ror	r15
     c30:	e7 94       	ror	r14
     c32:	31 96       	adiw	r30, 0x01	; 1
     c34:	87 e0       	ldi	r24, 0x07	; 7
     c36:	16 95       	lsr	r17
     c38:	07 95       	ror	r16
     c3a:	f7 94       	ror	r15
     c3c:	e7 94       	ror	r14
     c3e:	8a 95       	dec	r24
     c40:	d1 f7       	brne	.-12     	; 0xc36 <__pack_f+0x164>
     c42:	05 c0       	rjmp	.+10     	; 0xc4e <__pack_f+0x17c>
     c44:	ee 24       	eor	r14, r14
     c46:	ff 24       	eor	r15, r15
     c48:	87 01       	movw	r16, r14
     c4a:	ef ef       	ldi	r30, 0xFF	; 255
     c4c:	f0 e0       	ldi	r31, 0x00	; 0
     c4e:	6e 2f       	mov	r22, r30
     c50:	67 95       	ror	r22
     c52:	66 27       	eor	r22, r22
     c54:	67 95       	ror	r22
     c56:	90 2f       	mov	r25, r16
     c58:	9f 77       	andi	r25, 0x7F	; 127
     c5a:	d7 94       	ror	r13
     c5c:	dd 24       	eor	r13, r13
     c5e:	d7 94       	ror	r13
     c60:	8e 2f       	mov	r24, r30
     c62:	86 95       	lsr	r24
     c64:	49 2f       	mov	r20, r25
     c66:	46 2b       	or	r20, r22
     c68:	58 2f       	mov	r21, r24
     c6a:	5d 29       	or	r21, r13
     c6c:	b7 01       	movw	r22, r14
     c6e:	ca 01       	movw	r24, r20
     c70:	1f 91       	pop	r17
     c72:	0f 91       	pop	r16
     c74:	ff 90       	pop	r15
     c76:	ef 90       	pop	r14
     c78:	df 90       	pop	r13
     c7a:	08 95       	ret

00000c7c <__unpack_f>:
     c7c:	fc 01       	movw	r30, r24
     c7e:	db 01       	movw	r26, r22
     c80:	40 81       	ld	r20, Z
     c82:	51 81       	ldd	r21, Z+1	; 0x01
     c84:	22 81       	ldd	r18, Z+2	; 0x02
     c86:	62 2f       	mov	r22, r18
     c88:	6f 77       	andi	r22, 0x7F	; 127
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	22 1f       	adc	r18, r18
     c8e:	22 27       	eor	r18, r18
     c90:	22 1f       	adc	r18, r18
     c92:	93 81       	ldd	r25, Z+3	; 0x03
     c94:	89 2f       	mov	r24, r25
     c96:	88 0f       	add	r24, r24
     c98:	82 2b       	or	r24, r18
     c9a:	28 2f       	mov	r18, r24
     c9c:	30 e0       	ldi	r19, 0x00	; 0
     c9e:	99 1f       	adc	r25, r25
     ca0:	99 27       	eor	r25, r25
     ca2:	99 1f       	adc	r25, r25
     ca4:	11 96       	adiw	r26, 0x01	; 1
     ca6:	9c 93       	st	X, r25
     ca8:	11 97       	sbiw	r26, 0x01	; 1
     caa:	21 15       	cp	r18, r1
     cac:	31 05       	cpc	r19, r1
     cae:	a9 f5       	brne	.+106    	; 0xd1a <__unpack_f+0x9e>
     cb0:	41 15       	cp	r20, r1
     cb2:	51 05       	cpc	r21, r1
     cb4:	61 05       	cpc	r22, r1
     cb6:	71 05       	cpc	r23, r1
     cb8:	11 f4       	brne	.+4      	; 0xcbe <__unpack_f+0x42>
     cba:	82 e0       	ldi	r24, 0x02	; 2
     cbc:	37 c0       	rjmp	.+110    	; 0xd2c <__unpack_f+0xb0>
     cbe:	82 e8       	ldi	r24, 0x82	; 130
     cc0:	9f ef       	ldi	r25, 0xFF	; 255
     cc2:	13 96       	adiw	r26, 0x03	; 3
     cc4:	9c 93       	st	X, r25
     cc6:	8e 93       	st	-X, r24
     cc8:	12 97       	sbiw	r26, 0x02	; 2
     cca:	9a 01       	movw	r18, r20
     ccc:	ab 01       	movw	r20, r22
     cce:	67 e0       	ldi	r22, 0x07	; 7
     cd0:	22 0f       	add	r18, r18
     cd2:	33 1f       	adc	r19, r19
     cd4:	44 1f       	adc	r20, r20
     cd6:	55 1f       	adc	r21, r21
     cd8:	6a 95       	dec	r22
     cda:	d1 f7       	brne	.-12     	; 0xcd0 <__unpack_f+0x54>
     cdc:	83 e0       	ldi	r24, 0x03	; 3
     cde:	8c 93       	st	X, r24
     ce0:	0d c0       	rjmp	.+26     	; 0xcfc <__unpack_f+0x80>
     ce2:	22 0f       	add	r18, r18
     ce4:	33 1f       	adc	r19, r19
     ce6:	44 1f       	adc	r20, r20
     ce8:	55 1f       	adc	r21, r21
     cea:	12 96       	adiw	r26, 0x02	; 2
     cec:	8d 91       	ld	r24, X+
     cee:	9c 91       	ld	r25, X
     cf0:	13 97       	sbiw	r26, 0x03	; 3
     cf2:	01 97       	sbiw	r24, 0x01	; 1
     cf4:	13 96       	adiw	r26, 0x03	; 3
     cf6:	9c 93       	st	X, r25
     cf8:	8e 93       	st	-X, r24
     cfa:	12 97       	sbiw	r26, 0x02	; 2
     cfc:	20 30       	cpi	r18, 0x00	; 0
     cfe:	80 e0       	ldi	r24, 0x00	; 0
     d00:	38 07       	cpc	r19, r24
     d02:	80 e0       	ldi	r24, 0x00	; 0
     d04:	48 07       	cpc	r20, r24
     d06:	80 e4       	ldi	r24, 0x40	; 64
     d08:	58 07       	cpc	r21, r24
     d0a:	58 f3       	brcs	.-42     	; 0xce2 <__unpack_f+0x66>
     d0c:	14 96       	adiw	r26, 0x04	; 4
     d0e:	2d 93       	st	X+, r18
     d10:	3d 93       	st	X+, r19
     d12:	4d 93       	st	X+, r20
     d14:	5c 93       	st	X, r21
     d16:	17 97       	sbiw	r26, 0x07	; 7
     d18:	08 95       	ret
     d1a:	2f 3f       	cpi	r18, 0xFF	; 255
     d1c:	31 05       	cpc	r19, r1
     d1e:	79 f4       	brne	.+30     	; 0xd3e <__unpack_f+0xc2>
     d20:	41 15       	cp	r20, r1
     d22:	51 05       	cpc	r21, r1
     d24:	61 05       	cpc	r22, r1
     d26:	71 05       	cpc	r23, r1
     d28:	19 f4       	brne	.+6      	; 0xd30 <__unpack_f+0xb4>
     d2a:	84 e0       	ldi	r24, 0x04	; 4
     d2c:	8c 93       	st	X, r24
     d2e:	08 95       	ret
     d30:	64 ff       	sbrs	r22, 4
     d32:	03 c0       	rjmp	.+6      	; 0xd3a <__unpack_f+0xbe>
     d34:	81 e0       	ldi	r24, 0x01	; 1
     d36:	8c 93       	st	X, r24
     d38:	12 c0       	rjmp	.+36     	; 0xd5e <__unpack_f+0xe2>
     d3a:	1c 92       	st	X, r1
     d3c:	10 c0       	rjmp	.+32     	; 0xd5e <__unpack_f+0xe2>
     d3e:	2f 57       	subi	r18, 0x7F	; 127
     d40:	30 40       	sbci	r19, 0x00	; 0
     d42:	13 96       	adiw	r26, 0x03	; 3
     d44:	3c 93       	st	X, r19
     d46:	2e 93       	st	-X, r18
     d48:	12 97       	sbiw	r26, 0x02	; 2
     d4a:	83 e0       	ldi	r24, 0x03	; 3
     d4c:	8c 93       	st	X, r24
     d4e:	87 e0       	ldi	r24, 0x07	; 7
     d50:	44 0f       	add	r20, r20
     d52:	55 1f       	adc	r21, r21
     d54:	66 1f       	adc	r22, r22
     d56:	77 1f       	adc	r23, r23
     d58:	8a 95       	dec	r24
     d5a:	d1 f7       	brne	.-12     	; 0xd50 <__unpack_f+0xd4>
     d5c:	70 64       	ori	r23, 0x40	; 64
     d5e:	14 96       	adiw	r26, 0x04	; 4
     d60:	4d 93       	st	X+, r20
     d62:	5d 93       	st	X+, r21
     d64:	6d 93       	st	X+, r22
     d66:	7c 93       	st	X, r23
     d68:	17 97       	sbiw	r26, 0x07	; 7
     d6a:	08 95       	ret

00000d6c <__fpcmp_parts_f>:
     d6c:	1f 93       	push	r17
     d6e:	dc 01       	movw	r26, r24
     d70:	fb 01       	movw	r30, r22
     d72:	9c 91       	ld	r25, X
     d74:	92 30       	cpi	r25, 0x02	; 2
     d76:	08 f4       	brcc	.+2      	; 0xd7a <__fpcmp_parts_f+0xe>
     d78:	47 c0       	rjmp	.+142    	; 0xe08 <__fpcmp_parts_f+0x9c>
     d7a:	80 81       	ld	r24, Z
     d7c:	82 30       	cpi	r24, 0x02	; 2
     d7e:	08 f4       	brcc	.+2      	; 0xd82 <__fpcmp_parts_f+0x16>
     d80:	43 c0       	rjmp	.+134    	; 0xe08 <__fpcmp_parts_f+0x9c>
     d82:	94 30       	cpi	r25, 0x04	; 4
     d84:	51 f4       	brne	.+20     	; 0xd9a <__fpcmp_parts_f+0x2e>
     d86:	11 96       	adiw	r26, 0x01	; 1
     d88:	1c 91       	ld	r17, X
     d8a:	84 30       	cpi	r24, 0x04	; 4
     d8c:	99 f5       	brne	.+102    	; 0xdf4 <__fpcmp_parts_f+0x88>
     d8e:	81 81       	ldd	r24, Z+1	; 0x01
     d90:	68 2f       	mov	r22, r24
     d92:	70 e0       	ldi	r23, 0x00	; 0
     d94:	61 1b       	sub	r22, r17
     d96:	71 09       	sbc	r23, r1
     d98:	3f c0       	rjmp	.+126    	; 0xe18 <__fpcmp_parts_f+0xac>
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	21 f0       	breq	.+8      	; 0xda6 <__fpcmp_parts_f+0x3a>
     d9e:	92 30       	cpi	r25, 0x02	; 2
     da0:	31 f4       	brne	.+12     	; 0xdae <__fpcmp_parts_f+0x42>
     da2:	82 30       	cpi	r24, 0x02	; 2
     da4:	b9 f1       	breq	.+110    	; 0xe14 <__fpcmp_parts_f+0xa8>
     da6:	81 81       	ldd	r24, Z+1	; 0x01
     da8:	88 23       	and	r24, r24
     daa:	89 f1       	breq	.+98     	; 0xe0e <__fpcmp_parts_f+0xa2>
     dac:	2d c0       	rjmp	.+90     	; 0xe08 <__fpcmp_parts_f+0x9c>
     dae:	11 96       	adiw	r26, 0x01	; 1
     db0:	1c 91       	ld	r17, X
     db2:	11 97       	sbiw	r26, 0x01	; 1
     db4:	82 30       	cpi	r24, 0x02	; 2
     db6:	f1 f0       	breq	.+60     	; 0xdf4 <__fpcmp_parts_f+0x88>
     db8:	81 81       	ldd	r24, Z+1	; 0x01
     dba:	18 17       	cp	r17, r24
     dbc:	d9 f4       	brne	.+54     	; 0xdf4 <__fpcmp_parts_f+0x88>
     dbe:	12 96       	adiw	r26, 0x02	; 2
     dc0:	2d 91       	ld	r18, X+
     dc2:	3c 91       	ld	r19, X
     dc4:	13 97       	sbiw	r26, 0x03	; 3
     dc6:	82 81       	ldd	r24, Z+2	; 0x02
     dc8:	93 81       	ldd	r25, Z+3	; 0x03
     dca:	82 17       	cp	r24, r18
     dcc:	93 07       	cpc	r25, r19
     dce:	94 f0       	brlt	.+36     	; 0xdf4 <__fpcmp_parts_f+0x88>
     dd0:	28 17       	cp	r18, r24
     dd2:	39 07       	cpc	r19, r25
     dd4:	bc f0       	brlt	.+46     	; 0xe04 <__fpcmp_parts_f+0x98>
     dd6:	14 96       	adiw	r26, 0x04	; 4
     dd8:	8d 91       	ld	r24, X+
     dda:	9d 91       	ld	r25, X+
     ddc:	0d 90       	ld	r0, X+
     dde:	bc 91       	ld	r27, X
     de0:	a0 2d       	mov	r26, r0
     de2:	24 81       	ldd	r18, Z+4	; 0x04
     de4:	35 81       	ldd	r19, Z+5	; 0x05
     de6:	46 81       	ldd	r20, Z+6	; 0x06
     de8:	57 81       	ldd	r21, Z+7	; 0x07
     dea:	28 17       	cp	r18, r24
     dec:	39 07       	cpc	r19, r25
     dee:	4a 07       	cpc	r20, r26
     df0:	5b 07       	cpc	r21, r27
     df2:	18 f4       	brcc	.+6      	; 0xdfa <__fpcmp_parts_f+0x8e>
     df4:	11 23       	and	r17, r17
     df6:	41 f0       	breq	.+16     	; 0xe08 <__fpcmp_parts_f+0x9c>
     df8:	0a c0       	rjmp	.+20     	; 0xe0e <__fpcmp_parts_f+0xa2>
     dfa:	82 17       	cp	r24, r18
     dfc:	93 07       	cpc	r25, r19
     dfe:	a4 07       	cpc	r26, r20
     e00:	b5 07       	cpc	r27, r21
     e02:	40 f4       	brcc	.+16     	; 0xe14 <__fpcmp_parts_f+0xa8>
     e04:	11 23       	and	r17, r17
     e06:	19 f0       	breq	.+6      	; 0xe0e <__fpcmp_parts_f+0xa2>
     e08:	61 e0       	ldi	r22, 0x01	; 1
     e0a:	70 e0       	ldi	r23, 0x00	; 0
     e0c:	05 c0       	rjmp	.+10     	; 0xe18 <__fpcmp_parts_f+0xac>
     e0e:	6f ef       	ldi	r22, 0xFF	; 255
     e10:	7f ef       	ldi	r23, 0xFF	; 255
     e12:	02 c0       	rjmp	.+4      	; 0xe18 <__fpcmp_parts_f+0xac>
     e14:	60 e0       	ldi	r22, 0x00	; 0
     e16:	70 e0       	ldi	r23, 0x00	; 0
     e18:	cb 01       	movw	r24, r22
     e1a:	1f 91       	pop	r17
     e1c:	08 95       	ret

00000e1e <main>:
#include "Ext_INT.h"
#include <avr/interrupt.h>
#include "Adc.h"

int main ()
{
     e1e:	df 93       	push	r29
     e20:	cf 93       	push	r28
     e22:	00 d0       	rcall	.+0      	; 0xe24 <main+0x6>
     e24:	00 d0       	rcall	.+0      	; 0xe26 <main+0x8>
     e26:	00 d0       	rcall	.+0      	; 0xe28 <main+0xa>
     e28:	cd b7       	in	r28, 0x3d	; 61
     e2a:	de b7       	in	r29, 0x3e	; 62
	u16 locAdcResult = 0;  /*	No Of Steps 	*/
     e2c:	1e 82       	std	Y+6, r1	; 0x06
     e2e:	1d 82       	std	Y+5, r1	; 0x05
	f64 acdPhysicalValue = 0;
     e30:	80 e0       	ldi	r24, 0x00	; 0
     e32:	90 e0       	ldi	r25, 0x00	; 0
     e34:	a0 e0       	ldi	r26, 0x00	; 0
     e36:	b0 e0       	ldi	r27, 0x00	; 0
     e38:	89 83       	std	Y+1, r24	; 0x01
     e3a:	9a 83       	std	Y+2, r25	; 0x02
     e3c:	ab 83       	std	Y+3, r26	; 0x03
     e3e:	bc 83       	std	Y+4, r27	; 0x04
	Lcd_Init();
     e40:	0e 94 7e 09 	call	0x12fc	; 0x12fc <Lcd_Init>
	adcInit();
     e44:	0e 94 b7 12 	call	0x256e	; 0x256e <adcInit>
	while (1)
	{
		locAdcResult = adcRead(1);
     e48:	81 e0       	ldi	r24, 0x01	; 1
     e4a:	0e 94 c9 12 	call	0x2592	; 0x2592 <adcRead>
     e4e:	9e 83       	std	Y+6, r25	; 0x06
     e50:	8d 83       	std	Y+5, r24	; 0x05
		Lcd_Goto_Row_Column(0, 0);
     e52:	80 e0       	ldi	r24, 0x00	; 0
     e54:	60 e0       	ldi	r22, 0x00	; 0
     e56:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <Lcd_Goto_Row_Column>
		//Lcd_DisplayNum(locAdcResult);
		acdPhysicalValue = locAdcResult * ADC_STEP;
     e5a:	8d 81       	ldd	r24, Y+5	; 0x05
     e5c:	9e 81       	ldd	r25, Y+6	; 0x06
     e5e:	cc 01       	movw	r24, r24
     e60:	a0 e0       	ldi	r26, 0x00	; 0
     e62:	b0 e0       	ldi	r27, 0x00	; 0
     e64:	bc 01       	movw	r22, r24
     e66:	cd 01       	movw	r24, r26
     e68:	0e 94 a1 04 	call	0x942	; 0x942 <__floatunsisf>
     e6c:	dc 01       	movw	r26, r24
     e6e:	cb 01       	movw	r24, r22
     e70:	bc 01       	movw	r22, r24
     e72:	cd 01       	movw	r24, r26
     e74:	2a e9       	ldi	r18, 0x9A	; 154
     e76:	39 e9       	ldi	r19, 0x99	; 153
     e78:	49 e9       	ldi	r20, 0x99	; 153
     e7a:	50 e4       	ldi	r21, 0x40	; 64
     e7c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     e80:	dc 01       	movw	r26, r24
     e82:	cb 01       	movw	r24, r22
     e84:	89 83       	std	Y+1, r24	; 0x01
     e86:	9a 83       	std	Y+2, r25	; 0x02
     e88:	ab 83       	std	Y+3, r26	; 0x03
     e8a:	bc 83       	std	Y+4, r27	; 0x04
		LcdDisplayFloat(acdPhysicalValue);
     e8c:	89 81       	ldd	r24, Y+1	; 0x01
     e8e:	9a 81       	ldd	r25, Y+2	; 0x02
     e90:	ab 81       	ldd	r26, Y+3	; 0x03
     e92:	bc 81       	ldd	r27, Y+4	; 0x04
     e94:	bc 01       	movw	r22, r24
     e96:	cd 01       	movw	r24, r26
     e98:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <LcdDisplayFloat>
     e9c:	d5 cf       	rjmp	.-86     	; 0xe48 <main+0x2a>

00000e9e <SSD_Init>:
 *  Created on: Nov 20, 2021
 *      Author: Eng_Fawzi
 */
#include "SSD.h"
void SSD_Init(void)
{
     e9e:	df 93       	push	r29
     ea0:	cf 93       	push	r28
     ea2:	cd b7       	in	r28, 0x3d	; 61
     ea4:	de b7       	in	r29, 0x3e	; 62
	/*	Configure Data Lines As Output	*/
	Dio_ConfigChannel(DIO_PORTA,DIO_PIN4,OUTPUT);
     ea6:	80 e0       	ldi	r24, 0x00	; 0
     ea8:	64 e0       	ldi	r22, 0x04	; 4
     eaa:	41 e0       	ldi	r20, 0x01	; 1
     eac:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <Dio_ConfigChannel>
	Dio_ConfigChannel(DIO_PORTA,DIO_PIN5,OUTPUT);
     eb0:	80 e0       	ldi	r24, 0x00	; 0
     eb2:	65 e0       	ldi	r22, 0x05	; 5
     eb4:	41 e0       	ldi	r20, 0x01	; 1
     eb6:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <Dio_ConfigChannel>
	Dio_ConfigChannel(DIO_PORTA,DIO_PIN6,OUTPUT);
     eba:	80 e0       	ldi	r24, 0x00	; 0
     ebc:	66 e0       	ldi	r22, 0x06	; 6
     ebe:	41 e0       	ldi	r20, 0x01	; 1
     ec0:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <Dio_ConfigChannel>
	Dio_ConfigChannel(DIO_PORTA,DIO_PIN7,OUTPUT);
     ec4:	80 e0       	ldi	r24, 0x00	; 0
     ec6:	67 e0       	ldi	r22, 0x07	; 7
     ec8:	41 e0       	ldi	r20, 0x01	; 1
     eca:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <Dio_ConfigChannel>

	/*	Configure Control Lines As Output	*/
	Dio_ConfigChannel(DIO_PORTB,DIO_PIN1,OUTPUT);
     ece:	81 e0       	ldi	r24, 0x01	; 1
     ed0:	61 e0       	ldi	r22, 0x01	; 1
     ed2:	41 e0       	ldi	r20, 0x01	; 1
     ed4:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <Dio_ConfigChannel>
	Dio_ConfigChannel(DIO_PORTB,DIO_PIN2,OUTPUT);
     ed8:	81 e0       	ldi	r24, 0x01	; 1
     eda:	62 e0       	ldi	r22, 0x02	; 2
     edc:	41 e0       	ldi	r20, 0x01	; 1
     ede:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <Dio_ConfigChannel>
}
     ee2:	cf 91       	pop	r28
     ee4:	df 91       	pop	r29
     ee6:	08 95       	ret

00000ee8 <SSD_DisplayNumber>:
void SSD_DisplayNumber(u8 num)
{
     ee8:	df 93       	push	r29
     eea:	cf 93       	push	r28
     eec:	cd b7       	in	r28, 0x3d	; 61
     eee:	de b7       	in	r29, 0x3e	; 62
     ef0:	6f 97       	sbiw	r28, 0x1f	; 31
     ef2:	0f b6       	in	r0, 0x3f	; 63
     ef4:	f8 94       	cli
     ef6:	de bf       	out	0x3e, r29	; 62
     ef8:	0f be       	out	0x3f, r0	; 63
     efa:	cd bf       	out	0x3d, r28	; 61
     efc:	8f 8f       	std	Y+31, r24	; 0x1f
	u8 loc_FirstDigit = (num/10)<<4;
     efe:	8f 8d       	ldd	r24, Y+31	; 0x1f
     f00:	9a e0       	ldi	r25, 0x0A	; 10
     f02:	69 2f       	mov	r22, r25
     f04:	0e 94 0b 13 	call	0x2616	; 0x2616 <__udivmodqi4>
     f08:	82 95       	swap	r24
     f0a:	80 7f       	andi	r24, 0xF0	; 240
     f0c:	8e 8f       	std	Y+30, r24	; 0x1e
	u8 loc_Second_Digit = (num%10)<<4;
     f0e:	8f 8d       	ldd	r24, Y+31	; 0x1f
     f10:	9a e0       	ldi	r25, 0x0A	; 10
     f12:	69 2f       	mov	r22, r25
     f14:	0e 94 0b 13 	call	0x2616	; 0x2616 <__udivmodqi4>
     f18:	89 2f       	mov	r24, r25
     f1a:	82 95       	swap	r24
     f1c:	80 7f       	andi	r24, 0xF0	; 240
     f1e:	8d 8f       	std	Y+29, r24	; 0x1d

	/*	Enable SSD1	*/
	Dio_WriteChannel(DIO_PORTB, DIO_PIN2, STD_HIGH);
     f20:	81 e0       	ldi	r24, 0x01	; 1
     f22:	62 e0       	ldi	r22, 0x02	; 2
     f24:	41 e0       	ldi	r20, 0x01	; 1
     f26:	0e 94 54 10 	call	0x20a8	; 0x20a8 <Dio_WriteChannel>
	/*	Disable SSD2	*/
	Dio_WriteChannel(DIO_PORTB, DIO_PIN1, STD_LOW);
     f2a:	81 e0       	ldi	r24, 0x01	; 1
     f2c:	61 e0       	ldi	r22, 0x01	; 1
     f2e:	40 e0       	ldi	r20, 0x00	; 0
     f30:	0e 94 54 10 	call	0x20a8	; 0x20a8 <Dio_WriteChannel>
	/*	Write Number To SSD	*/
	Dio_WriteGroup(DIO_PORTA,SSD_MASK,loc_FirstDigit);
     f34:	80 e0       	ldi	r24, 0x00	; 0
     f36:	60 ef       	ldi	r22, 0xF0	; 240
     f38:	4e 8d       	ldd	r20, Y+30	; 0x1e
     f3a:	0e 94 37 11 	call	0x226e	; 0x226e <Dio_WriteGroup>
     f3e:	80 e0       	ldi	r24, 0x00	; 0
     f40:	90 e0       	ldi	r25, 0x00	; 0
     f42:	a0 e8       	ldi	r26, 0x80	; 128
     f44:	bf e3       	ldi	r27, 0x3F	; 63
     f46:	89 8f       	std	Y+25, r24	; 0x19
     f48:	9a 8f       	std	Y+26, r25	; 0x1a
     f4a:	ab 8f       	std	Y+27, r26	; 0x1b
     f4c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f4e:	69 8d       	ldd	r22, Y+25	; 0x19
     f50:	7a 8d       	ldd	r23, Y+26	; 0x1a
     f52:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f54:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f56:	20 e0       	ldi	r18, 0x00	; 0
     f58:	30 e0       	ldi	r19, 0x00	; 0
     f5a:	4a e7       	ldi	r20, 0x7A	; 122
     f5c:	55 e4       	ldi	r21, 0x45	; 69
     f5e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     f62:	dc 01       	movw	r26, r24
     f64:	cb 01       	movw	r24, r22
     f66:	8d 8b       	std	Y+21, r24	; 0x15
     f68:	9e 8b       	std	Y+22, r25	; 0x16
     f6a:	af 8b       	std	Y+23, r26	; 0x17
     f6c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     f6e:	6d 89       	ldd	r22, Y+21	; 0x15
     f70:	7e 89       	ldd	r23, Y+22	; 0x16
     f72:	8f 89       	ldd	r24, Y+23	; 0x17
     f74:	98 8d       	ldd	r25, Y+24	; 0x18
     f76:	20 e0       	ldi	r18, 0x00	; 0
     f78:	30 e0       	ldi	r19, 0x00	; 0
     f7a:	40 e8       	ldi	r20, 0x80	; 128
     f7c:	5f e3       	ldi	r21, 0x3F	; 63
     f7e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
     f82:	88 23       	and	r24, r24
     f84:	2c f4       	brge	.+10     	; 0xf90 <SSD_DisplayNumber+0xa8>
		__ticks = 1;
     f86:	81 e0       	ldi	r24, 0x01	; 1
     f88:	90 e0       	ldi	r25, 0x00	; 0
     f8a:	9c 8b       	std	Y+20, r25	; 0x14
     f8c:	8b 8b       	std	Y+19, r24	; 0x13
     f8e:	3f c0       	rjmp	.+126    	; 0x100e <SSD_DisplayNumber+0x126>
	else if (__tmp > 65535)
     f90:	6d 89       	ldd	r22, Y+21	; 0x15
     f92:	7e 89       	ldd	r23, Y+22	; 0x16
     f94:	8f 89       	ldd	r24, Y+23	; 0x17
     f96:	98 8d       	ldd	r25, Y+24	; 0x18
     f98:	20 e0       	ldi	r18, 0x00	; 0
     f9a:	3f ef       	ldi	r19, 0xFF	; 255
     f9c:	4f e7       	ldi	r20, 0x7F	; 127
     f9e:	57 e4       	ldi	r21, 0x47	; 71
     fa0:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
     fa4:	18 16       	cp	r1, r24
     fa6:	4c f5       	brge	.+82     	; 0xffa <SSD_DisplayNumber+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fa8:	69 8d       	ldd	r22, Y+25	; 0x19
     faa:	7a 8d       	ldd	r23, Y+26	; 0x1a
     fac:	8b 8d       	ldd	r24, Y+27	; 0x1b
     fae:	9c 8d       	ldd	r25, Y+28	; 0x1c
     fb0:	20 e0       	ldi	r18, 0x00	; 0
     fb2:	30 e0       	ldi	r19, 0x00	; 0
     fb4:	40 e2       	ldi	r20, 0x20	; 32
     fb6:	51 e4       	ldi	r21, 0x41	; 65
     fb8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     fbc:	dc 01       	movw	r26, r24
     fbe:	cb 01       	movw	r24, r22
     fc0:	bc 01       	movw	r22, r24
     fc2:	cd 01       	movw	r24, r26
     fc4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     fc8:	dc 01       	movw	r26, r24
     fca:	cb 01       	movw	r24, r22
     fcc:	9c 8b       	std	Y+20, r25	; 0x14
     fce:	8b 8b       	std	Y+19, r24	; 0x13
     fd0:	0f c0       	rjmp	.+30     	; 0xff0 <SSD_DisplayNumber+0x108>
     fd2:	80 e9       	ldi	r24, 0x90	; 144
     fd4:	91 e0       	ldi	r25, 0x01	; 1
     fd6:	9a 8b       	std	Y+18, r25	; 0x12
     fd8:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     fda:	89 89       	ldd	r24, Y+17	; 0x11
     fdc:	9a 89       	ldd	r25, Y+18	; 0x12
     fde:	01 97       	sbiw	r24, 0x01	; 1
     fe0:	f1 f7       	brne	.-4      	; 0xfde <SSD_DisplayNumber+0xf6>
     fe2:	9a 8b       	std	Y+18, r25	; 0x12
     fe4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fe6:	8b 89       	ldd	r24, Y+19	; 0x13
     fe8:	9c 89       	ldd	r25, Y+20	; 0x14
     fea:	01 97       	sbiw	r24, 0x01	; 1
     fec:	9c 8b       	std	Y+20, r25	; 0x14
     fee:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ff0:	8b 89       	ldd	r24, Y+19	; 0x13
     ff2:	9c 89       	ldd	r25, Y+20	; 0x14
     ff4:	00 97       	sbiw	r24, 0x00	; 0
     ff6:	69 f7       	brne	.-38     	; 0xfd2 <SSD_DisplayNumber+0xea>
     ff8:	14 c0       	rjmp	.+40     	; 0x1022 <SSD_DisplayNumber+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ffa:	6d 89       	ldd	r22, Y+21	; 0x15
     ffc:	7e 89       	ldd	r23, Y+22	; 0x16
     ffe:	8f 89       	ldd	r24, Y+23	; 0x17
    1000:	98 8d       	ldd	r25, Y+24	; 0x18
    1002:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1006:	dc 01       	movw	r26, r24
    1008:	cb 01       	movw	r24, r22
    100a:	9c 8b       	std	Y+20, r25	; 0x14
    100c:	8b 8b       	std	Y+19, r24	; 0x13
    100e:	8b 89       	ldd	r24, Y+19	; 0x13
    1010:	9c 89       	ldd	r25, Y+20	; 0x14
    1012:	98 8b       	std	Y+16, r25	; 0x10
    1014:	8f 87       	std	Y+15, r24	; 0x0f
    1016:	8f 85       	ldd	r24, Y+15	; 0x0f
    1018:	98 89       	ldd	r25, Y+16	; 0x10
    101a:	01 97       	sbiw	r24, 0x01	; 1
    101c:	f1 f7       	brne	.-4      	; 0x101a <SSD_DisplayNumber+0x132>
    101e:	98 8b       	std	Y+16, r25	; 0x10
    1020:	8f 87       	std	Y+15, r24	; 0x0f
	/*	wait(1m)	*/
	_delay_ms(1);

	/*	Disable SSD1	*/
	Dio_WriteChannel(DIO_PORTB, DIO_PIN2, STD_LOW);
    1022:	81 e0       	ldi	r24, 0x01	; 1
    1024:	62 e0       	ldi	r22, 0x02	; 2
    1026:	40 e0       	ldi	r20, 0x00	; 0
    1028:	0e 94 54 10 	call	0x20a8	; 0x20a8 <Dio_WriteChannel>
	/*	Enable SSD2	*/
	Dio_WriteChannel(DIO_PORTB, DIO_PIN1, STD_HIGH);
    102c:	81 e0       	ldi	r24, 0x01	; 1
    102e:	61 e0       	ldi	r22, 0x01	; 1
    1030:	41 e0       	ldi	r20, 0x01	; 1
    1032:	0e 94 54 10 	call	0x20a8	; 0x20a8 <Dio_WriteChannel>
	/*	Write Number To SSD	*/
	Dio_WriteGroup(DIO_PORTA,SSD_MASK,loc_Second_Digit);
    1036:	80 e0       	ldi	r24, 0x00	; 0
    1038:	60 ef       	ldi	r22, 0xF0	; 240
    103a:	4d 8d       	ldd	r20, Y+29	; 0x1d
    103c:	0e 94 37 11 	call	0x226e	; 0x226e <Dio_WriteGroup>
    1040:	80 e0       	ldi	r24, 0x00	; 0
    1042:	90 e0       	ldi	r25, 0x00	; 0
    1044:	a0 e8       	ldi	r26, 0x80	; 128
    1046:	bf e3       	ldi	r27, 0x3F	; 63
    1048:	8b 87       	std	Y+11, r24	; 0x0b
    104a:	9c 87       	std	Y+12, r25	; 0x0c
    104c:	ad 87       	std	Y+13, r26	; 0x0d
    104e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1050:	6b 85       	ldd	r22, Y+11	; 0x0b
    1052:	7c 85       	ldd	r23, Y+12	; 0x0c
    1054:	8d 85       	ldd	r24, Y+13	; 0x0d
    1056:	9e 85       	ldd	r25, Y+14	; 0x0e
    1058:	20 e0       	ldi	r18, 0x00	; 0
    105a:	30 e0       	ldi	r19, 0x00	; 0
    105c:	4a e7       	ldi	r20, 0x7A	; 122
    105e:	55 e4       	ldi	r21, 0x45	; 69
    1060:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1064:	dc 01       	movw	r26, r24
    1066:	cb 01       	movw	r24, r22
    1068:	8f 83       	std	Y+7, r24	; 0x07
    106a:	98 87       	std	Y+8, r25	; 0x08
    106c:	a9 87       	std	Y+9, r26	; 0x09
    106e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1070:	6f 81       	ldd	r22, Y+7	; 0x07
    1072:	78 85       	ldd	r23, Y+8	; 0x08
    1074:	89 85       	ldd	r24, Y+9	; 0x09
    1076:	9a 85       	ldd	r25, Y+10	; 0x0a
    1078:	20 e0       	ldi	r18, 0x00	; 0
    107a:	30 e0       	ldi	r19, 0x00	; 0
    107c:	40 e8       	ldi	r20, 0x80	; 128
    107e:	5f e3       	ldi	r21, 0x3F	; 63
    1080:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1084:	88 23       	and	r24, r24
    1086:	2c f4       	brge	.+10     	; 0x1092 <SSD_DisplayNumber+0x1aa>
		__ticks = 1;
    1088:	81 e0       	ldi	r24, 0x01	; 1
    108a:	90 e0       	ldi	r25, 0x00	; 0
    108c:	9e 83       	std	Y+6, r25	; 0x06
    108e:	8d 83       	std	Y+5, r24	; 0x05
    1090:	3f c0       	rjmp	.+126    	; 0x1110 <SSD_DisplayNumber+0x228>
	else if (__tmp > 65535)
    1092:	6f 81       	ldd	r22, Y+7	; 0x07
    1094:	78 85       	ldd	r23, Y+8	; 0x08
    1096:	89 85       	ldd	r24, Y+9	; 0x09
    1098:	9a 85       	ldd	r25, Y+10	; 0x0a
    109a:	20 e0       	ldi	r18, 0x00	; 0
    109c:	3f ef       	ldi	r19, 0xFF	; 255
    109e:	4f e7       	ldi	r20, 0x7F	; 127
    10a0:	57 e4       	ldi	r21, 0x47	; 71
    10a2:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    10a6:	18 16       	cp	r1, r24
    10a8:	4c f5       	brge	.+82     	; 0x10fc <SSD_DisplayNumber+0x214>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10aa:	6b 85       	ldd	r22, Y+11	; 0x0b
    10ac:	7c 85       	ldd	r23, Y+12	; 0x0c
    10ae:	8d 85       	ldd	r24, Y+13	; 0x0d
    10b0:	9e 85       	ldd	r25, Y+14	; 0x0e
    10b2:	20 e0       	ldi	r18, 0x00	; 0
    10b4:	30 e0       	ldi	r19, 0x00	; 0
    10b6:	40 e2       	ldi	r20, 0x20	; 32
    10b8:	51 e4       	ldi	r21, 0x41	; 65
    10ba:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    10be:	dc 01       	movw	r26, r24
    10c0:	cb 01       	movw	r24, r22
    10c2:	bc 01       	movw	r22, r24
    10c4:	cd 01       	movw	r24, r26
    10c6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    10ca:	dc 01       	movw	r26, r24
    10cc:	cb 01       	movw	r24, r22
    10ce:	9e 83       	std	Y+6, r25	; 0x06
    10d0:	8d 83       	std	Y+5, r24	; 0x05
    10d2:	0f c0       	rjmp	.+30     	; 0x10f2 <SSD_DisplayNumber+0x20a>
    10d4:	80 e9       	ldi	r24, 0x90	; 144
    10d6:	91 e0       	ldi	r25, 0x01	; 1
    10d8:	9c 83       	std	Y+4, r25	; 0x04
    10da:	8b 83       	std	Y+3, r24	; 0x03
    10dc:	8b 81       	ldd	r24, Y+3	; 0x03
    10de:	9c 81       	ldd	r25, Y+4	; 0x04
    10e0:	01 97       	sbiw	r24, 0x01	; 1
    10e2:	f1 f7       	brne	.-4      	; 0x10e0 <SSD_DisplayNumber+0x1f8>
    10e4:	9c 83       	std	Y+4, r25	; 0x04
    10e6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10e8:	8d 81       	ldd	r24, Y+5	; 0x05
    10ea:	9e 81       	ldd	r25, Y+6	; 0x06
    10ec:	01 97       	sbiw	r24, 0x01	; 1
    10ee:	9e 83       	std	Y+6, r25	; 0x06
    10f0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10f2:	8d 81       	ldd	r24, Y+5	; 0x05
    10f4:	9e 81       	ldd	r25, Y+6	; 0x06
    10f6:	00 97       	sbiw	r24, 0x00	; 0
    10f8:	69 f7       	brne	.-38     	; 0x10d4 <SSD_DisplayNumber+0x1ec>
    10fa:	14 c0       	rjmp	.+40     	; 0x1124 <SSD_DisplayNumber+0x23c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10fc:	6f 81       	ldd	r22, Y+7	; 0x07
    10fe:	78 85       	ldd	r23, Y+8	; 0x08
    1100:	89 85       	ldd	r24, Y+9	; 0x09
    1102:	9a 85       	ldd	r25, Y+10	; 0x0a
    1104:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1108:	dc 01       	movw	r26, r24
    110a:	cb 01       	movw	r24, r22
    110c:	9e 83       	std	Y+6, r25	; 0x06
    110e:	8d 83       	std	Y+5, r24	; 0x05
    1110:	8d 81       	ldd	r24, Y+5	; 0x05
    1112:	9e 81       	ldd	r25, Y+6	; 0x06
    1114:	9a 83       	std	Y+2, r25	; 0x02
    1116:	89 83       	std	Y+1, r24	; 0x01
    1118:	89 81       	ldd	r24, Y+1	; 0x01
    111a:	9a 81       	ldd	r25, Y+2	; 0x02
    111c:	01 97       	sbiw	r24, 0x01	; 1
    111e:	f1 f7       	brne	.-4      	; 0x111c <SSD_DisplayNumber+0x234>
    1120:	9a 83       	std	Y+2, r25	; 0x02
    1122:	89 83       	std	Y+1, r24	; 0x01
	/*	wait(1m)	*/
	_delay_ms(1);
}
    1124:	6f 96       	adiw	r28, 0x1f	; 31
    1126:	0f b6       	in	r0, 0x3f	; 63
    1128:	f8 94       	cli
    112a:	de bf       	out	0x3e, r29	; 62
    112c:	0f be       	out	0x3f, r0	; 63
    112e:	cd bf       	out	0x3d, r28	; 61
    1130:	cf 91       	pop	r28
    1132:	df 91       	pop	r29
    1134:	08 95       	ret

00001136 <LED_Init>:
 */

#include "Led.h"

void LED_Init(void)
{
    1136:	df 93       	push	r29
    1138:	cf 93       	push	r28
    113a:	cd b7       	in	r28, 0x3d	; 61
    113c:	de b7       	in	r29, 0x3e	; 62
	Dio_ConfigChannel(LED0_PORT,LED0_PIN,OUTPUT);
    113e:	82 e0       	ldi	r24, 0x02	; 2
    1140:	62 e0       	ldi	r22, 0x02	; 2
    1142:	41 e0       	ldi	r20, 0x01	; 1
    1144:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <Dio_ConfigChannel>
	Dio_ConfigChannel(LED1_PORT,LED1_PIN,OUTPUT);
    1148:	82 e0       	ldi	r24, 0x02	; 2
    114a:	67 e0       	ldi	r22, 0x07	; 7
    114c:	41 e0       	ldi	r20, 0x01	; 1
    114e:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <Dio_ConfigChannel>
	Dio_ConfigChannel(LED2_PORT,LED2_PIN,OUTPUT);
    1152:	83 e0       	ldi	r24, 0x03	; 3
    1154:	63 e0       	ldi	r22, 0x03	; 3
    1156:	41 e0       	ldi	r20, 0x01	; 1
    1158:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <Dio_ConfigChannel>
}
    115c:	cf 91       	pop	r28
    115e:	df 91       	pop	r29
    1160:	08 95       	ret

00001162 <LED_ON>:

void LED_ON(led_type ledId)
{
    1162:	df 93       	push	r29
    1164:	cf 93       	push	r28
    1166:	00 d0       	rcall	.+0      	; 0x1168 <LED_ON+0x6>
    1168:	0f 92       	push	r0
    116a:	cd b7       	in	r28, 0x3d	; 61
    116c:	de b7       	in	r29, 0x3e	; 62
    116e:	89 83       	std	Y+1, r24	; 0x01
	switch (ledId)
    1170:	89 81       	ldd	r24, Y+1	; 0x01
    1172:	28 2f       	mov	r18, r24
    1174:	30 e0       	ldi	r19, 0x00	; 0
    1176:	3b 83       	std	Y+3, r19	; 0x03
    1178:	2a 83       	std	Y+2, r18	; 0x02
    117a:	8a 81       	ldd	r24, Y+2	; 0x02
    117c:	9b 81       	ldd	r25, Y+3	; 0x03
    117e:	81 30       	cpi	r24, 0x01	; 1
    1180:	91 05       	cpc	r25, r1
    1182:	79 f0       	breq	.+30     	; 0x11a2 <LED_ON+0x40>
    1184:	2a 81       	ldd	r18, Y+2	; 0x02
    1186:	3b 81       	ldd	r19, Y+3	; 0x03
    1188:	22 30       	cpi	r18, 0x02	; 2
    118a:	31 05       	cpc	r19, r1
    118c:	81 f0       	breq	.+32     	; 0x11ae <LED_ON+0x4c>
    118e:	8a 81       	ldd	r24, Y+2	; 0x02
    1190:	9b 81       	ldd	r25, Y+3	; 0x03
    1192:	00 97       	sbiw	r24, 0x00	; 0
    1194:	89 f4       	brne	.+34     	; 0x11b8 <LED_ON+0x56>
	{
	case LED0:
		Dio_WriteChannel(LED0_PORT,LED0_PIN,STD_HIGH);
    1196:	82 e0       	ldi	r24, 0x02	; 2
    1198:	62 e0       	ldi	r22, 0x02	; 2
    119a:	41 e0       	ldi	r20, 0x01	; 1
    119c:	0e 94 54 10 	call	0x20a8	; 0x20a8 <Dio_WriteChannel>
    11a0:	0b c0       	rjmp	.+22     	; 0x11b8 <LED_ON+0x56>
		break;

	case LED1:
		Dio_WriteChannel(LED1_PORT,LED1_PIN,STD_HIGH);
    11a2:	82 e0       	ldi	r24, 0x02	; 2
    11a4:	67 e0       	ldi	r22, 0x07	; 7
    11a6:	41 e0       	ldi	r20, 0x01	; 1
    11a8:	0e 94 54 10 	call	0x20a8	; 0x20a8 <Dio_WriteChannel>
    11ac:	05 c0       	rjmp	.+10     	; 0x11b8 <LED_ON+0x56>
		break;

	case LED2:
		Dio_WriteChannel(LED2_PORT,LED2_PIN,STD_HIGH);
    11ae:	83 e0       	ldi	r24, 0x03	; 3
    11b0:	63 e0       	ldi	r22, 0x03	; 3
    11b2:	41 e0       	ldi	r20, 0x01	; 1
    11b4:	0e 94 54 10 	call	0x20a8	; 0x20a8 <Dio_WriteChannel>
		break;
	}
}
    11b8:	0f 90       	pop	r0
    11ba:	0f 90       	pop	r0
    11bc:	0f 90       	pop	r0
    11be:	cf 91       	pop	r28
    11c0:	df 91       	pop	r29
    11c2:	08 95       	ret

000011c4 <LED_OFF>:

void LED_OFF(led_type ledId)
{
    11c4:	df 93       	push	r29
    11c6:	cf 93       	push	r28
    11c8:	00 d0       	rcall	.+0      	; 0x11ca <LED_OFF+0x6>
    11ca:	0f 92       	push	r0
    11cc:	cd b7       	in	r28, 0x3d	; 61
    11ce:	de b7       	in	r29, 0x3e	; 62
    11d0:	89 83       	std	Y+1, r24	; 0x01
	switch (ledId)
    11d2:	89 81       	ldd	r24, Y+1	; 0x01
    11d4:	28 2f       	mov	r18, r24
    11d6:	30 e0       	ldi	r19, 0x00	; 0
    11d8:	3b 83       	std	Y+3, r19	; 0x03
    11da:	2a 83       	std	Y+2, r18	; 0x02
    11dc:	8a 81       	ldd	r24, Y+2	; 0x02
    11de:	9b 81       	ldd	r25, Y+3	; 0x03
    11e0:	81 30       	cpi	r24, 0x01	; 1
    11e2:	91 05       	cpc	r25, r1
    11e4:	79 f0       	breq	.+30     	; 0x1204 <LED_OFF+0x40>
    11e6:	2a 81       	ldd	r18, Y+2	; 0x02
    11e8:	3b 81       	ldd	r19, Y+3	; 0x03
    11ea:	22 30       	cpi	r18, 0x02	; 2
    11ec:	31 05       	cpc	r19, r1
    11ee:	81 f0       	breq	.+32     	; 0x1210 <LED_OFF+0x4c>
    11f0:	8a 81       	ldd	r24, Y+2	; 0x02
    11f2:	9b 81       	ldd	r25, Y+3	; 0x03
    11f4:	00 97       	sbiw	r24, 0x00	; 0
    11f6:	89 f4       	brne	.+34     	; 0x121a <LED_OFF+0x56>
	{
	case LED0:
		Dio_WriteChannel(LED0_PORT,LED0_PIN,STD_LOW);
    11f8:	82 e0       	ldi	r24, 0x02	; 2
    11fa:	62 e0       	ldi	r22, 0x02	; 2
    11fc:	40 e0       	ldi	r20, 0x00	; 0
    11fe:	0e 94 54 10 	call	0x20a8	; 0x20a8 <Dio_WriteChannel>
    1202:	0b c0       	rjmp	.+22     	; 0x121a <LED_OFF+0x56>
		break;

	case LED1:
		Dio_WriteChannel(LED1_PORT,LED1_PIN,STD_LOW);
    1204:	82 e0       	ldi	r24, 0x02	; 2
    1206:	67 e0       	ldi	r22, 0x07	; 7
    1208:	40 e0       	ldi	r20, 0x00	; 0
    120a:	0e 94 54 10 	call	0x20a8	; 0x20a8 <Dio_WriteChannel>
    120e:	05 c0       	rjmp	.+10     	; 0x121a <LED_OFF+0x56>
		break;

	case LED2:
		Dio_WriteChannel(LED2_PORT,LED2_PIN,STD_LOW);
    1210:	83 e0       	ldi	r24, 0x03	; 3
    1212:	63 e0       	ldi	r22, 0x03	; 3
    1214:	40 e0       	ldi	r20, 0x00	; 0
    1216:	0e 94 54 10 	call	0x20a8	; 0x20a8 <Dio_WriteChannel>
		break;
	}
}
    121a:	0f 90       	pop	r0
    121c:	0f 90       	pop	r0
    121e:	0f 90       	pop	r0
    1220:	cf 91       	pop	r28
    1222:	df 91       	pop	r29
    1224:	08 95       	ret

00001226 <LED_TOGGLE>:
void LED_TOGGLE(led_type ledId)
{
    1226:	df 93       	push	r29
    1228:	cf 93       	push	r28
    122a:	00 d0       	rcall	.+0      	; 0x122c <LED_TOGGLE+0x6>
    122c:	0f 92       	push	r0
    122e:	cd b7       	in	r28, 0x3d	; 61
    1230:	de b7       	in	r29, 0x3e	; 62
    1232:	89 83       	std	Y+1, r24	; 0x01
	switch (ledId)
    1234:	89 81       	ldd	r24, Y+1	; 0x01
    1236:	28 2f       	mov	r18, r24
    1238:	30 e0       	ldi	r19, 0x00	; 0
    123a:	3b 83       	std	Y+3, r19	; 0x03
    123c:	2a 83       	std	Y+2, r18	; 0x02
    123e:	8a 81       	ldd	r24, Y+2	; 0x02
    1240:	9b 81       	ldd	r25, Y+3	; 0x03
    1242:	81 30       	cpi	r24, 0x01	; 1
    1244:	91 05       	cpc	r25, r1
    1246:	71 f0       	breq	.+28     	; 0x1264 <LED_TOGGLE+0x3e>
    1248:	2a 81       	ldd	r18, Y+2	; 0x02
    124a:	3b 81       	ldd	r19, Y+3	; 0x03
    124c:	22 30       	cpi	r18, 0x02	; 2
    124e:	31 05       	cpc	r19, r1
    1250:	71 f0       	breq	.+28     	; 0x126e <LED_TOGGLE+0x48>
    1252:	8a 81       	ldd	r24, Y+2	; 0x02
    1254:	9b 81       	ldd	r25, Y+3	; 0x03
    1256:	00 97       	sbiw	r24, 0x00	; 0
    1258:	71 f4       	brne	.+28     	; 0x1276 <LED_TOGGLE+0x50>
	{
	case LED0:
		Dio_TogglChannel(LED0_PORT,LED0_PIN);
    125a:	82 e0       	ldi	r24, 0x02	; 2
    125c:	62 e0       	ldi	r22, 0x02	; 2
    125e:	0e 94 a7 11 	call	0x234e	; 0x234e <Dio_TogglChannel>
    1262:	09 c0       	rjmp	.+18     	; 0x1276 <LED_TOGGLE+0x50>
		break;

	case LED1:
		Dio_TogglChannel(LED1_PORT,LED1_PIN);
    1264:	82 e0       	ldi	r24, 0x02	; 2
    1266:	67 e0       	ldi	r22, 0x07	; 7
    1268:	0e 94 a7 11 	call	0x234e	; 0x234e <Dio_TogglChannel>
    126c:	04 c0       	rjmp	.+8      	; 0x1276 <LED_TOGGLE+0x50>
		break;

	case LED2:
		Dio_TogglChannel(LED2_PORT,LED2_PIN);
    126e:	83 e0       	ldi	r24, 0x03	; 3
    1270:	63 e0       	ldi	r22, 0x03	; 3
    1272:	0e 94 a7 11 	call	0x234e	; 0x234e <Dio_TogglChannel>
		break;
	}
}
    1276:	0f 90       	pop	r0
    1278:	0f 90       	pop	r0
    127a:	0f 90       	pop	r0
    127c:	cf 91       	pop	r28
    127e:	df 91       	pop	r29
    1280:	08 95       	ret

00001282 <Lcd_WriteCustom>:
 * 			PA6
 * 			PA7
 * */
extern u8 customChar[8][8];
static void Lcd_WriteCustom(void)
{
    1282:	df 93       	push	r29
    1284:	cf 93       	push	r28
    1286:	00 d0       	rcall	.+0      	; 0x1288 <Lcd_WriteCustom+0x6>
    1288:	cd b7       	in	r28, 0x3d	; 61
    128a:	de b7       	in	r29, 0x3e	; 62
	u8 loc_ByteIndex=0;
    128c:	1a 82       	std	Y+2, r1	; 0x02
	u8 loc_CharIndx=0;
    128e:	19 82       	std	Y+1, r1	; 0x01
	for (loc_CharIndx=0;loc_CharIndx<NO_CSTOM_CHAR;loc_CharIndx++)
    1290:	19 82       	std	Y+1, r1	; 0x01
    1292:	2c c0       	rjmp	.+88     	; 0x12ec <Lcd_WriteCustom+0x6a>
	{
		Lcd_Cmd(_LCD_CGRAM_START_ADDRESS +(loc_CharIndx*8));
    1294:	89 81       	ldd	r24, Y+1	; 0x01
    1296:	88 2f       	mov	r24, r24
    1298:	90 e0       	ldi	r25, 0x00	; 0
    129a:	08 96       	adiw	r24, 0x08	; 8
    129c:	88 0f       	add	r24, r24
    129e:	99 1f       	adc	r25, r25
    12a0:	88 0f       	add	r24, r24
    12a2:	99 1f       	adc	r25, r25
    12a4:	88 0f       	add	r24, r24
    12a6:	99 1f       	adc	r25, r25
    12a8:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <Lcd_Cmd>
			for (loc_ByteIndex =0; loc_ByteIndex<NO_CSTOM_CHAR_BYTES;loc_ByteIndex++)
    12ac:	1a 82       	std	Y+2, r1	; 0x02
    12ae:	18 c0       	rjmp	.+48     	; 0x12e0 <Lcd_WriteCustom+0x5e>
			{
				Lcd_DisplayChr(customChar[loc_CharIndx][loc_ByteIndex]);
    12b0:	89 81       	ldd	r24, Y+1	; 0x01
    12b2:	48 2f       	mov	r20, r24
    12b4:	50 e0       	ldi	r21, 0x00	; 0
    12b6:	8a 81       	ldd	r24, Y+2	; 0x02
    12b8:	28 2f       	mov	r18, r24
    12ba:	30 e0       	ldi	r19, 0x00	; 0
    12bc:	ca 01       	movw	r24, r20
    12be:	88 0f       	add	r24, r24
    12c0:	99 1f       	adc	r25, r25
    12c2:	88 0f       	add	r24, r24
    12c4:	99 1f       	adc	r25, r25
    12c6:	88 0f       	add	r24, r24
    12c8:	99 1f       	adc	r25, r25
    12ca:	82 0f       	add	r24, r18
    12cc:	93 1f       	adc	r25, r19
    12ce:	fc 01       	movw	r30, r24
    12d0:	e8 59       	subi	r30, 0x98	; 152
    12d2:	fe 4f       	sbci	r31, 0xFE	; 254
    12d4:	80 81       	ld	r24, Z
    12d6:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <Lcd_DisplayChr>
	u8 loc_ByteIndex=0;
	u8 loc_CharIndx=0;
	for (loc_CharIndx=0;loc_CharIndx<NO_CSTOM_CHAR;loc_CharIndx++)
	{
		Lcd_Cmd(_LCD_CGRAM_START_ADDRESS +(loc_CharIndx*8));
			for (loc_ByteIndex =0; loc_ByteIndex<NO_CSTOM_CHAR_BYTES;loc_ByteIndex++)
    12da:	8a 81       	ldd	r24, Y+2	; 0x02
    12dc:	8f 5f       	subi	r24, 0xFF	; 255
    12de:	8a 83       	std	Y+2, r24	; 0x02
    12e0:	8a 81       	ldd	r24, Y+2	; 0x02
    12e2:	88 30       	cpi	r24, 0x08	; 8
    12e4:	28 f3       	brcs	.-54     	; 0x12b0 <Lcd_WriteCustom+0x2e>
extern u8 customChar[8][8];
static void Lcd_WriteCustom(void)
{
	u8 loc_ByteIndex=0;
	u8 loc_CharIndx=0;
	for (loc_CharIndx=0;loc_CharIndx<NO_CSTOM_CHAR;loc_CharIndx++)
    12e6:	89 81       	ldd	r24, Y+1	; 0x01
    12e8:	8f 5f       	subi	r24, 0xFF	; 255
    12ea:	89 83       	std	Y+1, r24	; 0x01
    12ec:	89 81       	ldd	r24, Y+1	; 0x01
    12ee:	88 30       	cpi	r24, 0x08	; 8
    12f0:	88 f2       	brcs	.-94     	; 0x1294 <Lcd_WriteCustom+0x12>
			for (loc_ByteIndex =0; loc_ByteIndex<NO_CSTOM_CHAR_BYTES;loc_ByteIndex++)
			{
				Lcd_DisplayChr(customChar[loc_CharIndx][loc_ByteIndex]);
			}
	}
}
    12f2:	0f 90       	pop	r0
    12f4:	0f 90       	pop	r0
    12f6:	cf 91       	pop	r28
    12f8:	df 91       	pop	r29
    12fa:	08 95       	ret

000012fc <Lcd_Init>:

void Lcd_Init(void)
{
    12fc:	df 93       	push	r29
    12fe:	cf 93       	push	r28
    1300:	cd b7       	in	r28, 0x3d	; 61
    1302:	de b7       	in	r29, 0x3e	; 62
    1304:	e4 97       	sbiw	r28, 0x34	; 52
    1306:	0f b6       	in	r0, 0x3f	; 63
    1308:	f8 94       	cli
    130a:	de bf       	out	0x3e, r29	; 62
    130c:	0f be       	out	0x3f, r0	; 63
    130e:	cd bf       	out	0x3d, r28	; 61
	/*	Configure Data Lines As Output	*/
	Dio_ConfigChannel(DIO_PORTA,DIO_PIN4,OUTPUT);
    1310:	80 e0       	ldi	r24, 0x00	; 0
    1312:	64 e0       	ldi	r22, 0x04	; 4
    1314:	41 e0       	ldi	r20, 0x01	; 1
    1316:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <Dio_ConfigChannel>
	Dio_ConfigChannel(DIO_PORTA,DIO_PIN5,OUTPUT);
    131a:	80 e0       	ldi	r24, 0x00	; 0
    131c:	65 e0       	ldi	r22, 0x05	; 5
    131e:	41 e0       	ldi	r20, 0x01	; 1
    1320:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <Dio_ConfigChannel>
	Dio_ConfigChannel(DIO_PORTA,DIO_PIN6,OUTPUT);
    1324:	80 e0       	ldi	r24, 0x00	; 0
    1326:	66 e0       	ldi	r22, 0x06	; 6
    1328:	41 e0       	ldi	r20, 0x01	; 1
    132a:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <Dio_ConfigChannel>
	Dio_ConfigChannel(DIO_PORTA,DIO_PIN7,OUTPUT);
    132e:	80 e0       	ldi	r24, 0x00	; 0
    1330:	67 e0       	ldi	r22, 0x07	; 7
    1332:	41 e0       	ldi	r20, 0x01	; 1
    1334:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <Dio_ConfigChannel>

	/*	Configure Control Lines As Output	*/
	Dio_ConfigChannel(DIO_PORTB,DIO_PIN1,OUTPUT);   /*	RS	*/
    1338:	81 e0       	ldi	r24, 0x01	; 1
    133a:	61 e0       	ldi	r22, 0x01	; 1
    133c:	41 e0       	ldi	r20, 0x01	; 1
    133e:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <Dio_ConfigChannel>
	Dio_ConfigChannel(DIO_PORTB,DIO_PIN2,OUTPUT);	/*	RW	*/
    1342:	81 e0       	ldi	r24, 0x01	; 1
    1344:	62 e0       	ldi	r22, 0x02	; 2
    1346:	41 e0       	ldi	r20, 0x01	; 1
    1348:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <Dio_ConfigChannel>
	Dio_ConfigChannel(DIO_PORTB,DIO_PIN3,OUTPUT);	/*	En	*/
    134c:	81 e0       	ldi	r24, 0x01	; 1
    134e:	63 e0       	ldi	r22, 0x03	; 3
    1350:	41 e0       	ldi	r20, 0x01	; 1
    1352:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <Dio_ConfigChannel>

	Dio_WriteChannel(DIO_PORTB, DIO_PIN2, STD_LOW);
    1356:	81 e0       	ldi	r24, 0x01	; 1
    1358:	62 e0       	ldi	r22, 0x02	; 2
    135a:	40 e0       	ldi	r20, 0x00	; 0
    135c:	0e 94 54 10 	call	0x20a8	; 0x20a8 <Dio_WriteChannel>
    1360:	80 e0       	ldi	r24, 0x00	; 0
    1362:	90 e0       	ldi	r25, 0x00	; 0
    1364:	a0 e7       	ldi	r26, 0x70	; 112
    1366:	b1 e4       	ldi	r27, 0x41	; 65
    1368:	89 ab       	std	Y+49, r24	; 0x31
    136a:	9a ab       	std	Y+50, r25	; 0x32
    136c:	ab ab       	std	Y+51, r26	; 0x33
    136e:	bc ab       	std	Y+52, r27	; 0x34
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1370:	69 a9       	ldd	r22, Y+49	; 0x31
    1372:	7a a9       	ldd	r23, Y+50	; 0x32
    1374:	8b a9       	ldd	r24, Y+51	; 0x33
    1376:	9c a9       	ldd	r25, Y+52	; 0x34
    1378:	20 e0       	ldi	r18, 0x00	; 0
    137a:	30 e0       	ldi	r19, 0x00	; 0
    137c:	4a e7       	ldi	r20, 0x7A	; 122
    137e:	55 e4       	ldi	r21, 0x45	; 69
    1380:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1384:	dc 01       	movw	r26, r24
    1386:	cb 01       	movw	r24, r22
    1388:	8d a7       	std	Y+45, r24	; 0x2d
    138a:	9e a7       	std	Y+46, r25	; 0x2e
    138c:	af a7       	std	Y+47, r26	; 0x2f
    138e:	b8 ab       	std	Y+48, r27	; 0x30
	if (__tmp < 1.0)
    1390:	6d a5       	ldd	r22, Y+45	; 0x2d
    1392:	7e a5       	ldd	r23, Y+46	; 0x2e
    1394:	8f a5       	ldd	r24, Y+47	; 0x2f
    1396:	98 a9       	ldd	r25, Y+48	; 0x30
    1398:	20 e0       	ldi	r18, 0x00	; 0
    139a:	30 e0       	ldi	r19, 0x00	; 0
    139c:	40 e8       	ldi	r20, 0x80	; 128
    139e:	5f e3       	ldi	r21, 0x3F	; 63
    13a0:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    13a4:	88 23       	and	r24, r24
    13a6:	2c f4       	brge	.+10     	; 0x13b2 <Lcd_Init+0xb6>
		__ticks = 1;
    13a8:	81 e0       	ldi	r24, 0x01	; 1
    13aa:	90 e0       	ldi	r25, 0x00	; 0
    13ac:	9c a7       	std	Y+44, r25	; 0x2c
    13ae:	8b a7       	std	Y+43, r24	; 0x2b
    13b0:	3f c0       	rjmp	.+126    	; 0x1430 <Lcd_Init+0x134>
	else if (__tmp > 65535)
    13b2:	6d a5       	ldd	r22, Y+45	; 0x2d
    13b4:	7e a5       	ldd	r23, Y+46	; 0x2e
    13b6:	8f a5       	ldd	r24, Y+47	; 0x2f
    13b8:	98 a9       	ldd	r25, Y+48	; 0x30
    13ba:	20 e0       	ldi	r18, 0x00	; 0
    13bc:	3f ef       	ldi	r19, 0xFF	; 255
    13be:	4f e7       	ldi	r20, 0x7F	; 127
    13c0:	57 e4       	ldi	r21, 0x47	; 71
    13c2:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    13c6:	18 16       	cp	r1, r24
    13c8:	4c f5       	brge	.+82     	; 0x141c <Lcd_Init+0x120>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13ca:	69 a9       	ldd	r22, Y+49	; 0x31
    13cc:	7a a9       	ldd	r23, Y+50	; 0x32
    13ce:	8b a9       	ldd	r24, Y+51	; 0x33
    13d0:	9c a9       	ldd	r25, Y+52	; 0x34
    13d2:	20 e0       	ldi	r18, 0x00	; 0
    13d4:	30 e0       	ldi	r19, 0x00	; 0
    13d6:	40 e2       	ldi	r20, 0x20	; 32
    13d8:	51 e4       	ldi	r21, 0x41	; 65
    13da:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    13de:	dc 01       	movw	r26, r24
    13e0:	cb 01       	movw	r24, r22
    13e2:	bc 01       	movw	r22, r24
    13e4:	cd 01       	movw	r24, r26
    13e6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    13ea:	dc 01       	movw	r26, r24
    13ec:	cb 01       	movw	r24, r22
    13ee:	9c a7       	std	Y+44, r25	; 0x2c
    13f0:	8b a7       	std	Y+43, r24	; 0x2b
    13f2:	0f c0       	rjmp	.+30     	; 0x1412 <Lcd_Init+0x116>
    13f4:	80 e9       	ldi	r24, 0x90	; 144
    13f6:	91 e0       	ldi	r25, 0x01	; 1
    13f8:	9a a7       	std	Y+42, r25	; 0x2a
    13fa:	89 a7       	std	Y+41, r24	; 0x29
    13fc:	89 a5       	ldd	r24, Y+41	; 0x29
    13fe:	9a a5       	ldd	r25, Y+42	; 0x2a
    1400:	01 97       	sbiw	r24, 0x01	; 1
    1402:	f1 f7       	brne	.-4      	; 0x1400 <Lcd_Init+0x104>
    1404:	9a a7       	std	Y+42, r25	; 0x2a
    1406:	89 a7       	std	Y+41, r24	; 0x29
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1408:	8b a5       	ldd	r24, Y+43	; 0x2b
    140a:	9c a5       	ldd	r25, Y+44	; 0x2c
    140c:	01 97       	sbiw	r24, 0x01	; 1
    140e:	9c a7       	std	Y+44, r25	; 0x2c
    1410:	8b a7       	std	Y+43, r24	; 0x2b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1412:	8b a5       	ldd	r24, Y+43	; 0x2b
    1414:	9c a5       	ldd	r25, Y+44	; 0x2c
    1416:	00 97       	sbiw	r24, 0x00	; 0
    1418:	69 f7       	brne	.-38     	; 0x13f4 <Lcd_Init+0xf8>
    141a:	14 c0       	rjmp	.+40     	; 0x1444 <Lcd_Init+0x148>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    141c:	6d a5       	ldd	r22, Y+45	; 0x2d
    141e:	7e a5       	ldd	r23, Y+46	; 0x2e
    1420:	8f a5       	ldd	r24, Y+47	; 0x2f
    1422:	98 a9       	ldd	r25, Y+48	; 0x30
    1424:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1428:	dc 01       	movw	r26, r24
    142a:	cb 01       	movw	r24, r22
    142c:	9c a7       	std	Y+44, r25	; 0x2c
    142e:	8b a7       	std	Y+43, r24	; 0x2b
    1430:	8b a5       	ldd	r24, Y+43	; 0x2b
    1432:	9c a5       	ldd	r25, Y+44	; 0x2c
    1434:	98 a7       	std	Y+40, r25	; 0x28
    1436:	8f a3       	std	Y+39, r24	; 0x27
    1438:	8f a1       	ldd	r24, Y+39	; 0x27
    143a:	98 a5       	ldd	r25, Y+40	; 0x28
    143c:	01 97       	sbiw	r24, 0x01	; 1
    143e:	f1 f7       	brne	.-4      	; 0x143c <Lcd_Init+0x140>
    1440:	98 a7       	std	Y+40, r25	; 0x28
    1442:	8f a3       	std	Y+39, r24	; 0x27

	_delay_ms(15);

	Lcd_Cmd(3);
    1444:	83 e0       	ldi	r24, 0x03	; 3
    1446:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <Lcd_Cmd>
    144a:	80 e0       	ldi	r24, 0x00	; 0
    144c:	90 e0       	ldi	r25, 0x00	; 0
    144e:	a0 ea       	ldi	r26, 0xA0	; 160
    1450:	b0 e4       	ldi	r27, 0x40	; 64
    1452:	8b a3       	std	Y+35, r24	; 0x23
    1454:	9c a3       	std	Y+36, r25	; 0x24
    1456:	ad a3       	std	Y+37, r26	; 0x25
    1458:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    145a:	6b a1       	ldd	r22, Y+35	; 0x23
    145c:	7c a1       	ldd	r23, Y+36	; 0x24
    145e:	8d a1       	ldd	r24, Y+37	; 0x25
    1460:	9e a1       	ldd	r25, Y+38	; 0x26
    1462:	20 e0       	ldi	r18, 0x00	; 0
    1464:	30 e0       	ldi	r19, 0x00	; 0
    1466:	4a e7       	ldi	r20, 0x7A	; 122
    1468:	55 e4       	ldi	r21, 0x45	; 69
    146a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    146e:	dc 01       	movw	r26, r24
    1470:	cb 01       	movw	r24, r22
    1472:	8f 8f       	std	Y+31, r24	; 0x1f
    1474:	98 a3       	std	Y+32, r25	; 0x20
    1476:	a9 a3       	std	Y+33, r26	; 0x21
    1478:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    147a:	6f 8d       	ldd	r22, Y+31	; 0x1f
    147c:	78 a1       	ldd	r23, Y+32	; 0x20
    147e:	89 a1       	ldd	r24, Y+33	; 0x21
    1480:	9a a1       	ldd	r25, Y+34	; 0x22
    1482:	20 e0       	ldi	r18, 0x00	; 0
    1484:	30 e0       	ldi	r19, 0x00	; 0
    1486:	40 e8       	ldi	r20, 0x80	; 128
    1488:	5f e3       	ldi	r21, 0x3F	; 63
    148a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    148e:	88 23       	and	r24, r24
    1490:	2c f4       	brge	.+10     	; 0x149c <Lcd_Init+0x1a0>
		__ticks = 1;
    1492:	81 e0       	ldi	r24, 0x01	; 1
    1494:	90 e0       	ldi	r25, 0x00	; 0
    1496:	9e 8f       	std	Y+30, r25	; 0x1e
    1498:	8d 8f       	std	Y+29, r24	; 0x1d
    149a:	3f c0       	rjmp	.+126    	; 0x151a <Lcd_Init+0x21e>
	else if (__tmp > 65535)
    149c:	6f 8d       	ldd	r22, Y+31	; 0x1f
    149e:	78 a1       	ldd	r23, Y+32	; 0x20
    14a0:	89 a1       	ldd	r24, Y+33	; 0x21
    14a2:	9a a1       	ldd	r25, Y+34	; 0x22
    14a4:	20 e0       	ldi	r18, 0x00	; 0
    14a6:	3f ef       	ldi	r19, 0xFF	; 255
    14a8:	4f e7       	ldi	r20, 0x7F	; 127
    14aa:	57 e4       	ldi	r21, 0x47	; 71
    14ac:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    14b0:	18 16       	cp	r1, r24
    14b2:	4c f5       	brge	.+82     	; 0x1506 <Lcd_Init+0x20a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14b4:	6b a1       	ldd	r22, Y+35	; 0x23
    14b6:	7c a1       	ldd	r23, Y+36	; 0x24
    14b8:	8d a1       	ldd	r24, Y+37	; 0x25
    14ba:	9e a1       	ldd	r25, Y+38	; 0x26
    14bc:	20 e0       	ldi	r18, 0x00	; 0
    14be:	30 e0       	ldi	r19, 0x00	; 0
    14c0:	40 e2       	ldi	r20, 0x20	; 32
    14c2:	51 e4       	ldi	r21, 0x41	; 65
    14c4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    14c8:	dc 01       	movw	r26, r24
    14ca:	cb 01       	movw	r24, r22
    14cc:	bc 01       	movw	r22, r24
    14ce:	cd 01       	movw	r24, r26
    14d0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    14d4:	dc 01       	movw	r26, r24
    14d6:	cb 01       	movw	r24, r22
    14d8:	9e 8f       	std	Y+30, r25	; 0x1e
    14da:	8d 8f       	std	Y+29, r24	; 0x1d
    14dc:	0f c0       	rjmp	.+30     	; 0x14fc <Lcd_Init+0x200>
    14de:	80 e9       	ldi	r24, 0x90	; 144
    14e0:	91 e0       	ldi	r25, 0x01	; 1
    14e2:	9c 8f       	std	Y+28, r25	; 0x1c
    14e4:	8b 8f       	std	Y+27, r24	; 0x1b
    14e6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    14e8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    14ea:	01 97       	sbiw	r24, 0x01	; 1
    14ec:	f1 f7       	brne	.-4      	; 0x14ea <Lcd_Init+0x1ee>
    14ee:	9c 8f       	std	Y+28, r25	; 0x1c
    14f0:	8b 8f       	std	Y+27, r24	; 0x1b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14f2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    14f4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    14f6:	01 97       	sbiw	r24, 0x01	; 1
    14f8:	9e 8f       	std	Y+30, r25	; 0x1e
    14fa:	8d 8f       	std	Y+29, r24	; 0x1d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14fc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    14fe:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1500:	00 97       	sbiw	r24, 0x00	; 0
    1502:	69 f7       	brne	.-38     	; 0x14de <Lcd_Init+0x1e2>
    1504:	14 c0       	rjmp	.+40     	; 0x152e <Lcd_Init+0x232>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1506:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1508:	78 a1       	ldd	r23, Y+32	; 0x20
    150a:	89 a1       	ldd	r24, Y+33	; 0x21
    150c:	9a a1       	ldd	r25, Y+34	; 0x22
    150e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1512:	dc 01       	movw	r26, r24
    1514:	cb 01       	movw	r24, r22
    1516:	9e 8f       	std	Y+30, r25	; 0x1e
    1518:	8d 8f       	std	Y+29, r24	; 0x1d
    151a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    151c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    151e:	9a 8f       	std	Y+26, r25	; 0x1a
    1520:	89 8f       	std	Y+25, r24	; 0x19
    1522:	89 8d       	ldd	r24, Y+25	; 0x19
    1524:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1526:	01 97       	sbiw	r24, 0x01	; 1
    1528:	f1 f7       	brne	.-4      	; 0x1526 <Lcd_Init+0x22a>
    152a:	9a 8f       	std	Y+26, r25	; 0x1a
    152c:	89 8f       	std	Y+25, r24	; 0x19
	_delay_ms(5);
	Lcd_Cmd(3);
    152e:	83 e0       	ldi	r24, 0x03	; 3
    1530:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <Lcd_Cmd>
    1534:	80 e0       	ldi	r24, 0x00	; 0
    1536:	90 e0       	ldi	r25, 0x00	; 0
    1538:	a8 ec       	ldi	r26, 0xC8	; 200
    153a:	b2 e4       	ldi	r27, 0x42	; 66
    153c:	8d 8b       	std	Y+21, r24	; 0x15
    153e:	9e 8b       	std	Y+22, r25	; 0x16
    1540:	af 8b       	std	Y+23, r26	; 0x17
    1542:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1544:	6d 89       	ldd	r22, Y+21	; 0x15
    1546:	7e 89       	ldd	r23, Y+22	; 0x16
    1548:	8f 89       	ldd	r24, Y+23	; 0x17
    154a:	98 8d       	ldd	r25, Y+24	; 0x18
    154c:	2b ea       	ldi	r18, 0xAB	; 171
    154e:	3a ea       	ldi	r19, 0xAA	; 170
    1550:	4a ea       	ldi	r20, 0xAA	; 170
    1552:	50 e4       	ldi	r21, 0x40	; 64
    1554:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1558:	dc 01       	movw	r26, r24
    155a:	cb 01       	movw	r24, r22
    155c:	89 8b       	std	Y+17, r24	; 0x11
    155e:	9a 8b       	std	Y+18, r25	; 0x12
    1560:	ab 8b       	std	Y+19, r26	; 0x13
    1562:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1564:	69 89       	ldd	r22, Y+17	; 0x11
    1566:	7a 89       	ldd	r23, Y+18	; 0x12
    1568:	8b 89       	ldd	r24, Y+19	; 0x13
    156a:	9c 89       	ldd	r25, Y+20	; 0x14
    156c:	20 e0       	ldi	r18, 0x00	; 0
    156e:	30 e0       	ldi	r19, 0x00	; 0
    1570:	40 e8       	ldi	r20, 0x80	; 128
    1572:	5f e3       	ldi	r21, 0x3F	; 63
    1574:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1578:	88 23       	and	r24, r24
    157a:	1c f4       	brge	.+6      	; 0x1582 <Lcd_Init+0x286>
		__ticks = 1;
    157c:	81 e0       	ldi	r24, 0x01	; 1
    157e:	88 8b       	std	Y+16, r24	; 0x10
    1580:	91 c0       	rjmp	.+290    	; 0x16a4 <Lcd_Init+0x3a8>
	else if (__tmp > 255)
    1582:	69 89       	ldd	r22, Y+17	; 0x11
    1584:	7a 89       	ldd	r23, Y+18	; 0x12
    1586:	8b 89       	ldd	r24, Y+19	; 0x13
    1588:	9c 89       	ldd	r25, Y+20	; 0x14
    158a:	20 e0       	ldi	r18, 0x00	; 0
    158c:	30 e0       	ldi	r19, 0x00	; 0
    158e:	4f e7       	ldi	r20, 0x7F	; 127
    1590:	53 e4       	ldi	r21, 0x43	; 67
    1592:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1596:	18 16       	cp	r1, r24
    1598:	0c f0       	brlt	.+2      	; 0x159c <Lcd_Init+0x2a0>
    159a:	7b c0       	rjmp	.+246    	; 0x1692 <Lcd_Init+0x396>
	{
		_delay_ms(__us / 1000.0);
    159c:	6d 89       	ldd	r22, Y+21	; 0x15
    159e:	7e 89       	ldd	r23, Y+22	; 0x16
    15a0:	8f 89       	ldd	r24, Y+23	; 0x17
    15a2:	98 8d       	ldd	r25, Y+24	; 0x18
    15a4:	20 e0       	ldi	r18, 0x00	; 0
    15a6:	30 e0       	ldi	r19, 0x00	; 0
    15a8:	4a e7       	ldi	r20, 0x7A	; 122
    15aa:	54 e4       	ldi	r21, 0x44	; 68
    15ac:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    15b0:	dc 01       	movw	r26, r24
    15b2:	cb 01       	movw	r24, r22
    15b4:	8c 87       	std	Y+12, r24	; 0x0c
    15b6:	9d 87       	std	Y+13, r25	; 0x0d
    15b8:	ae 87       	std	Y+14, r26	; 0x0e
    15ba:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15bc:	6c 85       	ldd	r22, Y+12	; 0x0c
    15be:	7d 85       	ldd	r23, Y+13	; 0x0d
    15c0:	8e 85       	ldd	r24, Y+14	; 0x0e
    15c2:	9f 85       	ldd	r25, Y+15	; 0x0f
    15c4:	20 e0       	ldi	r18, 0x00	; 0
    15c6:	30 e0       	ldi	r19, 0x00	; 0
    15c8:	4a e7       	ldi	r20, 0x7A	; 122
    15ca:	55 e4       	ldi	r21, 0x45	; 69
    15cc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    15d0:	dc 01       	movw	r26, r24
    15d2:	cb 01       	movw	r24, r22
    15d4:	88 87       	std	Y+8, r24	; 0x08
    15d6:	99 87       	std	Y+9, r25	; 0x09
    15d8:	aa 87       	std	Y+10, r26	; 0x0a
    15da:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    15dc:	68 85       	ldd	r22, Y+8	; 0x08
    15de:	79 85       	ldd	r23, Y+9	; 0x09
    15e0:	8a 85       	ldd	r24, Y+10	; 0x0a
    15e2:	9b 85       	ldd	r25, Y+11	; 0x0b
    15e4:	20 e0       	ldi	r18, 0x00	; 0
    15e6:	30 e0       	ldi	r19, 0x00	; 0
    15e8:	40 e8       	ldi	r20, 0x80	; 128
    15ea:	5f e3       	ldi	r21, 0x3F	; 63
    15ec:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    15f0:	88 23       	and	r24, r24
    15f2:	2c f4       	brge	.+10     	; 0x15fe <Lcd_Init+0x302>
		__ticks = 1;
    15f4:	81 e0       	ldi	r24, 0x01	; 1
    15f6:	90 e0       	ldi	r25, 0x00	; 0
    15f8:	9f 83       	std	Y+7, r25	; 0x07
    15fa:	8e 83       	std	Y+6, r24	; 0x06
    15fc:	3f c0       	rjmp	.+126    	; 0x167c <Lcd_Init+0x380>
	else if (__tmp > 65535)
    15fe:	68 85       	ldd	r22, Y+8	; 0x08
    1600:	79 85       	ldd	r23, Y+9	; 0x09
    1602:	8a 85       	ldd	r24, Y+10	; 0x0a
    1604:	9b 85       	ldd	r25, Y+11	; 0x0b
    1606:	20 e0       	ldi	r18, 0x00	; 0
    1608:	3f ef       	ldi	r19, 0xFF	; 255
    160a:	4f e7       	ldi	r20, 0x7F	; 127
    160c:	57 e4       	ldi	r21, 0x47	; 71
    160e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1612:	18 16       	cp	r1, r24
    1614:	4c f5       	brge	.+82     	; 0x1668 <Lcd_Init+0x36c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1616:	6c 85       	ldd	r22, Y+12	; 0x0c
    1618:	7d 85       	ldd	r23, Y+13	; 0x0d
    161a:	8e 85       	ldd	r24, Y+14	; 0x0e
    161c:	9f 85       	ldd	r25, Y+15	; 0x0f
    161e:	20 e0       	ldi	r18, 0x00	; 0
    1620:	30 e0       	ldi	r19, 0x00	; 0
    1622:	40 e2       	ldi	r20, 0x20	; 32
    1624:	51 e4       	ldi	r21, 0x41	; 65
    1626:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    162a:	dc 01       	movw	r26, r24
    162c:	cb 01       	movw	r24, r22
    162e:	bc 01       	movw	r22, r24
    1630:	cd 01       	movw	r24, r26
    1632:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1636:	dc 01       	movw	r26, r24
    1638:	cb 01       	movw	r24, r22
    163a:	9f 83       	std	Y+7, r25	; 0x07
    163c:	8e 83       	std	Y+6, r24	; 0x06
    163e:	0f c0       	rjmp	.+30     	; 0x165e <Lcd_Init+0x362>
    1640:	80 e9       	ldi	r24, 0x90	; 144
    1642:	91 e0       	ldi	r25, 0x01	; 1
    1644:	9d 83       	std	Y+5, r25	; 0x05
    1646:	8c 83       	std	Y+4, r24	; 0x04
    1648:	8c 81       	ldd	r24, Y+4	; 0x04
    164a:	9d 81       	ldd	r25, Y+5	; 0x05
    164c:	01 97       	sbiw	r24, 0x01	; 1
    164e:	f1 f7       	brne	.-4      	; 0x164c <Lcd_Init+0x350>
    1650:	9d 83       	std	Y+5, r25	; 0x05
    1652:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1654:	8e 81       	ldd	r24, Y+6	; 0x06
    1656:	9f 81       	ldd	r25, Y+7	; 0x07
    1658:	01 97       	sbiw	r24, 0x01	; 1
    165a:	9f 83       	std	Y+7, r25	; 0x07
    165c:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    165e:	8e 81       	ldd	r24, Y+6	; 0x06
    1660:	9f 81       	ldd	r25, Y+7	; 0x07
    1662:	00 97       	sbiw	r24, 0x00	; 0
    1664:	69 f7       	brne	.-38     	; 0x1640 <Lcd_Init+0x344>
    1666:	24 c0       	rjmp	.+72     	; 0x16b0 <Lcd_Init+0x3b4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1668:	68 85       	ldd	r22, Y+8	; 0x08
    166a:	79 85       	ldd	r23, Y+9	; 0x09
    166c:	8a 85       	ldd	r24, Y+10	; 0x0a
    166e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1670:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1674:	dc 01       	movw	r26, r24
    1676:	cb 01       	movw	r24, r22
    1678:	9f 83       	std	Y+7, r25	; 0x07
    167a:	8e 83       	std	Y+6, r24	; 0x06
    167c:	8e 81       	ldd	r24, Y+6	; 0x06
    167e:	9f 81       	ldd	r25, Y+7	; 0x07
    1680:	9b 83       	std	Y+3, r25	; 0x03
    1682:	8a 83       	std	Y+2, r24	; 0x02
    1684:	8a 81       	ldd	r24, Y+2	; 0x02
    1686:	9b 81       	ldd	r25, Y+3	; 0x03
    1688:	01 97       	sbiw	r24, 0x01	; 1
    168a:	f1 f7       	brne	.-4      	; 0x1688 <Lcd_Init+0x38c>
    168c:	9b 83       	std	Y+3, r25	; 0x03
    168e:	8a 83       	std	Y+2, r24	; 0x02
    1690:	0f c0       	rjmp	.+30     	; 0x16b0 <Lcd_Init+0x3b4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1692:	69 89       	ldd	r22, Y+17	; 0x11
    1694:	7a 89       	ldd	r23, Y+18	; 0x12
    1696:	8b 89       	ldd	r24, Y+19	; 0x13
    1698:	9c 89       	ldd	r25, Y+20	; 0x14
    169a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    169e:	dc 01       	movw	r26, r24
    16a0:	cb 01       	movw	r24, r22
    16a2:	88 8b       	std	Y+16, r24	; 0x10
    16a4:	88 89       	ldd	r24, Y+16	; 0x10
    16a6:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    16a8:	89 81       	ldd	r24, Y+1	; 0x01
    16aa:	8a 95       	dec	r24
    16ac:	f1 f7       	brne	.-4      	; 0x16aa <Lcd_Init+0x3ae>
    16ae:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(100);
	Lcd_Cmd(3);
    16b0:	83 e0       	ldi	r24, 0x03	; 3
    16b2:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <Lcd_Cmd>
	Lcd_Cmd(2);
    16b6:	82 e0       	ldi	r24, 0x02	; 2
    16b8:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <Lcd_Cmd>
	Lcd_Cmd(_LCD_4BIT_MODE);
    16bc:	88 e2       	ldi	r24, 0x28	; 40
    16be:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <Lcd_Cmd>
	Lcd_WriteCustom();
    16c2:	0e 94 41 09 	call	0x1282	; 0x1282 <Lcd_WriteCustom>
	Lcd_Goto_Row_Column(0,0);
    16c6:	80 e0       	ldi	r24, 0x00	; 0
    16c8:	60 e0       	ldi	r22, 0x00	; 0
    16ca:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <Lcd_Goto_Row_Column>
	Lcd_Cmd(_LCD_CURSOR_OFF);
    16ce:	8c e0       	ldi	r24, 0x0C	; 12
    16d0:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <Lcd_Cmd>
}
    16d4:	e4 96       	adiw	r28, 0x34	; 52
    16d6:	0f b6       	in	r0, 0x3f	; 63
    16d8:	f8 94       	cli
    16da:	de bf       	out	0x3e, r29	; 62
    16dc:	0f be       	out	0x3f, r0	; 63
    16de:	cd bf       	out	0x3d, r28	; 61
    16e0:	cf 91       	pop	r28
    16e2:	df 91       	pop	r29
    16e4:	08 95       	ret

000016e6 <Enable_Pulse>:
static void Enable_Pulse(void)
{
    16e6:	df 93       	push	r29
    16e8:	cf 93       	push	r28
    16ea:	cd b7       	in	r28, 0x3d	; 61
    16ec:	de b7       	in	r29, 0x3e	; 62
    16ee:	a6 97       	sbiw	r28, 0x26	; 38
    16f0:	0f b6       	in	r0, 0x3f	; 63
    16f2:	f8 94       	cli
    16f4:	de bf       	out	0x3e, r29	; 62
    16f6:	0f be       	out	0x3f, r0	; 63
    16f8:	cd bf       	out	0x3d, r28	; 61
	Dio_WriteChannel(DIO_PORTB, DIO_PIN3, STD_HIGH);
    16fa:	81 e0       	ldi	r24, 0x01	; 1
    16fc:	63 e0       	ldi	r22, 0x03	; 3
    16fe:	41 e0       	ldi	r20, 0x01	; 1
    1700:	0e 94 54 10 	call	0x20a8	; 0x20a8 <Dio_WriteChannel>
    1704:	80 e0       	ldi	r24, 0x00	; 0
    1706:	90 e0       	ldi	r25, 0x00	; 0
    1708:	a0 e8       	ldi	r26, 0x80	; 128
    170a:	bf e3       	ldi	r27, 0x3F	; 63
    170c:	8b a3       	std	Y+35, r24	; 0x23
    170e:	9c a3       	std	Y+36, r25	; 0x24
    1710:	ad a3       	std	Y+37, r26	; 0x25
    1712:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1714:	6b a1       	ldd	r22, Y+35	; 0x23
    1716:	7c a1       	ldd	r23, Y+36	; 0x24
    1718:	8d a1       	ldd	r24, Y+37	; 0x25
    171a:	9e a1       	ldd	r25, Y+38	; 0x26
    171c:	2b ea       	ldi	r18, 0xAB	; 171
    171e:	3a ea       	ldi	r19, 0xAA	; 170
    1720:	4a ea       	ldi	r20, 0xAA	; 170
    1722:	50 e4       	ldi	r21, 0x40	; 64
    1724:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1728:	dc 01       	movw	r26, r24
    172a:	cb 01       	movw	r24, r22
    172c:	8f 8f       	std	Y+31, r24	; 0x1f
    172e:	98 a3       	std	Y+32, r25	; 0x20
    1730:	a9 a3       	std	Y+33, r26	; 0x21
    1732:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    1734:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1736:	78 a1       	ldd	r23, Y+32	; 0x20
    1738:	89 a1       	ldd	r24, Y+33	; 0x21
    173a:	9a a1       	ldd	r25, Y+34	; 0x22
    173c:	20 e0       	ldi	r18, 0x00	; 0
    173e:	30 e0       	ldi	r19, 0x00	; 0
    1740:	40 e8       	ldi	r20, 0x80	; 128
    1742:	5f e3       	ldi	r21, 0x3F	; 63
    1744:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1748:	88 23       	and	r24, r24
    174a:	1c f4       	brge	.+6      	; 0x1752 <Enable_Pulse+0x6c>
		__ticks = 1;
    174c:	81 e0       	ldi	r24, 0x01	; 1
    174e:	8e 8f       	std	Y+30, r24	; 0x1e
    1750:	91 c0       	rjmp	.+290    	; 0x1874 <Enable_Pulse+0x18e>
	else if (__tmp > 255)
    1752:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1754:	78 a1       	ldd	r23, Y+32	; 0x20
    1756:	89 a1       	ldd	r24, Y+33	; 0x21
    1758:	9a a1       	ldd	r25, Y+34	; 0x22
    175a:	20 e0       	ldi	r18, 0x00	; 0
    175c:	30 e0       	ldi	r19, 0x00	; 0
    175e:	4f e7       	ldi	r20, 0x7F	; 127
    1760:	53 e4       	ldi	r21, 0x43	; 67
    1762:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1766:	18 16       	cp	r1, r24
    1768:	0c f0       	brlt	.+2      	; 0x176c <Enable_Pulse+0x86>
    176a:	7b c0       	rjmp	.+246    	; 0x1862 <Enable_Pulse+0x17c>
	{
		_delay_ms(__us / 1000.0);
    176c:	6b a1       	ldd	r22, Y+35	; 0x23
    176e:	7c a1       	ldd	r23, Y+36	; 0x24
    1770:	8d a1       	ldd	r24, Y+37	; 0x25
    1772:	9e a1       	ldd	r25, Y+38	; 0x26
    1774:	20 e0       	ldi	r18, 0x00	; 0
    1776:	30 e0       	ldi	r19, 0x00	; 0
    1778:	4a e7       	ldi	r20, 0x7A	; 122
    177a:	54 e4       	ldi	r21, 0x44	; 68
    177c:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1780:	dc 01       	movw	r26, r24
    1782:	cb 01       	movw	r24, r22
    1784:	8a 8f       	std	Y+26, r24	; 0x1a
    1786:	9b 8f       	std	Y+27, r25	; 0x1b
    1788:	ac 8f       	std	Y+28, r26	; 0x1c
    178a:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    178c:	6a 8d       	ldd	r22, Y+26	; 0x1a
    178e:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1790:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1792:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1794:	20 e0       	ldi	r18, 0x00	; 0
    1796:	30 e0       	ldi	r19, 0x00	; 0
    1798:	4a e7       	ldi	r20, 0x7A	; 122
    179a:	55 e4       	ldi	r21, 0x45	; 69
    179c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17a0:	dc 01       	movw	r26, r24
    17a2:	cb 01       	movw	r24, r22
    17a4:	8e 8b       	std	Y+22, r24	; 0x16
    17a6:	9f 8b       	std	Y+23, r25	; 0x17
    17a8:	a8 8f       	std	Y+24, r26	; 0x18
    17aa:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    17ac:	6e 89       	ldd	r22, Y+22	; 0x16
    17ae:	7f 89       	ldd	r23, Y+23	; 0x17
    17b0:	88 8d       	ldd	r24, Y+24	; 0x18
    17b2:	99 8d       	ldd	r25, Y+25	; 0x19
    17b4:	20 e0       	ldi	r18, 0x00	; 0
    17b6:	30 e0       	ldi	r19, 0x00	; 0
    17b8:	40 e8       	ldi	r20, 0x80	; 128
    17ba:	5f e3       	ldi	r21, 0x3F	; 63
    17bc:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    17c0:	88 23       	and	r24, r24
    17c2:	2c f4       	brge	.+10     	; 0x17ce <Enable_Pulse+0xe8>
		__ticks = 1;
    17c4:	81 e0       	ldi	r24, 0x01	; 1
    17c6:	90 e0       	ldi	r25, 0x00	; 0
    17c8:	9d 8b       	std	Y+21, r25	; 0x15
    17ca:	8c 8b       	std	Y+20, r24	; 0x14
    17cc:	3f c0       	rjmp	.+126    	; 0x184c <Enable_Pulse+0x166>
	else if (__tmp > 65535)
    17ce:	6e 89       	ldd	r22, Y+22	; 0x16
    17d0:	7f 89       	ldd	r23, Y+23	; 0x17
    17d2:	88 8d       	ldd	r24, Y+24	; 0x18
    17d4:	99 8d       	ldd	r25, Y+25	; 0x19
    17d6:	20 e0       	ldi	r18, 0x00	; 0
    17d8:	3f ef       	ldi	r19, 0xFF	; 255
    17da:	4f e7       	ldi	r20, 0x7F	; 127
    17dc:	57 e4       	ldi	r21, 0x47	; 71
    17de:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    17e2:	18 16       	cp	r1, r24
    17e4:	4c f5       	brge	.+82     	; 0x1838 <Enable_Pulse+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17e6:	6a 8d       	ldd	r22, Y+26	; 0x1a
    17e8:	7b 8d       	ldd	r23, Y+27	; 0x1b
    17ea:	8c 8d       	ldd	r24, Y+28	; 0x1c
    17ec:	9d 8d       	ldd	r25, Y+29	; 0x1d
    17ee:	20 e0       	ldi	r18, 0x00	; 0
    17f0:	30 e0       	ldi	r19, 0x00	; 0
    17f2:	40 e2       	ldi	r20, 0x20	; 32
    17f4:	51 e4       	ldi	r21, 0x41	; 65
    17f6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17fa:	dc 01       	movw	r26, r24
    17fc:	cb 01       	movw	r24, r22
    17fe:	bc 01       	movw	r22, r24
    1800:	cd 01       	movw	r24, r26
    1802:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1806:	dc 01       	movw	r26, r24
    1808:	cb 01       	movw	r24, r22
    180a:	9d 8b       	std	Y+21, r25	; 0x15
    180c:	8c 8b       	std	Y+20, r24	; 0x14
    180e:	0f c0       	rjmp	.+30     	; 0x182e <Enable_Pulse+0x148>
    1810:	80 e9       	ldi	r24, 0x90	; 144
    1812:	91 e0       	ldi	r25, 0x01	; 1
    1814:	9b 8b       	std	Y+19, r25	; 0x13
    1816:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1818:	8a 89       	ldd	r24, Y+18	; 0x12
    181a:	9b 89       	ldd	r25, Y+19	; 0x13
    181c:	01 97       	sbiw	r24, 0x01	; 1
    181e:	f1 f7       	brne	.-4      	; 0x181c <Enable_Pulse+0x136>
    1820:	9b 8b       	std	Y+19, r25	; 0x13
    1822:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1824:	8c 89       	ldd	r24, Y+20	; 0x14
    1826:	9d 89       	ldd	r25, Y+21	; 0x15
    1828:	01 97       	sbiw	r24, 0x01	; 1
    182a:	9d 8b       	std	Y+21, r25	; 0x15
    182c:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    182e:	8c 89       	ldd	r24, Y+20	; 0x14
    1830:	9d 89       	ldd	r25, Y+21	; 0x15
    1832:	00 97       	sbiw	r24, 0x00	; 0
    1834:	69 f7       	brne	.-38     	; 0x1810 <Enable_Pulse+0x12a>
    1836:	24 c0       	rjmp	.+72     	; 0x1880 <Enable_Pulse+0x19a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1838:	6e 89       	ldd	r22, Y+22	; 0x16
    183a:	7f 89       	ldd	r23, Y+23	; 0x17
    183c:	88 8d       	ldd	r24, Y+24	; 0x18
    183e:	99 8d       	ldd	r25, Y+25	; 0x19
    1840:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1844:	dc 01       	movw	r26, r24
    1846:	cb 01       	movw	r24, r22
    1848:	9d 8b       	std	Y+21, r25	; 0x15
    184a:	8c 8b       	std	Y+20, r24	; 0x14
    184c:	8c 89       	ldd	r24, Y+20	; 0x14
    184e:	9d 89       	ldd	r25, Y+21	; 0x15
    1850:	99 8b       	std	Y+17, r25	; 0x11
    1852:	88 8b       	std	Y+16, r24	; 0x10
    1854:	88 89       	ldd	r24, Y+16	; 0x10
    1856:	99 89       	ldd	r25, Y+17	; 0x11
    1858:	01 97       	sbiw	r24, 0x01	; 1
    185a:	f1 f7       	brne	.-4      	; 0x1858 <Enable_Pulse+0x172>
    185c:	99 8b       	std	Y+17, r25	; 0x11
    185e:	88 8b       	std	Y+16, r24	; 0x10
    1860:	0f c0       	rjmp	.+30     	; 0x1880 <Enable_Pulse+0x19a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1862:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1864:	78 a1       	ldd	r23, Y+32	; 0x20
    1866:	89 a1       	ldd	r24, Y+33	; 0x21
    1868:	9a a1       	ldd	r25, Y+34	; 0x22
    186a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    186e:	dc 01       	movw	r26, r24
    1870:	cb 01       	movw	r24, r22
    1872:	8e 8f       	std	Y+30, r24	; 0x1e
    1874:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1876:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1878:	8f 85       	ldd	r24, Y+15	; 0x0f
    187a:	8a 95       	dec	r24
    187c:	f1 f7       	brne	.-4      	; 0x187a <Enable_Pulse+0x194>
    187e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(1);
	Dio_WriteChannel(DIO_PORTB, DIO_PIN3, STD_LOW);
    1880:	81 e0       	ldi	r24, 0x01	; 1
    1882:	63 e0       	ldi	r22, 0x03	; 3
    1884:	40 e0       	ldi	r20, 0x00	; 0
    1886:	0e 94 54 10 	call	0x20a8	; 0x20a8 <Dio_WriteChannel>
    188a:	80 e0       	ldi	r24, 0x00	; 0
    188c:	90 e0       	ldi	r25, 0x00	; 0
    188e:	a0 e0       	ldi	r26, 0x00	; 0
    1890:	b0 e4       	ldi	r27, 0x40	; 64
    1892:	8b 87       	std	Y+11, r24	; 0x0b
    1894:	9c 87       	std	Y+12, r25	; 0x0c
    1896:	ad 87       	std	Y+13, r26	; 0x0d
    1898:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    189a:	6b 85       	ldd	r22, Y+11	; 0x0b
    189c:	7c 85       	ldd	r23, Y+12	; 0x0c
    189e:	8d 85       	ldd	r24, Y+13	; 0x0d
    18a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    18a2:	20 e0       	ldi	r18, 0x00	; 0
    18a4:	30 e0       	ldi	r19, 0x00	; 0
    18a6:	4a e7       	ldi	r20, 0x7A	; 122
    18a8:	55 e4       	ldi	r21, 0x45	; 69
    18aa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18ae:	dc 01       	movw	r26, r24
    18b0:	cb 01       	movw	r24, r22
    18b2:	8f 83       	std	Y+7, r24	; 0x07
    18b4:	98 87       	std	Y+8, r25	; 0x08
    18b6:	a9 87       	std	Y+9, r26	; 0x09
    18b8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    18ba:	6f 81       	ldd	r22, Y+7	; 0x07
    18bc:	78 85       	ldd	r23, Y+8	; 0x08
    18be:	89 85       	ldd	r24, Y+9	; 0x09
    18c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    18c2:	20 e0       	ldi	r18, 0x00	; 0
    18c4:	30 e0       	ldi	r19, 0x00	; 0
    18c6:	40 e8       	ldi	r20, 0x80	; 128
    18c8:	5f e3       	ldi	r21, 0x3F	; 63
    18ca:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    18ce:	88 23       	and	r24, r24
    18d0:	2c f4       	brge	.+10     	; 0x18dc <Enable_Pulse+0x1f6>
		__ticks = 1;
    18d2:	81 e0       	ldi	r24, 0x01	; 1
    18d4:	90 e0       	ldi	r25, 0x00	; 0
    18d6:	9e 83       	std	Y+6, r25	; 0x06
    18d8:	8d 83       	std	Y+5, r24	; 0x05
    18da:	3f c0       	rjmp	.+126    	; 0x195a <Enable_Pulse+0x274>
	else if (__tmp > 65535)
    18dc:	6f 81       	ldd	r22, Y+7	; 0x07
    18de:	78 85       	ldd	r23, Y+8	; 0x08
    18e0:	89 85       	ldd	r24, Y+9	; 0x09
    18e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    18e4:	20 e0       	ldi	r18, 0x00	; 0
    18e6:	3f ef       	ldi	r19, 0xFF	; 255
    18e8:	4f e7       	ldi	r20, 0x7F	; 127
    18ea:	57 e4       	ldi	r21, 0x47	; 71
    18ec:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    18f0:	18 16       	cp	r1, r24
    18f2:	4c f5       	brge	.+82     	; 0x1946 <Enable_Pulse+0x260>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18f4:	6b 85       	ldd	r22, Y+11	; 0x0b
    18f6:	7c 85       	ldd	r23, Y+12	; 0x0c
    18f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    18fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    18fc:	20 e0       	ldi	r18, 0x00	; 0
    18fe:	30 e0       	ldi	r19, 0x00	; 0
    1900:	40 e2       	ldi	r20, 0x20	; 32
    1902:	51 e4       	ldi	r21, 0x41	; 65
    1904:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1908:	dc 01       	movw	r26, r24
    190a:	cb 01       	movw	r24, r22
    190c:	bc 01       	movw	r22, r24
    190e:	cd 01       	movw	r24, r26
    1910:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1914:	dc 01       	movw	r26, r24
    1916:	cb 01       	movw	r24, r22
    1918:	9e 83       	std	Y+6, r25	; 0x06
    191a:	8d 83       	std	Y+5, r24	; 0x05
    191c:	0f c0       	rjmp	.+30     	; 0x193c <Enable_Pulse+0x256>
    191e:	80 e9       	ldi	r24, 0x90	; 144
    1920:	91 e0       	ldi	r25, 0x01	; 1
    1922:	9c 83       	std	Y+4, r25	; 0x04
    1924:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1926:	8b 81       	ldd	r24, Y+3	; 0x03
    1928:	9c 81       	ldd	r25, Y+4	; 0x04
    192a:	01 97       	sbiw	r24, 0x01	; 1
    192c:	f1 f7       	brne	.-4      	; 0x192a <Enable_Pulse+0x244>
    192e:	9c 83       	std	Y+4, r25	; 0x04
    1930:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1932:	8d 81       	ldd	r24, Y+5	; 0x05
    1934:	9e 81       	ldd	r25, Y+6	; 0x06
    1936:	01 97       	sbiw	r24, 0x01	; 1
    1938:	9e 83       	std	Y+6, r25	; 0x06
    193a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    193c:	8d 81       	ldd	r24, Y+5	; 0x05
    193e:	9e 81       	ldd	r25, Y+6	; 0x06
    1940:	00 97       	sbiw	r24, 0x00	; 0
    1942:	69 f7       	brne	.-38     	; 0x191e <Enable_Pulse+0x238>
    1944:	14 c0       	rjmp	.+40     	; 0x196e <Enable_Pulse+0x288>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1946:	6f 81       	ldd	r22, Y+7	; 0x07
    1948:	78 85       	ldd	r23, Y+8	; 0x08
    194a:	89 85       	ldd	r24, Y+9	; 0x09
    194c:	9a 85       	ldd	r25, Y+10	; 0x0a
    194e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1952:	dc 01       	movw	r26, r24
    1954:	cb 01       	movw	r24, r22
    1956:	9e 83       	std	Y+6, r25	; 0x06
    1958:	8d 83       	std	Y+5, r24	; 0x05
    195a:	8d 81       	ldd	r24, Y+5	; 0x05
    195c:	9e 81       	ldd	r25, Y+6	; 0x06
    195e:	9a 83       	std	Y+2, r25	; 0x02
    1960:	89 83       	std	Y+1, r24	; 0x01
    1962:	89 81       	ldd	r24, Y+1	; 0x01
    1964:	9a 81       	ldd	r25, Y+2	; 0x02
    1966:	01 97       	sbiw	r24, 0x01	; 1
    1968:	f1 f7       	brne	.-4      	; 0x1966 <Enable_Pulse+0x280>
    196a:	9a 83       	std	Y+2, r25	; 0x02
    196c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    196e:	a6 96       	adiw	r28, 0x26	; 38
    1970:	0f b6       	in	r0, 0x3f	; 63
    1972:	f8 94       	cli
    1974:	de bf       	out	0x3e, r29	; 62
    1976:	0f be       	out	0x3f, r0	; 63
    1978:	cd bf       	out	0x3d, r28	; 61
    197a:	cf 91       	pop	r28
    197c:	df 91       	pop	r29
    197e:	08 95       	ret

00001980 <Lcd_Data>:

static void Lcd_Data(u8 data) /*	RS-> 1	*/
{
    1980:	df 93       	push	r29
    1982:	cf 93       	push	r28
    1984:	00 d0       	rcall	.+0      	; 0x1986 <Lcd_Data+0x6>
    1986:	0f 92       	push	r0
    1988:	cd b7       	in	r28, 0x3d	; 61
    198a:	de b7       	in	r29, 0x3e	; 62
    198c:	8b 83       	std	Y+3, r24	; 0x03
	u8 High_Nibble = data;    /*	MSB	*/
    198e:	8b 81       	ldd	r24, Y+3	; 0x03
    1990:	8a 83       	std	Y+2, r24	; 0x02
	u8 Low_Nibble = data<<4;		/*	LSB	*/
    1992:	8b 81       	ldd	r24, Y+3	; 0x03
    1994:	82 95       	swap	r24
    1996:	80 7f       	andi	r24, 0xF0	; 240
    1998:	89 83       	std	Y+1, r24	; 0x01
	Dio_WriteChannel(DIO_PORTB, DIO_PIN1, STD_HIGH);   /* Data Mode */
    199a:	81 e0       	ldi	r24, 0x01	; 1
    199c:	61 e0       	ldi	r22, 0x01	; 1
    199e:	41 e0       	ldi	r20, 0x01	; 1
    19a0:	0e 94 54 10 	call	0x20a8	; 0x20a8 <Dio_WriteChannel>
	Dio_WriteGroup(DIO_PORTA,LCD_MASK,High_Nibble);
    19a4:	80 e0       	ldi	r24, 0x00	; 0
    19a6:	60 ef       	ldi	r22, 0xF0	; 240
    19a8:	4a 81       	ldd	r20, Y+2	; 0x02
    19aa:	0e 94 37 11 	call	0x226e	; 0x226e <Dio_WriteGroup>
	Enable_Pulse();
    19ae:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <Enable_Pulse>

	Dio_WriteGroup(DIO_PORTA,LCD_MASK,Low_Nibble);
    19b2:	80 e0       	ldi	r24, 0x00	; 0
    19b4:	60 ef       	ldi	r22, 0xF0	; 240
    19b6:	49 81       	ldd	r20, Y+1	; 0x01
    19b8:	0e 94 37 11 	call	0x226e	; 0x226e <Dio_WriteGroup>
	Enable_Pulse();
    19bc:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <Enable_Pulse>
}
    19c0:	0f 90       	pop	r0
    19c2:	0f 90       	pop	r0
    19c4:	0f 90       	pop	r0
    19c6:	cf 91       	pop	r28
    19c8:	df 91       	pop	r29
    19ca:	08 95       	ret

000019cc <Lcd_Cmd>:

void Lcd_Cmd(lcd_Cmd_Type cmd)/*	RS-> 0	*/
{
    19cc:	df 93       	push	r29
    19ce:	cf 93       	push	r28
    19d0:	00 d0       	rcall	.+0      	; 0x19d2 <Lcd_Cmd+0x6>
    19d2:	0f 92       	push	r0
    19d4:	cd b7       	in	r28, 0x3d	; 61
    19d6:	de b7       	in	r29, 0x3e	; 62
    19d8:	8b 83       	std	Y+3, r24	; 0x03
	u8 High_Nibble = cmd;    /*	MSB	*/
    19da:	8b 81       	ldd	r24, Y+3	; 0x03
    19dc:	8a 83       	std	Y+2, r24	; 0x02
	u8 Low_Nibble = cmd<<4;		/*	LSB	*/
    19de:	8b 81       	ldd	r24, Y+3	; 0x03
    19e0:	82 95       	swap	r24
    19e2:	80 7f       	andi	r24, 0xF0	; 240
    19e4:	89 83       	std	Y+1, r24	; 0x01
	Dio_WriteChannel(DIO_PORTB, DIO_PIN1, STD_LOW);   /* Command Mode */
    19e6:	81 e0       	ldi	r24, 0x01	; 1
    19e8:	61 e0       	ldi	r22, 0x01	; 1
    19ea:	40 e0       	ldi	r20, 0x00	; 0
    19ec:	0e 94 54 10 	call	0x20a8	; 0x20a8 <Dio_WriteChannel>
	Dio_WriteGroup(DIO_PORTA,LCD_MASK,High_Nibble);
    19f0:	80 e0       	ldi	r24, 0x00	; 0
    19f2:	60 ef       	ldi	r22, 0xF0	; 240
    19f4:	4a 81       	ldd	r20, Y+2	; 0x02
    19f6:	0e 94 37 11 	call	0x226e	; 0x226e <Dio_WriteGroup>
	Enable_Pulse();
    19fa:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <Enable_Pulse>

	Dio_WriteGroup(DIO_PORTA,LCD_MASK,Low_Nibble);
    19fe:	80 e0       	ldi	r24, 0x00	; 0
    1a00:	60 ef       	ldi	r22, 0xF0	; 240
    1a02:	49 81       	ldd	r20, Y+1	; 0x01
    1a04:	0e 94 37 11 	call	0x226e	; 0x226e <Dio_WriteGroup>
	Enable_Pulse();
    1a08:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <Enable_Pulse>
}
    1a0c:	0f 90       	pop	r0
    1a0e:	0f 90       	pop	r0
    1a10:	0f 90       	pop	r0
    1a12:	cf 91       	pop	r28
    1a14:	df 91       	pop	r29
    1a16:	08 95       	ret

00001a18 <Lcd_DisplayChr>:

void Lcd_DisplayChr(u8 chr)
{
    1a18:	df 93       	push	r29
    1a1a:	cf 93       	push	r28
    1a1c:	0f 92       	push	r0
    1a1e:	cd b7       	in	r28, 0x3d	; 61
    1a20:	de b7       	in	r29, 0x3e	; 62
    1a22:	89 83       	std	Y+1, r24	; 0x01
	Lcd_Data(chr);
    1a24:	89 81       	ldd	r24, Y+1	; 0x01
    1a26:	0e 94 c0 0c 	call	0x1980	; 0x1980 <Lcd_Data>
}
    1a2a:	0f 90       	pop	r0
    1a2c:	cf 91       	pop	r28
    1a2e:	df 91       	pop	r29
    1a30:	08 95       	ret

00001a32 <Lcd_DisplayStr>:

void Lcd_DisplayStr(u8* str)
{
    1a32:	df 93       	push	r29
    1a34:	cf 93       	push	r28
    1a36:	00 d0       	rcall	.+0      	; 0x1a38 <Lcd_DisplayStr+0x6>
    1a38:	cd b7       	in	r28, 0x3d	; 61
    1a3a:	de b7       	in	r29, 0x3e	; 62
    1a3c:	9a 83       	std	Y+2, r25	; 0x02
    1a3e:	89 83       	std	Y+1, r24	; 0x01
    1a40:	0a c0       	rjmp	.+20     	; 0x1a56 <Lcd_DisplayStr+0x24>
	while (*str != '\0')
	{
		Lcd_DisplayChr(*str);
    1a42:	e9 81       	ldd	r30, Y+1	; 0x01
    1a44:	fa 81       	ldd	r31, Y+2	; 0x02
    1a46:	80 81       	ld	r24, Z
    1a48:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <Lcd_DisplayChr>
		str++;
    1a4c:	89 81       	ldd	r24, Y+1	; 0x01
    1a4e:	9a 81       	ldd	r25, Y+2	; 0x02
    1a50:	01 96       	adiw	r24, 0x01	; 1
    1a52:	9a 83       	std	Y+2, r25	; 0x02
    1a54:	89 83       	std	Y+1, r24	; 0x01
	Lcd_Data(chr);
}

void Lcd_DisplayStr(u8* str)
{
	while (*str != '\0')
    1a56:	e9 81       	ldd	r30, Y+1	; 0x01
    1a58:	fa 81       	ldd	r31, Y+2	; 0x02
    1a5a:	80 81       	ld	r24, Z
    1a5c:	88 23       	and	r24, r24
    1a5e:	89 f7       	brne	.-30     	; 0x1a42 <Lcd_DisplayStr+0x10>
	{
		Lcd_DisplayChr(*str);
		str++;
	}
}
    1a60:	0f 90       	pop	r0
    1a62:	0f 90       	pop	r0
    1a64:	cf 91       	pop	r28
    1a66:	df 91       	pop	r29
    1a68:	08 95       	ret

00001a6a <Lcd_Goto_Row_Column>:

void Lcd_Goto_Row_Column(u8 row, u8 col)
{
    1a6a:	df 93       	push	r29
    1a6c:	cf 93       	push	r28
    1a6e:	00 d0       	rcall	.+0      	; 0x1a70 <Lcd_Goto_Row_Column+0x6>
    1a70:	00 d0       	rcall	.+0      	; 0x1a72 <Lcd_Goto_Row_Column+0x8>
    1a72:	cd b7       	in	r28, 0x3d	; 61
    1a74:	de b7       	in	r29, 0x3e	; 62
    1a76:	89 83       	std	Y+1, r24	; 0x01
    1a78:	6a 83       	std	Y+2, r22	; 0x02
	switch (row)
    1a7a:	89 81       	ldd	r24, Y+1	; 0x01
    1a7c:	28 2f       	mov	r18, r24
    1a7e:	30 e0       	ldi	r19, 0x00	; 0
    1a80:	3c 83       	std	Y+4, r19	; 0x04
    1a82:	2b 83       	std	Y+3, r18	; 0x03
    1a84:	8b 81       	ldd	r24, Y+3	; 0x03
    1a86:	9c 81       	ldd	r25, Y+4	; 0x04
    1a88:	00 97       	sbiw	r24, 0x00	; 0
    1a8a:	31 f0       	breq	.+12     	; 0x1a98 <Lcd_Goto_Row_Column+0x2e>
    1a8c:	2b 81       	ldd	r18, Y+3	; 0x03
    1a8e:	3c 81       	ldd	r19, Y+4	; 0x04
    1a90:	21 30       	cpi	r18, 0x01	; 1
    1a92:	31 05       	cpc	r19, r1
    1a94:	31 f0       	breq	.+12     	; 0x1aa2 <Lcd_Goto_Row_Column+0x38>
    1a96:	09 c0       	rjmp	.+18     	; 0x1aaa <Lcd_Goto_Row_Column+0x40>
	{
	case 0:
		Lcd_Cmd(0x80+col);
    1a98:	8a 81       	ldd	r24, Y+2	; 0x02
    1a9a:	80 58       	subi	r24, 0x80	; 128
    1a9c:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <Lcd_Cmd>
    1aa0:	04 c0       	rjmp	.+8      	; 0x1aaa <Lcd_Goto_Row_Column+0x40>
		break;

	case 1:
		Lcd_Cmd(0xC0+col);
    1aa2:	8a 81       	ldd	r24, Y+2	; 0x02
    1aa4:	80 54       	subi	r24, 0x40	; 64
    1aa6:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <Lcd_Cmd>
		break;
	}
}
    1aaa:	0f 90       	pop	r0
    1aac:	0f 90       	pop	r0
    1aae:	0f 90       	pop	r0
    1ab0:	0f 90       	pop	r0
    1ab2:	cf 91       	pop	r28
    1ab4:	df 91       	pop	r29
    1ab6:	08 95       	ret

00001ab8 <Lcd_DisplayNum>:
void Lcd_DisplayNum(u16 num)
{
    1ab8:	df 93       	push	r29
    1aba:	cf 93       	push	r28
    1abc:	00 d0       	rcall	.+0      	; 0x1abe <Lcd_DisplayNum+0x6>
    1abe:	cd b7       	in	r28, 0x3d	; 61
    1ac0:	de b7       	in	r29, 0x3e	; 62
    1ac2:	9a 83       	std	Y+2, r25	; 0x02
    1ac4:	89 83       	std	Y+1, r24	; 0x01
	Lcd_DisplayChr(num/1000 + '0');
    1ac6:	89 81       	ldd	r24, Y+1	; 0x01
    1ac8:	9a 81       	ldd	r25, Y+2	; 0x02
    1aca:	28 ee       	ldi	r18, 0xE8	; 232
    1acc:	33 e0       	ldi	r19, 0x03	; 3
    1ace:	b9 01       	movw	r22, r18
    1ad0:	0e 94 17 13 	call	0x262e	; 0x262e <__udivmodhi4>
    1ad4:	cb 01       	movw	r24, r22
    1ad6:	80 5d       	subi	r24, 0xD0	; 208
    1ad8:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <Lcd_DisplayChr>
	Lcd_DisplayChr(num%1000/100 + '0');
    1adc:	89 81       	ldd	r24, Y+1	; 0x01
    1ade:	9a 81       	ldd	r25, Y+2	; 0x02
    1ae0:	28 ee       	ldi	r18, 0xE8	; 232
    1ae2:	33 e0       	ldi	r19, 0x03	; 3
    1ae4:	b9 01       	movw	r22, r18
    1ae6:	0e 94 17 13 	call	0x262e	; 0x262e <__udivmodhi4>
    1aea:	24 e6       	ldi	r18, 0x64	; 100
    1aec:	30 e0       	ldi	r19, 0x00	; 0
    1aee:	b9 01       	movw	r22, r18
    1af0:	0e 94 17 13 	call	0x262e	; 0x262e <__udivmodhi4>
    1af4:	cb 01       	movw	r24, r22
    1af6:	80 5d       	subi	r24, 0xD0	; 208
    1af8:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <Lcd_DisplayChr>
	Lcd_DisplayChr(num%1000%100/10 + '0');
    1afc:	89 81       	ldd	r24, Y+1	; 0x01
    1afe:	9a 81       	ldd	r25, Y+2	; 0x02
    1b00:	28 ee       	ldi	r18, 0xE8	; 232
    1b02:	33 e0       	ldi	r19, 0x03	; 3
    1b04:	b9 01       	movw	r22, r18
    1b06:	0e 94 17 13 	call	0x262e	; 0x262e <__udivmodhi4>
    1b0a:	24 e6       	ldi	r18, 0x64	; 100
    1b0c:	30 e0       	ldi	r19, 0x00	; 0
    1b0e:	b9 01       	movw	r22, r18
    1b10:	0e 94 17 13 	call	0x262e	; 0x262e <__udivmodhi4>
    1b14:	2a e0       	ldi	r18, 0x0A	; 10
    1b16:	30 e0       	ldi	r19, 0x00	; 0
    1b18:	b9 01       	movw	r22, r18
    1b1a:	0e 94 17 13 	call	0x262e	; 0x262e <__udivmodhi4>
    1b1e:	cb 01       	movw	r24, r22
    1b20:	80 5d       	subi	r24, 0xD0	; 208
    1b22:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <Lcd_DisplayChr>
	Lcd_DisplayChr(num%1000%100%10 + '0');
    1b26:	89 81       	ldd	r24, Y+1	; 0x01
    1b28:	9a 81       	ldd	r25, Y+2	; 0x02
    1b2a:	28 ee       	ldi	r18, 0xE8	; 232
    1b2c:	33 e0       	ldi	r19, 0x03	; 3
    1b2e:	b9 01       	movw	r22, r18
    1b30:	0e 94 17 13 	call	0x262e	; 0x262e <__udivmodhi4>
    1b34:	24 e6       	ldi	r18, 0x64	; 100
    1b36:	30 e0       	ldi	r19, 0x00	; 0
    1b38:	b9 01       	movw	r22, r18
    1b3a:	0e 94 17 13 	call	0x262e	; 0x262e <__udivmodhi4>
    1b3e:	2a e0       	ldi	r18, 0x0A	; 10
    1b40:	30 e0       	ldi	r19, 0x00	; 0
    1b42:	b9 01       	movw	r22, r18
    1b44:	0e 94 17 13 	call	0x262e	; 0x262e <__udivmodhi4>
    1b48:	80 5d       	subi	r24, 0xD0	; 208
    1b4a:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <Lcd_DisplayChr>
}
    1b4e:	0f 90       	pop	r0
    1b50:	0f 90       	pop	r0
    1b52:	cf 91       	pop	r28
    1b54:	df 91       	pop	r29
    1b56:	08 95       	ret

00001b58 <LcdDisplayFloat>:

void LcdDisplayFloat(f64 floatNum)
{
    1b58:	df 93       	push	r29
    1b5a:	cf 93       	push	r28
    1b5c:	cd b7       	in	r28, 0x3d	; 61
    1b5e:	de b7       	in	r29, 0x3e	; 62
    1b60:	2c 97       	sbiw	r28, 0x0c	; 12
    1b62:	0f b6       	in	r0, 0x3f	; 63
    1b64:	f8 94       	cli
    1b66:	de bf       	out	0x3e, r29	; 62
    1b68:	0f be       	out	0x3f, r0	; 63
    1b6a:	cd bf       	out	0x3d, r28	; 61
    1b6c:	69 87       	std	Y+9, r22	; 0x09
    1b6e:	7a 87       	std	Y+10, r23	; 0x0a
    1b70:	8b 87       	std	Y+11, r24	; 0x0b
    1b72:	9c 87       	std	Y+12, r25	; 0x0c
	u16 intPart = 0;
    1b74:	18 86       	std	Y+8, r1	; 0x08
    1b76:	1f 82       	std	Y+7, r1	; 0x07
	f64 fractionTemp = 0;
    1b78:	80 e0       	ldi	r24, 0x00	; 0
    1b7a:	90 e0       	ldi	r25, 0x00	; 0
    1b7c:	a0 e0       	ldi	r26, 0x00	; 0
    1b7e:	b0 e0       	ldi	r27, 0x00	; 0
    1b80:	8b 83       	std	Y+3, r24	; 0x03
    1b82:	9c 83       	std	Y+4, r25	; 0x04
    1b84:	ad 83       	std	Y+5, r26	; 0x05
    1b86:	be 83       	std	Y+6, r27	; 0x06
	u16 fractionPart = 0;
    1b88:	1a 82       	std	Y+2, r1	; 0x02
    1b8a:	19 82       	std	Y+1, r1	; 0x01

	intPart = (u16)floatNum;
    1b8c:	69 85       	ldd	r22, Y+9	; 0x09
    1b8e:	7a 85       	ldd	r23, Y+10	; 0x0a
    1b90:	8b 85       	ldd	r24, Y+11	; 0x0b
    1b92:	9c 85       	ldd	r25, Y+12	; 0x0c
    1b94:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b98:	dc 01       	movw	r26, r24
    1b9a:	cb 01       	movw	r24, r22
    1b9c:	98 87       	std	Y+8, r25	; 0x08
    1b9e:	8f 83       	std	Y+7, r24	; 0x07
	fractionTemp = floatNum - intPart;
    1ba0:	8f 81       	ldd	r24, Y+7	; 0x07
    1ba2:	98 85       	ldd	r25, Y+8	; 0x08
    1ba4:	cc 01       	movw	r24, r24
    1ba6:	a0 e0       	ldi	r26, 0x00	; 0
    1ba8:	b0 e0       	ldi	r27, 0x00	; 0
    1baa:	bc 01       	movw	r22, r24
    1bac:	cd 01       	movw	r24, r26
    1bae:	0e 94 a1 04 	call	0x942	; 0x942 <__floatunsisf>
    1bb2:	9b 01       	movw	r18, r22
    1bb4:	ac 01       	movw	r20, r24
    1bb6:	69 85       	ldd	r22, Y+9	; 0x09
    1bb8:	7a 85       	ldd	r23, Y+10	; 0x0a
    1bba:	8b 85       	ldd	r24, Y+11	; 0x0b
    1bbc:	9c 85       	ldd	r25, Y+12	; 0x0c
    1bbe:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
    1bc2:	dc 01       	movw	r26, r24
    1bc4:	cb 01       	movw	r24, r22
    1bc6:	8b 83       	std	Y+3, r24	; 0x03
    1bc8:	9c 83       	std	Y+4, r25	; 0x04
    1bca:	ad 83       	std	Y+5, r26	; 0x05
    1bcc:	be 83       	std	Y+6, r27	; 0x06
	fractionPart = fractionTemp * 100;
    1bce:	6b 81       	ldd	r22, Y+3	; 0x03
    1bd0:	7c 81       	ldd	r23, Y+4	; 0x04
    1bd2:	8d 81       	ldd	r24, Y+5	; 0x05
    1bd4:	9e 81       	ldd	r25, Y+6	; 0x06
    1bd6:	20 e0       	ldi	r18, 0x00	; 0
    1bd8:	30 e0       	ldi	r19, 0x00	; 0
    1bda:	48 ec       	ldi	r20, 0xC8	; 200
    1bdc:	52 e4       	ldi	r21, 0x42	; 66
    1bde:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1be2:	dc 01       	movw	r26, r24
    1be4:	cb 01       	movw	r24, r22
    1be6:	bc 01       	movw	r22, r24
    1be8:	cd 01       	movw	r24, r26
    1bea:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1bee:	dc 01       	movw	r26, r24
    1bf0:	cb 01       	movw	r24, r22
    1bf2:	9a 83       	std	Y+2, r25	; 0x02
    1bf4:	89 83       	std	Y+1, r24	; 0x01

	Lcd_DisplayNum(intPart);
    1bf6:	8f 81       	ldd	r24, Y+7	; 0x07
    1bf8:	98 85       	ldd	r25, Y+8	; 0x08
    1bfa:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <Lcd_DisplayNum>
	Lcd_DisplayChr('.');
    1bfe:	8e e2       	ldi	r24, 0x2E	; 46
    1c00:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <Lcd_DisplayChr>
	Lcd_DisplayNum(fractionPart);
    1c04:	89 81       	ldd	r24, Y+1	; 0x01
    1c06:	9a 81       	ldd	r25, Y+2	; 0x02
    1c08:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <Lcd_DisplayNum>
}
    1c0c:	2c 96       	adiw	r28, 0x0c	; 12
    1c0e:	0f b6       	in	r0, 0x3f	; 63
    1c10:	f8 94       	cli
    1c12:	de bf       	out	0x3e, r29	; 62
    1c14:	0f be       	out	0x3f, r0	; 63
    1c16:	cd bf       	out	0x3d, r28	; 61
    1c18:	cf 91       	pop	r28
    1c1a:	df 91       	pop	r29
    1c1c:	08 95       	ret

00001c1e <Buzzer_Init>:
 *      Author: Eng_Fawzi
 */
#include "Buzzer.h"

void Buzzer_Init()
{
    1c1e:	df 93       	push	r29
    1c20:	cf 93       	push	r28
    1c22:	cd b7       	in	r28, 0x3d	; 61
    1c24:	de b7       	in	r29, 0x3e	; 62
	Dio_ConfigChannel(BUZZER_PORT,BUZZER_PIN,OUTPUT);
    1c26:	80 e0       	ldi	r24, 0x00	; 0
    1c28:	63 e0       	ldi	r22, 0x03	; 3
    1c2a:	41 e0       	ldi	r20, 0x01	; 1
    1c2c:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <Dio_ConfigChannel>
}
    1c30:	cf 91       	pop	r28
    1c32:	df 91       	pop	r29
    1c34:	08 95       	ret

00001c36 <Buzzer_ON>:

void Buzzer_ON()
{
    1c36:	df 93       	push	r29
    1c38:	cf 93       	push	r28
    1c3a:	cd b7       	in	r28, 0x3d	; 61
    1c3c:	de b7       	in	r29, 0x3e	; 62
	Dio_WriteChannel(BUZZER_PORT,BUZZER_PIN,STD_HIGH);
    1c3e:	80 e0       	ldi	r24, 0x00	; 0
    1c40:	63 e0       	ldi	r22, 0x03	; 3
    1c42:	41 e0       	ldi	r20, 0x01	; 1
    1c44:	0e 94 54 10 	call	0x20a8	; 0x20a8 <Dio_WriteChannel>
}
    1c48:	cf 91       	pop	r28
    1c4a:	df 91       	pop	r29
    1c4c:	08 95       	ret

00001c4e <Buzzer_OFF>:

void Buzzer_OFF()
{
    1c4e:	df 93       	push	r29
    1c50:	cf 93       	push	r28
    1c52:	cd b7       	in	r28, 0x3d	; 61
    1c54:	de b7       	in	r29, 0x3e	; 62
	Dio_WriteChannel(BUZZER_PORT,BUZZER_PIN,STD_LOW);
    1c56:	80 e0       	ldi	r24, 0x00	; 0
    1c58:	63 e0       	ldi	r22, 0x03	; 3
    1c5a:	40 e0       	ldi	r20, 0x00	; 0
    1c5c:	0e 94 54 10 	call	0x20a8	; 0x20a8 <Dio_WriteChannel>
}
    1c60:	cf 91       	pop	r28
    1c62:	df 91       	pop	r29
    1c64:	08 95       	ret

00001c66 <Buzzer_Toggle>:

void Buzzer_Toggle()
{
    1c66:	df 93       	push	r29
    1c68:	cf 93       	push	r28
    1c6a:	cd b7       	in	r28, 0x3d	; 61
    1c6c:	de b7       	in	r29, 0x3e	; 62
	Dio_TogglChannel(BUZZER_PORT,BUZZER_PIN);
    1c6e:	80 e0       	ldi	r24, 0x00	; 0
    1c70:	63 e0       	ldi	r22, 0x03	; 3
    1c72:	0e 94 a7 11 	call	0x234e	; 0x234e <Dio_TogglChannel>
}
    1c76:	cf 91       	pop	r28
    1c78:	df 91       	pop	r29
    1c7a:	08 95       	ret

00001c7c <Button_Init>:
 *      Author: Eng_Fawzi
 */
#include "Button.h"

void Button_Init(void)
{
    1c7c:	df 93       	push	r29
    1c7e:	cf 93       	push	r28
    1c80:	cd b7       	in	r28, 0x3d	; 61
    1c82:	de b7       	in	r29, 0x3e	; 62
	Dio_ConfigChannel(BUTTON0_PORT,BUTTON0_PIN,INPUT);
    1c84:	81 e0       	ldi	r24, 0x01	; 1
    1c86:	60 e0       	ldi	r22, 0x00	; 0
    1c88:	40 e0       	ldi	r20, 0x00	; 0
    1c8a:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <Dio_ConfigChannel>
	Dio_ConfigChannel(BUTTON1_PORT,BUTTON1_PIN,INPUT);
    1c8e:	81 e0       	ldi	r24, 0x01	; 1
    1c90:	64 e0       	ldi	r22, 0x04	; 4
    1c92:	40 e0       	ldi	r20, 0x00	; 0
    1c94:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <Dio_ConfigChannel>
	Dio_ConfigChannel(BUTTON2_PORT,BUTTON2_PIN,INPUT);
    1c98:	83 e0       	ldi	r24, 0x03	; 3
    1c9a:	62 e0       	ldi	r22, 0x02	; 2
    1c9c:	40 e0       	ldi	r20, 0x00	; 0
    1c9e:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <Dio_ConfigChannel>
}
    1ca2:	cf 91       	pop	r28
    1ca4:	df 91       	pop	r29
    1ca6:	08 95       	ret

00001ca8 <Button_GetStatus>:
button_type Button_GetStatus(buttonID_type button)
{
    1ca8:	df 93       	push	r29
    1caa:	cf 93       	push	r28
    1cac:	00 d0       	rcall	.+0      	; 0x1cae <Button_GetStatus+0x6>
    1cae:	00 d0       	rcall	.+0      	; 0x1cb0 <Button_GetStatus+0x8>
    1cb0:	cd b7       	in	r28, 0x3d	; 61
    1cb2:	de b7       	in	r29, 0x3e	; 62
    1cb4:	8a 83       	std	Y+2, r24	; 0x02
	button_type status = RELEASED;
    1cb6:	19 82       	std	Y+1, r1	; 0x01
	switch (button)
    1cb8:	8a 81       	ldd	r24, Y+2	; 0x02
    1cba:	28 2f       	mov	r18, r24
    1cbc:	30 e0       	ldi	r19, 0x00	; 0
    1cbe:	3c 83       	std	Y+4, r19	; 0x04
    1cc0:	2b 83       	std	Y+3, r18	; 0x03
    1cc2:	8b 81       	ldd	r24, Y+3	; 0x03
    1cc4:	9c 81       	ldd	r25, Y+4	; 0x04
    1cc6:	81 30       	cpi	r24, 0x01	; 1
    1cc8:	91 05       	cpc	r25, r1
    1cca:	a1 f0       	breq	.+40     	; 0x1cf4 <Button_GetStatus+0x4c>
    1ccc:	2b 81       	ldd	r18, Y+3	; 0x03
    1cce:	3c 81       	ldd	r19, Y+4	; 0x04
    1cd0:	22 30       	cpi	r18, 0x02	; 2
    1cd2:	31 05       	cpc	r19, r1
    1cd4:	d1 f0       	breq	.+52     	; 0x1d0a <Button_GetStatus+0x62>
    1cd6:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd8:	9c 81       	ldd	r25, Y+4	; 0x04
    1cda:	00 97       	sbiw	r24, 0x00	; 0
    1cdc:	01 f5       	brne	.+64     	; 0x1d1e <Button_GetStatus+0x76>
	{
	case BUTTON0:
		if (Dio_ReadChannel(BUTTON0_PORT,BUTTON0_PIN) == STD_HIGH)
    1cde:	81 e0       	ldi	r24, 0x01	; 1
    1ce0:	60 e0       	ldi	r22, 0x00	; 0
    1ce2:	0e 94 24 12 	call	0x2448	; 0x2448 <Dio_ReadChannel>
    1ce6:	81 30       	cpi	r24, 0x01	; 1
    1ce8:	19 f4       	brne	.+6      	; 0x1cf0 <Button_GetStatus+0x48>
		{
			status = PRESSED;
    1cea:	81 e0       	ldi	r24, 0x01	; 1
    1cec:	89 83       	std	Y+1, r24	; 0x01
    1cee:	17 c0       	rjmp	.+46     	; 0x1d1e <Button_GetStatus+0x76>
		}
		else
		{
			status = RELEASED;
    1cf0:	19 82       	std	Y+1, r1	; 0x01
    1cf2:	15 c0       	rjmp	.+42     	; 0x1d1e <Button_GetStatus+0x76>
		}
		break;

	case BUTTON1:
		if (Dio_ReadChannel(BUTTON1_PORT,BUTTON1_PIN) == STD_HIGH)
    1cf4:	81 e0       	ldi	r24, 0x01	; 1
    1cf6:	64 e0       	ldi	r22, 0x04	; 4
    1cf8:	0e 94 24 12 	call	0x2448	; 0x2448 <Dio_ReadChannel>
    1cfc:	81 30       	cpi	r24, 0x01	; 1
    1cfe:	19 f4       	brne	.+6      	; 0x1d06 <Button_GetStatus+0x5e>
		{
			status = PRESSED;
    1d00:	81 e0       	ldi	r24, 0x01	; 1
    1d02:	89 83       	std	Y+1, r24	; 0x01
    1d04:	0c c0       	rjmp	.+24     	; 0x1d1e <Button_GetStatus+0x76>
		}
		else
		{
			status = RELEASED;
    1d06:	19 82       	std	Y+1, r1	; 0x01
    1d08:	0a c0       	rjmp	.+20     	; 0x1d1e <Button_GetStatus+0x76>
		}
		break;

	case BUTTON2:
		if (Dio_ReadChannel(BUTTON2_PORT,BUTTON2_PIN) == STD_HIGH)
    1d0a:	83 e0       	ldi	r24, 0x03	; 3
    1d0c:	62 e0       	ldi	r22, 0x02	; 2
    1d0e:	0e 94 24 12 	call	0x2448	; 0x2448 <Dio_ReadChannel>
    1d12:	81 30       	cpi	r24, 0x01	; 1
    1d14:	19 f4       	brne	.+6      	; 0x1d1c <Button_GetStatus+0x74>
		{
			status = PRESSED;
    1d16:	81 e0       	ldi	r24, 0x01	; 1
    1d18:	89 83       	std	Y+1, r24	; 0x01
    1d1a:	01 c0       	rjmp	.+2      	; 0x1d1e <Button_GetStatus+0x76>
		}
		else
		{
			status = RELEASED;
    1d1c:	19 82       	std	Y+1, r1	; 0x01
		}
		break;
	}
	return status;
    1d1e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d20:	0f 90       	pop	r0
    1d22:	0f 90       	pop	r0
    1d24:	0f 90       	pop	r0
    1d26:	0f 90       	pop	r0
    1d28:	cf 91       	pop	r28
    1d2a:	df 91       	pop	r29
    1d2c:	08 95       	ret

00001d2e <Glbl_Interrupt_Enable>:
 */

#include "Glbl_INT.h"

void Glbl_Interrupt_Enable()
{
    1d2e:	df 93       	push	r29
    1d30:	cf 93       	push	r28
    1d32:	cd b7       	in	r28, 0x3d	; 61
    1d34:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(GLBL_SREG_REG,7);
    1d36:	af e5       	ldi	r26, 0x5F	; 95
    1d38:	b0 e0       	ldi	r27, 0x00	; 0
    1d3a:	ef e5       	ldi	r30, 0x5F	; 95
    1d3c:	f0 e0       	ldi	r31, 0x00	; 0
    1d3e:	80 81       	ld	r24, Z
    1d40:	80 68       	ori	r24, 0x80	; 128
    1d42:	8c 93       	st	X, r24
}
    1d44:	cf 91       	pop	r28
    1d46:	df 91       	pop	r29
    1d48:	08 95       	ret

00001d4a <Glbl_Interrupt_Disable>:
void Glbl_Interrupt_Disable()
{
    1d4a:	df 93       	push	r29
    1d4c:	cf 93       	push	r28
    1d4e:	cd b7       	in	r28, 0x3d	; 61
    1d50:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(GLBL_SREG_REG,7);
    1d52:	af e5       	ldi	r26, 0x5F	; 95
    1d54:	b0 e0       	ldi	r27, 0x00	; 0
    1d56:	ef e5       	ldi	r30, 0x5F	; 95
    1d58:	f0 e0       	ldi	r31, 0x00	; 0
    1d5a:	80 81       	ld	r24, Z
    1d5c:	8f 77       	andi	r24, 0x7F	; 127
    1d5e:	8c 93       	st	X, r24
}
    1d60:	cf 91       	pop	r28
    1d62:	df 91       	pop	r29
    1d64:	08 95       	ret

00001d66 <Ext_Interrupt_Enable>:

#include "Ext_INT.h"


void Ext_Interrupt_Enable(ext_Int_t intID)
{
    1d66:	df 93       	push	r29
    1d68:	cf 93       	push	r28
    1d6a:	00 d0       	rcall	.+0      	; 0x1d6c <Ext_Interrupt_Enable+0x6>
    1d6c:	0f 92       	push	r0
    1d6e:	cd b7       	in	r28, 0x3d	; 61
    1d70:	de b7       	in	r29, 0x3e	; 62
    1d72:	89 83       	std	Y+1, r24	; 0x01
	switch (intID)
    1d74:	89 81       	ldd	r24, Y+1	; 0x01
    1d76:	28 2f       	mov	r18, r24
    1d78:	30 e0       	ldi	r19, 0x00	; 0
    1d7a:	3b 83       	std	Y+3, r19	; 0x03
    1d7c:	2a 83       	std	Y+2, r18	; 0x02
    1d7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d80:	9b 81       	ldd	r25, Y+3	; 0x03
    1d82:	81 30       	cpi	r24, 0x01	; 1
    1d84:	91 05       	cpc	r25, r1
    1d86:	89 f0       	breq	.+34     	; 0x1daa <Ext_Interrupt_Enable+0x44>
    1d88:	2a 81       	ldd	r18, Y+2	; 0x02
    1d8a:	3b 81       	ldd	r19, Y+3	; 0x03
    1d8c:	22 30       	cpi	r18, 0x02	; 2
    1d8e:	31 05       	cpc	r19, r1
    1d90:	a1 f0       	breq	.+40     	; 0x1dba <Ext_Interrupt_Enable+0x54>
    1d92:	8a 81       	ldd	r24, Y+2	; 0x02
    1d94:	9b 81       	ldd	r25, Y+3	; 0x03
    1d96:	00 97       	sbiw	r24, 0x00	; 0
    1d98:	b9 f4       	brne	.+46     	; 0x1dc8 <Ext_Interrupt_Enable+0x62>
	{
	case EXT_INT0:
			SET_BIT(EXT_INT_GICR_REG,6);
    1d9a:	ab e5       	ldi	r26, 0x5B	; 91
    1d9c:	b0 e0       	ldi	r27, 0x00	; 0
    1d9e:	eb e5       	ldi	r30, 0x5B	; 91
    1da0:	f0 e0       	ldi	r31, 0x00	; 0
    1da2:	80 81       	ld	r24, Z
    1da4:	80 64       	ori	r24, 0x40	; 64
    1da6:	8c 93       	st	X, r24
    1da8:	0f c0       	rjmp	.+30     	; 0x1dc8 <Ext_Interrupt_Enable+0x62>
			break;

	case EXT_INT1:
			SET_BIT(EXT_INT_GICR_REG,7);
    1daa:	ab e5       	ldi	r26, 0x5B	; 91
    1dac:	b0 e0       	ldi	r27, 0x00	; 0
    1dae:	eb e5       	ldi	r30, 0x5B	; 91
    1db0:	f0 e0       	ldi	r31, 0x00	; 0
    1db2:	80 81       	ld	r24, Z
    1db4:	80 68       	ori	r24, 0x80	; 128
    1db6:	8c 93       	st	X, r24
    1db8:	07 c0       	rjmp	.+14     	; 0x1dc8 <Ext_Interrupt_Enable+0x62>
			break;

	case EXT_INT2:
			SET_BIT(EXT_INT_GICR_REG,5);
    1dba:	ab e5       	ldi	r26, 0x5B	; 91
    1dbc:	b0 e0       	ldi	r27, 0x00	; 0
    1dbe:	eb e5       	ldi	r30, 0x5B	; 91
    1dc0:	f0 e0       	ldi	r31, 0x00	; 0
    1dc2:	80 81       	ld	r24, Z
    1dc4:	80 62       	ori	r24, 0x20	; 32
    1dc6:	8c 93       	st	X, r24
			break;
	}
}
    1dc8:	0f 90       	pop	r0
    1dca:	0f 90       	pop	r0
    1dcc:	0f 90       	pop	r0
    1dce:	cf 91       	pop	r28
    1dd0:	df 91       	pop	r29
    1dd2:	08 95       	ret

00001dd4 <Ext_Interrupt_Disable>:
void Ext_Interrupt_Disable(ext_Int_t intID)
{
    1dd4:	df 93       	push	r29
    1dd6:	cf 93       	push	r28
    1dd8:	00 d0       	rcall	.+0      	; 0x1dda <Ext_Interrupt_Disable+0x6>
    1dda:	0f 92       	push	r0
    1ddc:	cd b7       	in	r28, 0x3d	; 61
    1dde:	de b7       	in	r29, 0x3e	; 62
    1de0:	89 83       	std	Y+1, r24	; 0x01
	switch (intID)
    1de2:	89 81       	ldd	r24, Y+1	; 0x01
    1de4:	28 2f       	mov	r18, r24
    1de6:	30 e0       	ldi	r19, 0x00	; 0
    1de8:	3b 83       	std	Y+3, r19	; 0x03
    1dea:	2a 83       	std	Y+2, r18	; 0x02
    1dec:	8a 81       	ldd	r24, Y+2	; 0x02
    1dee:	9b 81       	ldd	r25, Y+3	; 0x03
    1df0:	81 30       	cpi	r24, 0x01	; 1
    1df2:	91 05       	cpc	r25, r1
    1df4:	89 f0       	breq	.+34     	; 0x1e18 <Ext_Interrupt_Disable+0x44>
    1df6:	2a 81       	ldd	r18, Y+2	; 0x02
    1df8:	3b 81       	ldd	r19, Y+3	; 0x03
    1dfa:	22 30       	cpi	r18, 0x02	; 2
    1dfc:	31 05       	cpc	r19, r1
    1dfe:	a1 f0       	breq	.+40     	; 0x1e28 <Ext_Interrupt_Disable+0x54>
    1e00:	8a 81       	ldd	r24, Y+2	; 0x02
    1e02:	9b 81       	ldd	r25, Y+3	; 0x03
    1e04:	00 97       	sbiw	r24, 0x00	; 0
    1e06:	b9 f4       	brne	.+46     	; 0x1e36 <Ext_Interrupt_Disable+0x62>
	{
	case EXT_INT0:
			CLR_BIT(EXT_INT_GICR_REG,6);
    1e08:	ab e5       	ldi	r26, 0x5B	; 91
    1e0a:	b0 e0       	ldi	r27, 0x00	; 0
    1e0c:	eb e5       	ldi	r30, 0x5B	; 91
    1e0e:	f0 e0       	ldi	r31, 0x00	; 0
    1e10:	80 81       	ld	r24, Z
    1e12:	8f 7b       	andi	r24, 0xBF	; 191
    1e14:	8c 93       	st	X, r24
    1e16:	0f c0       	rjmp	.+30     	; 0x1e36 <Ext_Interrupt_Disable+0x62>
			break;

	case EXT_INT1:
			CLR_BIT(EXT_INT_GICR_REG,7);
    1e18:	ab e5       	ldi	r26, 0x5B	; 91
    1e1a:	b0 e0       	ldi	r27, 0x00	; 0
    1e1c:	eb e5       	ldi	r30, 0x5B	; 91
    1e1e:	f0 e0       	ldi	r31, 0x00	; 0
    1e20:	80 81       	ld	r24, Z
    1e22:	8f 77       	andi	r24, 0x7F	; 127
    1e24:	8c 93       	st	X, r24
    1e26:	07 c0       	rjmp	.+14     	; 0x1e36 <Ext_Interrupt_Disable+0x62>
			break;

	case EXT_INT2:
			CLR_BIT(EXT_INT_GICR_REG,5);
    1e28:	ab e5       	ldi	r26, 0x5B	; 91
    1e2a:	b0 e0       	ldi	r27, 0x00	; 0
    1e2c:	eb e5       	ldi	r30, 0x5B	; 91
    1e2e:	f0 e0       	ldi	r31, 0x00	; 0
    1e30:	80 81       	ld	r24, Z
    1e32:	8f 7d       	andi	r24, 0xDF	; 223
    1e34:	8c 93       	st	X, r24
			break;
	}

}
    1e36:	0f 90       	pop	r0
    1e38:	0f 90       	pop	r0
    1e3a:	0f 90       	pop	r0
    1e3c:	cf 91       	pop	r28
    1e3e:	df 91       	pop	r29
    1e40:	08 95       	ret

00001e42 <Ext_Interrupt_SncControl>:

void Ext_Interrupt_SncControl(ext_Int_t intID, snc_mode_t mode)
{
    1e42:	df 93       	push	r29
    1e44:	cf 93       	push	r28
    1e46:	00 d0       	rcall	.+0      	; 0x1e48 <Ext_Interrupt_SncControl+0x6>
    1e48:	00 d0       	rcall	.+0      	; 0x1e4a <Ext_Interrupt_SncControl+0x8>
    1e4a:	cd b7       	in	r28, 0x3d	; 61
    1e4c:	de b7       	in	r29, 0x3e	; 62
    1e4e:	89 83       	std	Y+1, r24	; 0x01
    1e50:	6a 83       	std	Y+2, r22	; 0x02
	switch (intID)
    1e52:	89 81       	ldd	r24, Y+1	; 0x01
    1e54:	28 2f       	mov	r18, r24
    1e56:	30 e0       	ldi	r19, 0x00	; 0
    1e58:	3c 83       	std	Y+4, r19	; 0x04
    1e5a:	2b 83       	std	Y+3, r18	; 0x03
    1e5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e5e:	9c 81       	ldd	r25, Y+4	; 0x04
    1e60:	81 30       	cpi	r24, 0x01	; 1
    1e62:	91 05       	cpc	r25, r1
    1e64:	91 f0       	breq	.+36     	; 0x1e8a <Ext_Interrupt_SncControl+0x48>
    1e66:	2b 81       	ldd	r18, Y+3	; 0x03
    1e68:	3c 81       	ldd	r19, Y+4	; 0x04
    1e6a:	22 30       	cpi	r18, 0x02	; 2
    1e6c:	31 05       	cpc	r19, r1
    1e6e:	e9 f0       	breq	.+58     	; 0x1eaa <Ext_Interrupt_SncControl+0x68>
    1e70:	8b 81       	ldd	r24, Y+3	; 0x03
    1e72:	9c 81       	ldd	r25, Y+4	; 0x04
    1e74:	00 97       	sbiw	r24, 0x00	; 0
    1e76:	71 f5       	brne	.+92     	; 0x1ed4 <Ext_Interrupt_SncControl+0x92>
	{
		case EXT_INT0:
			EXT_INT_MCUCR_REG |=(mode<<0);
    1e78:	a5 e5       	ldi	r26, 0x55	; 85
    1e7a:	b0 e0       	ldi	r27, 0x00	; 0
    1e7c:	e5 e5       	ldi	r30, 0x55	; 85
    1e7e:	f0 e0       	ldi	r31, 0x00	; 0
    1e80:	90 81       	ld	r25, Z
    1e82:	8a 81       	ldd	r24, Y+2	; 0x02
    1e84:	89 2b       	or	r24, r25
    1e86:	8c 93       	st	X, r24
    1e88:	25 c0       	rjmp	.+74     	; 0x1ed4 <Ext_Interrupt_SncControl+0x92>
			break;

		case EXT_INT1:
			EXT_INT_MCUCR_REG |=(mode<<2);
    1e8a:	a5 e5       	ldi	r26, 0x55	; 85
    1e8c:	b0 e0       	ldi	r27, 0x00	; 0
    1e8e:	e5 e5       	ldi	r30, 0x55	; 85
    1e90:	f0 e0       	ldi	r31, 0x00	; 0
    1e92:	80 81       	ld	r24, Z
    1e94:	28 2f       	mov	r18, r24
    1e96:	8a 81       	ldd	r24, Y+2	; 0x02
    1e98:	88 2f       	mov	r24, r24
    1e9a:	90 e0       	ldi	r25, 0x00	; 0
    1e9c:	88 0f       	add	r24, r24
    1e9e:	99 1f       	adc	r25, r25
    1ea0:	88 0f       	add	r24, r24
    1ea2:	99 1f       	adc	r25, r25
    1ea4:	82 2b       	or	r24, r18
    1ea6:	8c 93       	st	X, r24
    1ea8:	15 c0       	rjmp	.+42     	; 0x1ed4 <Ext_Interrupt_SncControl+0x92>
			break;

		case EXT_INT2:
			if (mode == FAILING_EDGE)
    1eaa:	8a 81       	ldd	r24, Y+2	; 0x02
    1eac:	82 30       	cpi	r24, 0x02	; 2
    1eae:	41 f4       	brne	.+16     	; 0x1ec0 <Ext_Interrupt_SncControl+0x7e>
			{
				CLR_BIT(EXT_INT_MCUCSR_REG,6);
    1eb0:	a4 e5       	ldi	r26, 0x54	; 84
    1eb2:	b0 e0       	ldi	r27, 0x00	; 0
    1eb4:	e4 e5       	ldi	r30, 0x54	; 84
    1eb6:	f0 e0       	ldi	r31, 0x00	; 0
    1eb8:	80 81       	ld	r24, Z
    1eba:	8f 7b       	andi	r24, 0xBF	; 191
    1ebc:	8c 93       	st	X, r24
    1ebe:	0a c0       	rjmp	.+20     	; 0x1ed4 <Ext_Interrupt_SncControl+0x92>
			}
			else if (mode == RISING_EDGE)
    1ec0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ec2:	83 30       	cpi	r24, 0x03	; 3
    1ec4:	39 f4       	brne	.+14     	; 0x1ed4 <Ext_Interrupt_SncControl+0x92>
			{
				SET_BIT(EXT_INT_MCUCSR_REG,6);
    1ec6:	a4 e5       	ldi	r26, 0x54	; 84
    1ec8:	b0 e0       	ldi	r27, 0x00	; 0
    1eca:	e4 e5       	ldi	r30, 0x54	; 84
    1ecc:	f0 e0       	ldi	r31, 0x00	; 0
    1ece:	80 81       	ld	r24, Z
    1ed0:	80 64       	ori	r24, 0x40	; 64
    1ed2:	8c 93       	st	X, r24
			{
				/*	Do Nothing	*/
			}
			break;
	}
}
    1ed4:	0f 90       	pop	r0
    1ed6:	0f 90       	pop	r0
    1ed8:	0f 90       	pop	r0
    1eda:	0f 90       	pop	r0
    1edc:	cf 91       	pop	r28
    1ede:	df 91       	pop	r29
    1ee0:	08 95       	ret

00001ee2 <Dio_ConfigChannel>:
 */
#include "Dio.h"

/*DDRx      DDRA, DDRB, DDRC, DDRD*/
void Dio_ConfigChannel(port_type port,pin_type pin,direction_type direction)
{
    1ee2:	df 93       	push	r29
    1ee4:	cf 93       	push	r28
    1ee6:	00 d0       	rcall	.+0      	; 0x1ee8 <Dio_ConfigChannel+0x6>
    1ee8:	00 d0       	rcall	.+0      	; 0x1eea <Dio_ConfigChannel+0x8>
    1eea:	0f 92       	push	r0
    1eec:	cd b7       	in	r28, 0x3d	; 61
    1eee:	de b7       	in	r29, 0x3e	; 62
    1ef0:	89 83       	std	Y+1, r24	; 0x01
    1ef2:	6a 83       	std	Y+2, r22	; 0x02
    1ef4:	4b 83       	std	Y+3, r20	; 0x03
	switch (port)
    1ef6:	89 81       	ldd	r24, Y+1	; 0x01
    1ef8:	28 2f       	mov	r18, r24
    1efa:	30 e0       	ldi	r19, 0x00	; 0
    1efc:	3d 83       	std	Y+5, r19	; 0x05
    1efe:	2c 83       	std	Y+4, r18	; 0x04
    1f00:	8c 81       	ldd	r24, Y+4	; 0x04
    1f02:	9d 81       	ldd	r25, Y+5	; 0x05
    1f04:	81 30       	cpi	r24, 0x01	; 1
    1f06:	91 05       	cpc	r25, r1
    1f08:	09 f4       	brne	.+2      	; 0x1f0c <Dio_ConfigChannel+0x2a>
    1f0a:	43 c0       	rjmp	.+134    	; 0x1f92 <Dio_ConfigChannel+0xb0>
    1f0c:	2c 81       	ldd	r18, Y+4	; 0x04
    1f0e:	3d 81       	ldd	r19, Y+5	; 0x05
    1f10:	22 30       	cpi	r18, 0x02	; 2
    1f12:	31 05       	cpc	r19, r1
    1f14:	2c f4       	brge	.+10     	; 0x1f20 <Dio_ConfigChannel+0x3e>
    1f16:	8c 81       	ldd	r24, Y+4	; 0x04
    1f18:	9d 81       	ldd	r25, Y+5	; 0x05
    1f1a:	00 97       	sbiw	r24, 0x00	; 0
    1f1c:	71 f0       	breq	.+28     	; 0x1f3a <Dio_ConfigChannel+0x58>
    1f1e:	bc c0       	rjmp	.+376    	; 0x2098 <Dio_ConfigChannel+0x1b6>
    1f20:	2c 81       	ldd	r18, Y+4	; 0x04
    1f22:	3d 81       	ldd	r19, Y+5	; 0x05
    1f24:	22 30       	cpi	r18, 0x02	; 2
    1f26:	31 05       	cpc	r19, r1
    1f28:	09 f4       	brne	.+2      	; 0x1f2c <Dio_ConfigChannel+0x4a>
    1f2a:	5f c0       	rjmp	.+190    	; 0x1fea <Dio_ConfigChannel+0x108>
    1f2c:	8c 81       	ldd	r24, Y+4	; 0x04
    1f2e:	9d 81       	ldd	r25, Y+5	; 0x05
    1f30:	83 30       	cpi	r24, 0x03	; 3
    1f32:	91 05       	cpc	r25, r1
    1f34:	09 f4       	brne	.+2      	; 0x1f38 <Dio_ConfigChannel+0x56>
    1f36:	85 c0       	rjmp	.+266    	; 0x2042 <Dio_ConfigChannel+0x160>
    1f38:	af c0       	rjmp	.+350    	; 0x2098 <Dio_ConfigChannel+0x1b6>
	{
	case DIO_PORTA:
		if (direction == INPUT)
    1f3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f3c:	88 23       	and	r24, r24
    1f3e:	a9 f4       	brne	.+42     	; 0x1f6a <Dio_ConfigChannel+0x88>
		{
			CLR_BIT(DIO_DDRA_REG,pin);
    1f40:	aa e3       	ldi	r26, 0x3A	; 58
    1f42:	b0 e0       	ldi	r27, 0x00	; 0
    1f44:	ea e3       	ldi	r30, 0x3A	; 58
    1f46:	f0 e0       	ldi	r31, 0x00	; 0
    1f48:	80 81       	ld	r24, Z
    1f4a:	48 2f       	mov	r20, r24
    1f4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f4e:	28 2f       	mov	r18, r24
    1f50:	30 e0       	ldi	r19, 0x00	; 0
    1f52:	81 e0       	ldi	r24, 0x01	; 1
    1f54:	90 e0       	ldi	r25, 0x00	; 0
    1f56:	02 2e       	mov	r0, r18
    1f58:	02 c0       	rjmp	.+4      	; 0x1f5e <Dio_ConfigChannel+0x7c>
    1f5a:	88 0f       	add	r24, r24
    1f5c:	99 1f       	adc	r25, r25
    1f5e:	0a 94       	dec	r0
    1f60:	e2 f7       	brpl	.-8      	; 0x1f5a <Dio_ConfigChannel+0x78>
    1f62:	80 95       	com	r24
    1f64:	84 23       	and	r24, r20
    1f66:	8c 93       	st	X, r24
    1f68:	97 c0       	rjmp	.+302    	; 0x2098 <Dio_ConfigChannel+0x1b6>
		}
		else
		{
			SET_BIT(DIO_DDRA_REG,pin);
    1f6a:	aa e3       	ldi	r26, 0x3A	; 58
    1f6c:	b0 e0       	ldi	r27, 0x00	; 0
    1f6e:	ea e3       	ldi	r30, 0x3A	; 58
    1f70:	f0 e0       	ldi	r31, 0x00	; 0
    1f72:	80 81       	ld	r24, Z
    1f74:	48 2f       	mov	r20, r24
    1f76:	8a 81       	ldd	r24, Y+2	; 0x02
    1f78:	28 2f       	mov	r18, r24
    1f7a:	30 e0       	ldi	r19, 0x00	; 0
    1f7c:	81 e0       	ldi	r24, 0x01	; 1
    1f7e:	90 e0       	ldi	r25, 0x00	; 0
    1f80:	02 2e       	mov	r0, r18
    1f82:	02 c0       	rjmp	.+4      	; 0x1f88 <Dio_ConfigChannel+0xa6>
    1f84:	88 0f       	add	r24, r24
    1f86:	99 1f       	adc	r25, r25
    1f88:	0a 94       	dec	r0
    1f8a:	e2 f7       	brpl	.-8      	; 0x1f84 <Dio_ConfigChannel+0xa2>
    1f8c:	84 2b       	or	r24, r20
    1f8e:	8c 93       	st	X, r24
    1f90:	83 c0       	rjmp	.+262    	; 0x2098 <Dio_ConfigChannel+0x1b6>
		}
		break;

	case DIO_PORTB:
		if (direction == INPUT)
    1f92:	8b 81       	ldd	r24, Y+3	; 0x03
    1f94:	88 23       	and	r24, r24
    1f96:	a9 f4       	brne	.+42     	; 0x1fc2 <Dio_ConfigChannel+0xe0>
		{
			CLR_BIT(DIO_DDRB_REG,pin);
    1f98:	a7 e3       	ldi	r26, 0x37	; 55
    1f9a:	b0 e0       	ldi	r27, 0x00	; 0
    1f9c:	e7 e3       	ldi	r30, 0x37	; 55
    1f9e:	f0 e0       	ldi	r31, 0x00	; 0
    1fa0:	80 81       	ld	r24, Z
    1fa2:	48 2f       	mov	r20, r24
    1fa4:	8a 81       	ldd	r24, Y+2	; 0x02
    1fa6:	28 2f       	mov	r18, r24
    1fa8:	30 e0       	ldi	r19, 0x00	; 0
    1faa:	81 e0       	ldi	r24, 0x01	; 1
    1fac:	90 e0       	ldi	r25, 0x00	; 0
    1fae:	02 2e       	mov	r0, r18
    1fb0:	02 c0       	rjmp	.+4      	; 0x1fb6 <Dio_ConfigChannel+0xd4>
    1fb2:	88 0f       	add	r24, r24
    1fb4:	99 1f       	adc	r25, r25
    1fb6:	0a 94       	dec	r0
    1fb8:	e2 f7       	brpl	.-8      	; 0x1fb2 <Dio_ConfigChannel+0xd0>
    1fba:	80 95       	com	r24
    1fbc:	84 23       	and	r24, r20
    1fbe:	8c 93       	st	X, r24
    1fc0:	6b c0       	rjmp	.+214    	; 0x2098 <Dio_ConfigChannel+0x1b6>
		}
		else
		{
			SET_BIT(DIO_DDRB_REG,pin);
    1fc2:	a7 e3       	ldi	r26, 0x37	; 55
    1fc4:	b0 e0       	ldi	r27, 0x00	; 0
    1fc6:	e7 e3       	ldi	r30, 0x37	; 55
    1fc8:	f0 e0       	ldi	r31, 0x00	; 0
    1fca:	80 81       	ld	r24, Z
    1fcc:	48 2f       	mov	r20, r24
    1fce:	8a 81       	ldd	r24, Y+2	; 0x02
    1fd0:	28 2f       	mov	r18, r24
    1fd2:	30 e0       	ldi	r19, 0x00	; 0
    1fd4:	81 e0       	ldi	r24, 0x01	; 1
    1fd6:	90 e0       	ldi	r25, 0x00	; 0
    1fd8:	02 2e       	mov	r0, r18
    1fda:	02 c0       	rjmp	.+4      	; 0x1fe0 <Dio_ConfigChannel+0xfe>
    1fdc:	88 0f       	add	r24, r24
    1fde:	99 1f       	adc	r25, r25
    1fe0:	0a 94       	dec	r0
    1fe2:	e2 f7       	brpl	.-8      	; 0x1fdc <Dio_ConfigChannel+0xfa>
    1fe4:	84 2b       	or	r24, r20
    1fe6:	8c 93       	st	X, r24
    1fe8:	57 c0       	rjmp	.+174    	; 0x2098 <Dio_ConfigChannel+0x1b6>
		}
		break;

	case DIO_PORTC:
		if (direction == INPUT)
    1fea:	8b 81       	ldd	r24, Y+3	; 0x03
    1fec:	88 23       	and	r24, r24
    1fee:	a9 f4       	brne	.+42     	; 0x201a <Dio_ConfigChannel+0x138>
		{
			CLR_BIT(DIO_DDRC_REG,pin);
    1ff0:	a4 e3       	ldi	r26, 0x34	; 52
    1ff2:	b0 e0       	ldi	r27, 0x00	; 0
    1ff4:	e4 e3       	ldi	r30, 0x34	; 52
    1ff6:	f0 e0       	ldi	r31, 0x00	; 0
    1ff8:	80 81       	ld	r24, Z
    1ffa:	48 2f       	mov	r20, r24
    1ffc:	8a 81       	ldd	r24, Y+2	; 0x02
    1ffe:	28 2f       	mov	r18, r24
    2000:	30 e0       	ldi	r19, 0x00	; 0
    2002:	81 e0       	ldi	r24, 0x01	; 1
    2004:	90 e0       	ldi	r25, 0x00	; 0
    2006:	02 2e       	mov	r0, r18
    2008:	02 c0       	rjmp	.+4      	; 0x200e <Dio_ConfigChannel+0x12c>
    200a:	88 0f       	add	r24, r24
    200c:	99 1f       	adc	r25, r25
    200e:	0a 94       	dec	r0
    2010:	e2 f7       	brpl	.-8      	; 0x200a <Dio_ConfigChannel+0x128>
    2012:	80 95       	com	r24
    2014:	84 23       	and	r24, r20
    2016:	8c 93       	st	X, r24
    2018:	3f c0       	rjmp	.+126    	; 0x2098 <Dio_ConfigChannel+0x1b6>
		}
		else
		{
			SET_BIT(DIO_DDRC_REG,pin);
    201a:	a4 e3       	ldi	r26, 0x34	; 52
    201c:	b0 e0       	ldi	r27, 0x00	; 0
    201e:	e4 e3       	ldi	r30, 0x34	; 52
    2020:	f0 e0       	ldi	r31, 0x00	; 0
    2022:	80 81       	ld	r24, Z
    2024:	48 2f       	mov	r20, r24
    2026:	8a 81       	ldd	r24, Y+2	; 0x02
    2028:	28 2f       	mov	r18, r24
    202a:	30 e0       	ldi	r19, 0x00	; 0
    202c:	81 e0       	ldi	r24, 0x01	; 1
    202e:	90 e0       	ldi	r25, 0x00	; 0
    2030:	02 2e       	mov	r0, r18
    2032:	02 c0       	rjmp	.+4      	; 0x2038 <Dio_ConfigChannel+0x156>
    2034:	88 0f       	add	r24, r24
    2036:	99 1f       	adc	r25, r25
    2038:	0a 94       	dec	r0
    203a:	e2 f7       	brpl	.-8      	; 0x2034 <Dio_ConfigChannel+0x152>
    203c:	84 2b       	or	r24, r20
    203e:	8c 93       	st	X, r24
    2040:	2b c0       	rjmp	.+86     	; 0x2098 <Dio_ConfigChannel+0x1b6>
		}
		break;

	case DIO_PORTD:
		if (direction == INPUT)
    2042:	8b 81       	ldd	r24, Y+3	; 0x03
    2044:	88 23       	and	r24, r24
    2046:	a9 f4       	brne	.+42     	; 0x2072 <Dio_ConfigChannel+0x190>
		{
			CLR_BIT(DIO_DDRD_REG,pin);
    2048:	a1 e3       	ldi	r26, 0x31	; 49
    204a:	b0 e0       	ldi	r27, 0x00	; 0
    204c:	e1 e3       	ldi	r30, 0x31	; 49
    204e:	f0 e0       	ldi	r31, 0x00	; 0
    2050:	80 81       	ld	r24, Z
    2052:	48 2f       	mov	r20, r24
    2054:	8a 81       	ldd	r24, Y+2	; 0x02
    2056:	28 2f       	mov	r18, r24
    2058:	30 e0       	ldi	r19, 0x00	; 0
    205a:	81 e0       	ldi	r24, 0x01	; 1
    205c:	90 e0       	ldi	r25, 0x00	; 0
    205e:	02 2e       	mov	r0, r18
    2060:	02 c0       	rjmp	.+4      	; 0x2066 <Dio_ConfigChannel+0x184>
    2062:	88 0f       	add	r24, r24
    2064:	99 1f       	adc	r25, r25
    2066:	0a 94       	dec	r0
    2068:	e2 f7       	brpl	.-8      	; 0x2062 <Dio_ConfigChannel+0x180>
    206a:	80 95       	com	r24
    206c:	84 23       	and	r24, r20
    206e:	8c 93       	st	X, r24
    2070:	13 c0       	rjmp	.+38     	; 0x2098 <Dio_ConfigChannel+0x1b6>
		}
		else
		{
			SET_BIT(DIO_DDRD_REG,pin);
    2072:	a1 e3       	ldi	r26, 0x31	; 49
    2074:	b0 e0       	ldi	r27, 0x00	; 0
    2076:	e1 e3       	ldi	r30, 0x31	; 49
    2078:	f0 e0       	ldi	r31, 0x00	; 0
    207a:	80 81       	ld	r24, Z
    207c:	48 2f       	mov	r20, r24
    207e:	8a 81       	ldd	r24, Y+2	; 0x02
    2080:	28 2f       	mov	r18, r24
    2082:	30 e0       	ldi	r19, 0x00	; 0
    2084:	81 e0       	ldi	r24, 0x01	; 1
    2086:	90 e0       	ldi	r25, 0x00	; 0
    2088:	02 2e       	mov	r0, r18
    208a:	02 c0       	rjmp	.+4      	; 0x2090 <Dio_ConfigChannel+0x1ae>
    208c:	88 0f       	add	r24, r24
    208e:	99 1f       	adc	r25, r25
    2090:	0a 94       	dec	r0
    2092:	e2 f7       	brpl	.-8      	; 0x208c <Dio_ConfigChannel+0x1aa>
    2094:	84 2b       	or	r24, r20
    2096:	8c 93       	st	X, r24
		}

		break;
	}
}
    2098:	0f 90       	pop	r0
    209a:	0f 90       	pop	r0
    209c:	0f 90       	pop	r0
    209e:	0f 90       	pop	r0
    20a0:	0f 90       	pop	r0
    20a2:	cf 91       	pop	r28
    20a4:	df 91       	pop	r29
    20a6:	08 95       	ret

000020a8 <Dio_WriteChannel>:
void Dio_WriteChannel(port_type port,pin_type pin,level_type level)
{
    20a8:	df 93       	push	r29
    20aa:	cf 93       	push	r28
    20ac:	00 d0       	rcall	.+0      	; 0x20ae <Dio_WriteChannel+0x6>
    20ae:	00 d0       	rcall	.+0      	; 0x20b0 <Dio_WriteChannel+0x8>
    20b0:	0f 92       	push	r0
    20b2:	cd b7       	in	r28, 0x3d	; 61
    20b4:	de b7       	in	r29, 0x3e	; 62
    20b6:	89 83       	std	Y+1, r24	; 0x01
    20b8:	6a 83       	std	Y+2, r22	; 0x02
    20ba:	4b 83       	std	Y+3, r20	; 0x03
	switch (port)
    20bc:	89 81       	ldd	r24, Y+1	; 0x01
    20be:	28 2f       	mov	r18, r24
    20c0:	30 e0       	ldi	r19, 0x00	; 0
    20c2:	3d 83       	std	Y+5, r19	; 0x05
    20c4:	2c 83       	std	Y+4, r18	; 0x04
    20c6:	8c 81       	ldd	r24, Y+4	; 0x04
    20c8:	9d 81       	ldd	r25, Y+5	; 0x05
    20ca:	81 30       	cpi	r24, 0x01	; 1
    20cc:	91 05       	cpc	r25, r1
    20ce:	09 f4       	brne	.+2      	; 0x20d2 <Dio_WriteChannel+0x2a>
    20d0:	43 c0       	rjmp	.+134    	; 0x2158 <Dio_WriteChannel+0xb0>
    20d2:	2c 81       	ldd	r18, Y+4	; 0x04
    20d4:	3d 81       	ldd	r19, Y+5	; 0x05
    20d6:	22 30       	cpi	r18, 0x02	; 2
    20d8:	31 05       	cpc	r19, r1
    20da:	2c f4       	brge	.+10     	; 0x20e6 <Dio_WriteChannel+0x3e>
    20dc:	8c 81       	ldd	r24, Y+4	; 0x04
    20de:	9d 81       	ldd	r25, Y+5	; 0x05
    20e0:	00 97       	sbiw	r24, 0x00	; 0
    20e2:	71 f0       	breq	.+28     	; 0x2100 <Dio_WriteChannel+0x58>
    20e4:	bc c0       	rjmp	.+376    	; 0x225e <Dio_WriteChannel+0x1b6>
    20e6:	2c 81       	ldd	r18, Y+4	; 0x04
    20e8:	3d 81       	ldd	r19, Y+5	; 0x05
    20ea:	22 30       	cpi	r18, 0x02	; 2
    20ec:	31 05       	cpc	r19, r1
    20ee:	09 f4       	brne	.+2      	; 0x20f2 <Dio_WriteChannel+0x4a>
    20f0:	5f c0       	rjmp	.+190    	; 0x21b0 <Dio_WriteChannel+0x108>
    20f2:	8c 81       	ldd	r24, Y+4	; 0x04
    20f4:	9d 81       	ldd	r25, Y+5	; 0x05
    20f6:	83 30       	cpi	r24, 0x03	; 3
    20f8:	91 05       	cpc	r25, r1
    20fa:	09 f4       	brne	.+2      	; 0x20fe <Dio_WriteChannel+0x56>
    20fc:	85 c0       	rjmp	.+266    	; 0x2208 <Dio_WriteChannel+0x160>
    20fe:	af c0       	rjmp	.+350    	; 0x225e <Dio_WriteChannel+0x1b6>
	{
	case DIO_PORTA:
		if (level == STD_HIGH)
    2100:	8b 81       	ldd	r24, Y+3	; 0x03
    2102:	81 30       	cpi	r24, 0x01	; 1
    2104:	a1 f4       	brne	.+40     	; 0x212e <Dio_WriteChannel+0x86>
		{
			SET_BIT(DIO_PORTA_REG,pin);
    2106:	ab e3       	ldi	r26, 0x3B	; 59
    2108:	b0 e0       	ldi	r27, 0x00	; 0
    210a:	eb e3       	ldi	r30, 0x3B	; 59
    210c:	f0 e0       	ldi	r31, 0x00	; 0
    210e:	80 81       	ld	r24, Z
    2110:	48 2f       	mov	r20, r24
    2112:	8a 81       	ldd	r24, Y+2	; 0x02
    2114:	28 2f       	mov	r18, r24
    2116:	30 e0       	ldi	r19, 0x00	; 0
    2118:	81 e0       	ldi	r24, 0x01	; 1
    211a:	90 e0       	ldi	r25, 0x00	; 0
    211c:	02 2e       	mov	r0, r18
    211e:	02 c0       	rjmp	.+4      	; 0x2124 <Dio_WriteChannel+0x7c>
    2120:	88 0f       	add	r24, r24
    2122:	99 1f       	adc	r25, r25
    2124:	0a 94       	dec	r0
    2126:	e2 f7       	brpl	.-8      	; 0x2120 <Dio_WriteChannel+0x78>
    2128:	84 2b       	or	r24, r20
    212a:	8c 93       	st	X, r24
    212c:	98 c0       	rjmp	.+304    	; 0x225e <Dio_WriteChannel+0x1b6>
		}
		else
		{
			CLR_BIT(DIO_PORTA_REG,pin);
    212e:	ab e3       	ldi	r26, 0x3B	; 59
    2130:	b0 e0       	ldi	r27, 0x00	; 0
    2132:	eb e3       	ldi	r30, 0x3B	; 59
    2134:	f0 e0       	ldi	r31, 0x00	; 0
    2136:	80 81       	ld	r24, Z
    2138:	48 2f       	mov	r20, r24
    213a:	8a 81       	ldd	r24, Y+2	; 0x02
    213c:	28 2f       	mov	r18, r24
    213e:	30 e0       	ldi	r19, 0x00	; 0
    2140:	81 e0       	ldi	r24, 0x01	; 1
    2142:	90 e0       	ldi	r25, 0x00	; 0
    2144:	02 2e       	mov	r0, r18
    2146:	02 c0       	rjmp	.+4      	; 0x214c <Dio_WriteChannel+0xa4>
    2148:	88 0f       	add	r24, r24
    214a:	99 1f       	adc	r25, r25
    214c:	0a 94       	dec	r0
    214e:	e2 f7       	brpl	.-8      	; 0x2148 <Dio_WriteChannel+0xa0>
    2150:	80 95       	com	r24
    2152:	84 23       	and	r24, r20
    2154:	8c 93       	st	X, r24
    2156:	83 c0       	rjmp	.+262    	; 0x225e <Dio_WriteChannel+0x1b6>
		}
		break;

	case DIO_PORTB:
		if (level == STD_HIGH)
    2158:	8b 81       	ldd	r24, Y+3	; 0x03
    215a:	81 30       	cpi	r24, 0x01	; 1
    215c:	a1 f4       	brne	.+40     	; 0x2186 <Dio_WriteChannel+0xde>
		{
			SET_BIT(DIO_PORTB_REG,pin);
    215e:	a8 e3       	ldi	r26, 0x38	; 56
    2160:	b0 e0       	ldi	r27, 0x00	; 0
    2162:	e8 e3       	ldi	r30, 0x38	; 56
    2164:	f0 e0       	ldi	r31, 0x00	; 0
    2166:	80 81       	ld	r24, Z
    2168:	48 2f       	mov	r20, r24
    216a:	8a 81       	ldd	r24, Y+2	; 0x02
    216c:	28 2f       	mov	r18, r24
    216e:	30 e0       	ldi	r19, 0x00	; 0
    2170:	81 e0       	ldi	r24, 0x01	; 1
    2172:	90 e0       	ldi	r25, 0x00	; 0
    2174:	02 2e       	mov	r0, r18
    2176:	02 c0       	rjmp	.+4      	; 0x217c <Dio_WriteChannel+0xd4>
    2178:	88 0f       	add	r24, r24
    217a:	99 1f       	adc	r25, r25
    217c:	0a 94       	dec	r0
    217e:	e2 f7       	brpl	.-8      	; 0x2178 <Dio_WriteChannel+0xd0>
    2180:	84 2b       	or	r24, r20
    2182:	8c 93       	st	X, r24
    2184:	6c c0       	rjmp	.+216    	; 0x225e <Dio_WriteChannel+0x1b6>
		}
		else
		{
			CLR_BIT(DIO_PORTB_REG,pin);
    2186:	a8 e3       	ldi	r26, 0x38	; 56
    2188:	b0 e0       	ldi	r27, 0x00	; 0
    218a:	e8 e3       	ldi	r30, 0x38	; 56
    218c:	f0 e0       	ldi	r31, 0x00	; 0
    218e:	80 81       	ld	r24, Z
    2190:	48 2f       	mov	r20, r24
    2192:	8a 81       	ldd	r24, Y+2	; 0x02
    2194:	28 2f       	mov	r18, r24
    2196:	30 e0       	ldi	r19, 0x00	; 0
    2198:	81 e0       	ldi	r24, 0x01	; 1
    219a:	90 e0       	ldi	r25, 0x00	; 0
    219c:	02 2e       	mov	r0, r18
    219e:	02 c0       	rjmp	.+4      	; 0x21a4 <Dio_WriteChannel+0xfc>
    21a0:	88 0f       	add	r24, r24
    21a2:	99 1f       	adc	r25, r25
    21a4:	0a 94       	dec	r0
    21a6:	e2 f7       	brpl	.-8      	; 0x21a0 <Dio_WriteChannel+0xf8>
    21a8:	80 95       	com	r24
    21aa:	84 23       	and	r24, r20
    21ac:	8c 93       	st	X, r24
    21ae:	57 c0       	rjmp	.+174    	; 0x225e <Dio_WriteChannel+0x1b6>
		}
		break;

	case DIO_PORTC:
		if (level == STD_HIGH)
    21b0:	8b 81       	ldd	r24, Y+3	; 0x03
    21b2:	81 30       	cpi	r24, 0x01	; 1
    21b4:	a1 f4       	brne	.+40     	; 0x21de <Dio_WriteChannel+0x136>
		{
			SET_BIT(DIO_PORTC_REG,pin);
    21b6:	a5 e3       	ldi	r26, 0x35	; 53
    21b8:	b0 e0       	ldi	r27, 0x00	; 0
    21ba:	e5 e3       	ldi	r30, 0x35	; 53
    21bc:	f0 e0       	ldi	r31, 0x00	; 0
    21be:	80 81       	ld	r24, Z
    21c0:	48 2f       	mov	r20, r24
    21c2:	8a 81       	ldd	r24, Y+2	; 0x02
    21c4:	28 2f       	mov	r18, r24
    21c6:	30 e0       	ldi	r19, 0x00	; 0
    21c8:	81 e0       	ldi	r24, 0x01	; 1
    21ca:	90 e0       	ldi	r25, 0x00	; 0
    21cc:	02 2e       	mov	r0, r18
    21ce:	02 c0       	rjmp	.+4      	; 0x21d4 <Dio_WriteChannel+0x12c>
    21d0:	88 0f       	add	r24, r24
    21d2:	99 1f       	adc	r25, r25
    21d4:	0a 94       	dec	r0
    21d6:	e2 f7       	brpl	.-8      	; 0x21d0 <Dio_WriteChannel+0x128>
    21d8:	84 2b       	or	r24, r20
    21da:	8c 93       	st	X, r24
    21dc:	40 c0       	rjmp	.+128    	; 0x225e <Dio_WriteChannel+0x1b6>
		}
		else
		{
			CLR_BIT(DIO_PORTC_REG,pin);
    21de:	a5 e3       	ldi	r26, 0x35	; 53
    21e0:	b0 e0       	ldi	r27, 0x00	; 0
    21e2:	e5 e3       	ldi	r30, 0x35	; 53
    21e4:	f0 e0       	ldi	r31, 0x00	; 0
    21e6:	80 81       	ld	r24, Z
    21e8:	48 2f       	mov	r20, r24
    21ea:	8a 81       	ldd	r24, Y+2	; 0x02
    21ec:	28 2f       	mov	r18, r24
    21ee:	30 e0       	ldi	r19, 0x00	; 0
    21f0:	81 e0       	ldi	r24, 0x01	; 1
    21f2:	90 e0       	ldi	r25, 0x00	; 0
    21f4:	02 2e       	mov	r0, r18
    21f6:	02 c0       	rjmp	.+4      	; 0x21fc <Dio_WriteChannel+0x154>
    21f8:	88 0f       	add	r24, r24
    21fa:	99 1f       	adc	r25, r25
    21fc:	0a 94       	dec	r0
    21fe:	e2 f7       	brpl	.-8      	; 0x21f8 <Dio_WriteChannel+0x150>
    2200:	80 95       	com	r24
    2202:	84 23       	and	r24, r20
    2204:	8c 93       	st	X, r24
    2206:	2b c0       	rjmp	.+86     	; 0x225e <Dio_WriteChannel+0x1b6>
		}
		break;

	case DIO_PORTD:
		if (level == STD_HIGH)
    2208:	8b 81       	ldd	r24, Y+3	; 0x03
    220a:	81 30       	cpi	r24, 0x01	; 1
    220c:	a1 f4       	brne	.+40     	; 0x2236 <Dio_WriteChannel+0x18e>
		{
			SET_BIT(DIO_PORTD_REG,pin);
    220e:	a2 e3       	ldi	r26, 0x32	; 50
    2210:	b0 e0       	ldi	r27, 0x00	; 0
    2212:	e2 e3       	ldi	r30, 0x32	; 50
    2214:	f0 e0       	ldi	r31, 0x00	; 0
    2216:	80 81       	ld	r24, Z
    2218:	48 2f       	mov	r20, r24
    221a:	8a 81       	ldd	r24, Y+2	; 0x02
    221c:	28 2f       	mov	r18, r24
    221e:	30 e0       	ldi	r19, 0x00	; 0
    2220:	81 e0       	ldi	r24, 0x01	; 1
    2222:	90 e0       	ldi	r25, 0x00	; 0
    2224:	02 2e       	mov	r0, r18
    2226:	02 c0       	rjmp	.+4      	; 0x222c <Dio_WriteChannel+0x184>
    2228:	88 0f       	add	r24, r24
    222a:	99 1f       	adc	r25, r25
    222c:	0a 94       	dec	r0
    222e:	e2 f7       	brpl	.-8      	; 0x2228 <Dio_WriteChannel+0x180>
    2230:	84 2b       	or	r24, r20
    2232:	8c 93       	st	X, r24
    2234:	14 c0       	rjmp	.+40     	; 0x225e <Dio_WriteChannel+0x1b6>
		}
		else
		{
			CLR_BIT(DIO_PORTD_REG,pin);
    2236:	a2 e3       	ldi	r26, 0x32	; 50
    2238:	b0 e0       	ldi	r27, 0x00	; 0
    223a:	e2 e3       	ldi	r30, 0x32	; 50
    223c:	f0 e0       	ldi	r31, 0x00	; 0
    223e:	80 81       	ld	r24, Z
    2240:	48 2f       	mov	r20, r24
    2242:	8a 81       	ldd	r24, Y+2	; 0x02
    2244:	28 2f       	mov	r18, r24
    2246:	30 e0       	ldi	r19, 0x00	; 0
    2248:	81 e0       	ldi	r24, 0x01	; 1
    224a:	90 e0       	ldi	r25, 0x00	; 0
    224c:	02 2e       	mov	r0, r18
    224e:	02 c0       	rjmp	.+4      	; 0x2254 <Dio_WriteChannel+0x1ac>
    2250:	88 0f       	add	r24, r24
    2252:	99 1f       	adc	r25, r25
    2254:	0a 94       	dec	r0
    2256:	e2 f7       	brpl	.-8      	; 0x2250 <Dio_WriteChannel+0x1a8>
    2258:	80 95       	com	r24
    225a:	84 23       	and	r24, r20
    225c:	8c 93       	st	X, r24
		}
		break;
	}
}
    225e:	0f 90       	pop	r0
    2260:	0f 90       	pop	r0
    2262:	0f 90       	pop	r0
    2264:	0f 90       	pop	r0
    2266:	0f 90       	pop	r0
    2268:	cf 91       	pop	r28
    226a:	df 91       	pop	r29
    226c:	08 95       	ret

0000226e <Dio_WriteGroup>:
void Dio_WriteGroup(port_type port,u8 mask,u8 data)
{
    226e:	df 93       	push	r29
    2270:	cf 93       	push	r28
    2272:	00 d0       	rcall	.+0      	; 0x2274 <Dio_WriteGroup+0x6>
    2274:	00 d0       	rcall	.+0      	; 0x2276 <Dio_WriteGroup+0x8>
    2276:	0f 92       	push	r0
    2278:	cd b7       	in	r28, 0x3d	; 61
    227a:	de b7       	in	r29, 0x3e	; 62
    227c:	89 83       	std	Y+1, r24	; 0x01
    227e:	6a 83       	std	Y+2, r22	; 0x02
    2280:	4b 83       	std	Y+3, r20	; 0x03
	switch(port)
    2282:	89 81       	ldd	r24, Y+1	; 0x01
    2284:	28 2f       	mov	r18, r24
    2286:	30 e0       	ldi	r19, 0x00	; 0
    2288:	3d 83       	std	Y+5, r19	; 0x05
    228a:	2c 83       	std	Y+4, r18	; 0x04
    228c:	8c 81       	ldd	r24, Y+4	; 0x04
    228e:	9d 81       	ldd	r25, Y+5	; 0x05
    2290:	81 30       	cpi	r24, 0x01	; 1
    2292:	91 05       	cpc	r25, r1
    2294:	29 f1       	breq	.+74     	; 0x22e0 <Dio_WriteGroup+0x72>
    2296:	2c 81       	ldd	r18, Y+4	; 0x04
    2298:	3d 81       	ldd	r19, Y+5	; 0x05
    229a:	22 30       	cpi	r18, 0x02	; 2
    229c:	31 05       	cpc	r19, r1
    229e:	2c f4       	brge	.+10     	; 0x22aa <Dio_WriteGroup+0x3c>
    22a0:	8c 81       	ldd	r24, Y+4	; 0x04
    22a2:	9d 81       	ldd	r25, Y+5	; 0x05
    22a4:	00 97       	sbiw	r24, 0x00	; 0
    22a6:	61 f0       	breq	.+24     	; 0x22c0 <Dio_WriteGroup+0x52>
    22a8:	4a c0       	rjmp	.+148    	; 0x233e <Dio_WriteGroup+0xd0>
    22aa:	2c 81       	ldd	r18, Y+4	; 0x04
    22ac:	3d 81       	ldd	r19, Y+5	; 0x05
    22ae:	22 30       	cpi	r18, 0x02	; 2
    22b0:	31 05       	cpc	r19, r1
    22b2:	31 f1       	breq	.+76     	; 0x2300 <Dio_WriteGroup+0x92>
    22b4:	8c 81       	ldd	r24, Y+4	; 0x04
    22b6:	9d 81       	ldd	r25, Y+5	; 0x05
    22b8:	83 30       	cpi	r24, 0x03	; 3
    22ba:	91 05       	cpc	r25, r1
    22bc:	89 f1       	breq	.+98     	; 0x2320 <Dio_WriteGroup+0xb2>
    22be:	3f c0       	rjmp	.+126    	; 0x233e <Dio_WriteGroup+0xd0>
	{
	case DIO_PORTA:
		DIO_PORTA_REG = (DIO_PORTA_REG&~mask)|(data & mask);
    22c0:	ab e3       	ldi	r26, 0x3B	; 59
    22c2:	b0 e0       	ldi	r27, 0x00	; 0
    22c4:	eb e3       	ldi	r30, 0x3B	; 59
    22c6:	f0 e0       	ldi	r31, 0x00	; 0
    22c8:	80 81       	ld	r24, Z
    22ca:	98 2f       	mov	r25, r24
    22cc:	8a 81       	ldd	r24, Y+2	; 0x02
    22ce:	80 95       	com	r24
    22d0:	29 2f       	mov	r18, r25
    22d2:	28 23       	and	r18, r24
    22d4:	9b 81       	ldd	r25, Y+3	; 0x03
    22d6:	8a 81       	ldd	r24, Y+2	; 0x02
    22d8:	89 23       	and	r24, r25
    22da:	82 2b       	or	r24, r18
    22dc:	8c 93       	st	X, r24
    22de:	2f c0       	rjmp	.+94     	; 0x233e <Dio_WriteGroup+0xd0>
		break;

	case DIO_PORTB:
		DIO_PORTB_REG = (DIO_PORTA_REG&~mask)|(data & mask);
    22e0:	a8 e3       	ldi	r26, 0x38	; 56
    22e2:	b0 e0       	ldi	r27, 0x00	; 0
    22e4:	eb e3       	ldi	r30, 0x3B	; 59
    22e6:	f0 e0       	ldi	r31, 0x00	; 0
    22e8:	80 81       	ld	r24, Z
    22ea:	98 2f       	mov	r25, r24
    22ec:	8a 81       	ldd	r24, Y+2	; 0x02
    22ee:	80 95       	com	r24
    22f0:	29 2f       	mov	r18, r25
    22f2:	28 23       	and	r18, r24
    22f4:	9b 81       	ldd	r25, Y+3	; 0x03
    22f6:	8a 81       	ldd	r24, Y+2	; 0x02
    22f8:	89 23       	and	r24, r25
    22fa:	82 2b       	or	r24, r18
    22fc:	8c 93       	st	X, r24
    22fe:	1f c0       	rjmp	.+62     	; 0x233e <Dio_WriteGroup+0xd0>
		break;

	case DIO_PORTC:
		DIO_PORTC_REG = (DIO_PORTA_REG&~mask)|(data & mask);
    2300:	a5 e3       	ldi	r26, 0x35	; 53
    2302:	b0 e0       	ldi	r27, 0x00	; 0
    2304:	eb e3       	ldi	r30, 0x3B	; 59
    2306:	f0 e0       	ldi	r31, 0x00	; 0
    2308:	80 81       	ld	r24, Z
    230a:	98 2f       	mov	r25, r24
    230c:	8a 81       	ldd	r24, Y+2	; 0x02
    230e:	80 95       	com	r24
    2310:	29 2f       	mov	r18, r25
    2312:	28 23       	and	r18, r24
    2314:	9b 81       	ldd	r25, Y+3	; 0x03
    2316:	8a 81       	ldd	r24, Y+2	; 0x02
    2318:	89 23       	and	r24, r25
    231a:	82 2b       	or	r24, r18
    231c:	8c 93       	st	X, r24
    231e:	0f c0       	rjmp	.+30     	; 0x233e <Dio_WriteGroup+0xd0>
		break;

	case DIO_PORTD:
		DIO_PORTD_REG = (DIO_PORTA_REG&~mask)|(data & mask);
    2320:	a2 e3       	ldi	r26, 0x32	; 50
    2322:	b0 e0       	ldi	r27, 0x00	; 0
    2324:	eb e3       	ldi	r30, 0x3B	; 59
    2326:	f0 e0       	ldi	r31, 0x00	; 0
    2328:	80 81       	ld	r24, Z
    232a:	98 2f       	mov	r25, r24
    232c:	8a 81       	ldd	r24, Y+2	; 0x02
    232e:	80 95       	com	r24
    2330:	29 2f       	mov	r18, r25
    2332:	28 23       	and	r18, r24
    2334:	9b 81       	ldd	r25, Y+3	; 0x03
    2336:	8a 81       	ldd	r24, Y+2	; 0x02
    2338:	89 23       	and	r24, r25
    233a:	82 2b       	or	r24, r18
    233c:	8c 93       	st	X, r24
		break;
	}
}
    233e:	0f 90       	pop	r0
    2340:	0f 90       	pop	r0
    2342:	0f 90       	pop	r0
    2344:	0f 90       	pop	r0
    2346:	0f 90       	pop	r0
    2348:	cf 91       	pop	r28
    234a:	df 91       	pop	r29
    234c:	08 95       	ret

0000234e <Dio_TogglChannel>:
void Dio_TogglChannel(port_type port,pin_type pin)
{
    234e:	df 93       	push	r29
    2350:	cf 93       	push	r28
    2352:	00 d0       	rcall	.+0      	; 0x2354 <Dio_TogglChannel+0x6>
    2354:	00 d0       	rcall	.+0      	; 0x2356 <Dio_TogglChannel+0x8>
    2356:	cd b7       	in	r28, 0x3d	; 61
    2358:	de b7       	in	r29, 0x3e	; 62
    235a:	89 83       	std	Y+1, r24	; 0x01
    235c:	6a 83       	std	Y+2, r22	; 0x02
	switch (port)
    235e:	89 81       	ldd	r24, Y+1	; 0x01
    2360:	28 2f       	mov	r18, r24
    2362:	30 e0       	ldi	r19, 0x00	; 0
    2364:	3c 83       	std	Y+4, r19	; 0x04
    2366:	2b 83       	std	Y+3, r18	; 0x03
    2368:	8b 81       	ldd	r24, Y+3	; 0x03
    236a:	9c 81       	ldd	r25, Y+4	; 0x04
    236c:	81 30       	cpi	r24, 0x01	; 1
    236e:	91 05       	cpc	r25, r1
    2370:	49 f1       	breq	.+82     	; 0x23c4 <Dio_TogglChannel+0x76>
    2372:	2b 81       	ldd	r18, Y+3	; 0x03
    2374:	3c 81       	ldd	r19, Y+4	; 0x04
    2376:	22 30       	cpi	r18, 0x02	; 2
    2378:	31 05       	cpc	r19, r1
    237a:	2c f4       	brge	.+10     	; 0x2386 <Dio_TogglChannel+0x38>
    237c:	8b 81       	ldd	r24, Y+3	; 0x03
    237e:	9c 81       	ldd	r25, Y+4	; 0x04
    2380:	00 97       	sbiw	r24, 0x00	; 0
    2382:	61 f0       	breq	.+24     	; 0x239c <Dio_TogglChannel+0x4e>
    2384:	5a c0       	rjmp	.+180    	; 0x243a <Dio_TogglChannel+0xec>
    2386:	2b 81       	ldd	r18, Y+3	; 0x03
    2388:	3c 81       	ldd	r19, Y+4	; 0x04
    238a:	22 30       	cpi	r18, 0x02	; 2
    238c:	31 05       	cpc	r19, r1
    238e:	71 f1       	breq	.+92     	; 0x23ec <Dio_TogglChannel+0x9e>
    2390:	8b 81       	ldd	r24, Y+3	; 0x03
    2392:	9c 81       	ldd	r25, Y+4	; 0x04
    2394:	83 30       	cpi	r24, 0x03	; 3
    2396:	91 05       	cpc	r25, r1
    2398:	e9 f1       	breq	.+122    	; 0x2414 <Dio_TogglChannel+0xc6>
    239a:	4f c0       	rjmp	.+158    	; 0x243a <Dio_TogglChannel+0xec>
	{
	case DIO_PORTA:
		TOGGLE_BIT(DIO_PORTA_REG,pin);
    239c:	ab e3       	ldi	r26, 0x3B	; 59
    239e:	b0 e0       	ldi	r27, 0x00	; 0
    23a0:	eb e3       	ldi	r30, 0x3B	; 59
    23a2:	f0 e0       	ldi	r31, 0x00	; 0
    23a4:	80 81       	ld	r24, Z
    23a6:	48 2f       	mov	r20, r24
    23a8:	8a 81       	ldd	r24, Y+2	; 0x02
    23aa:	28 2f       	mov	r18, r24
    23ac:	30 e0       	ldi	r19, 0x00	; 0
    23ae:	81 e0       	ldi	r24, 0x01	; 1
    23b0:	90 e0       	ldi	r25, 0x00	; 0
    23b2:	02 2e       	mov	r0, r18
    23b4:	02 c0       	rjmp	.+4      	; 0x23ba <Dio_TogglChannel+0x6c>
    23b6:	88 0f       	add	r24, r24
    23b8:	99 1f       	adc	r25, r25
    23ba:	0a 94       	dec	r0
    23bc:	e2 f7       	brpl	.-8      	; 0x23b6 <Dio_TogglChannel+0x68>
    23be:	84 27       	eor	r24, r20
    23c0:	8c 93       	st	X, r24
    23c2:	3b c0       	rjmp	.+118    	; 0x243a <Dio_TogglChannel+0xec>
		break;

	case DIO_PORTB:
		TOGGLE_BIT(DIO_PORTB_REG,pin);
    23c4:	a8 e3       	ldi	r26, 0x38	; 56
    23c6:	b0 e0       	ldi	r27, 0x00	; 0
    23c8:	e8 e3       	ldi	r30, 0x38	; 56
    23ca:	f0 e0       	ldi	r31, 0x00	; 0
    23cc:	80 81       	ld	r24, Z
    23ce:	48 2f       	mov	r20, r24
    23d0:	8a 81       	ldd	r24, Y+2	; 0x02
    23d2:	28 2f       	mov	r18, r24
    23d4:	30 e0       	ldi	r19, 0x00	; 0
    23d6:	81 e0       	ldi	r24, 0x01	; 1
    23d8:	90 e0       	ldi	r25, 0x00	; 0
    23da:	02 2e       	mov	r0, r18
    23dc:	02 c0       	rjmp	.+4      	; 0x23e2 <Dio_TogglChannel+0x94>
    23de:	88 0f       	add	r24, r24
    23e0:	99 1f       	adc	r25, r25
    23e2:	0a 94       	dec	r0
    23e4:	e2 f7       	brpl	.-8      	; 0x23de <Dio_TogglChannel+0x90>
    23e6:	84 27       	eor	r24, r20
    23e8:	8c 93       	st	X, r24
    23ea:	27 c0       	rjmp	.+78     	; 0x243a <Dio_TogglChannel+0xec>
		break;

	case DIO_PORTC:
		TOGGLE_BIT(DIO_PORTC_REG,pin);
    23ec:	a5 e3       	ldi	r26, 0x35	; 53
    23ee:	b0 e0       	ldi	r27, 0x00	; 0
    23f0:	e5 e3       	ldi	r30, 0x35	; 53
    23f2:	f0 e0       	ldi	r31, 0x00	; 0
    23f4:	80 81       	ld	r24, Z
    23f6:	48 2f       	mov	r20, r24
    23f8:	8a 81       	ldd	r24, Y+2	; 0x02
    23fa:	28 2f       	mov	r18, r24
    23fc:	30 e0       	ldi	r19, 0x00	; 0
    23fe:	81 e0       	ldi	r24, 0x01	; 1
    2400:	90 e0       	ldi	r25, 0x00	; 0
    2402:	02 2e       	mov	r0, r18
    2404:	02 c0       	rjmp	.+4      	; 0x240a <Dio_TogglChannel+0xbc>
    2406:	88 0f       	add	r24, r24
    2408:	99 1f       	adc	r25, r25
    240a:	0a 94       	dec	r0
    240c:	e2 f7       	brpl	.-8      	; 0x2406 <Dio_TogglChannel+0xb8>
    240e:	84 27       	eor	r24, r20
    2410:	8c 93       	st	X, r24
    2412:	13 c0       	rjmp	.+38     	; 0x243a <Dio_TogglChannel+0xec>
		break;

	case DIO_PORTD:
		TOGGLE_BIT(DIO_PORTD_REG,pin);
    2414:	a2 e3       	ldi	r26, 0x32	; 50
    2416:	b0 e0       	ldi	r27, 0x00	; 0
    2418:	e2 e3       	ldi	r30, 0x32	; 50
    241a:	f0 e0       	ldi	r31, 0x00	; 0
    241c:	80 81       	ld	r24, Z
    241e:	48 2f       	mov	r20, r24
    2420:	8a 81       	ldd	r24, Y+2	; 0x02
    2422:	28 2f       	mov	r18, r24
    2424:	30 e0       	ldi	r19, 0x00	; 0
    2426:	81 e0       	ldi	r24, 0x01	; 1
    2428:	90 e0       	ldi	r25, 0x00	; 0
    242a:	02 2e       	mov	r0, r18
    242c:	02 c0       	rjmp	.+4      	; 0x2432 <Dio_TogglChannel+0xe4>
    242e:	88 0f       	add	r24, r24
    2430:	99 1f       	adc	r25, r25
    2432:	0a 94       	dec	r0
    2434:	e2 f7       	brpl	.-8      	; 0x242e <Dio_TogglChannel+0xe0>
    2436:	84 27       	eor	r24, r20
    2438:	8c 93       	st	X, r24
		break;
	}
}
    243a:	0f 90       	pop	r0
    243c:	0f 90       	pop	r0
    243e:	0f 90       	pop	r0
    2440:	0f 90       	pop	r0
    2442:	cf 91       	pop	r28
    2444:	df 91       	pop	r29
    2446:	08 95       	ret

00002448 <Dio_ReadChannel>:
level_type Dio_ReadChannel(port_type port,pin_type pin)
{
    2448:	df 93       	push	r29
    244a:	cf 93       	push	r28
    244c:	00 d0       	rcall	.+0      	; 0x244e <Dio_ReadChannel+0x6>
    244e:	00 d0       	rcall	.+0      	; 0x2450 <Dio_ReadChannel+0x8>
    2450:	0f 92       	push	r0
    2452:	cd b7       	in	r28, 0x3d	; 61
    2454:	de b7       	in	r29, 0x3e	; 62
    2456:	8a 83       	std	Y+2, r24	; 0x02
    2458:	6b 83       	std	Y+3, r22	; 0x03
	level_type result = STD_LOW;
    245a:	19 82       	std	Y+1, r1	; 0x01
	switch (port)
    245c:	8a 81       	ldd	r24, Y+2	; 0x02
    245e:	28 2f       	mov	r18, r24
    2460:	30 e0       	ldi	r19, 0x00	; 0
    2462:	3d 83       	std	Y+5, r19	; 0x05
    2464:	2c 83       	std	Y+4, r18	; 0x04
    2466:	4c 81       	ldd	r20, Y+4	; 0x04
    2468:	5d 81       	ldd	r21, Y+5	; 0x05
    246a:	41 30       	cpi	r20, 0x01	; 1
    246c:	51 05       	cpc	r21, r1
    246e:	79 f1       	breq	.+94     	; 0x24ce <Dio_ReadChannel+0x86>
    2470:	8c 81       	ldd	r24, Y+4	; 0x04
    2472:	9d 81       	ldd	r25, Y+5	; 0x05
    2474:	82 30       	cpi	r24, 0x02	; 2
    2476:	91 05       	cpc	r25, r1
    2478:	34 f4       	brge	.+12     	; 0x2486 <Dio_ReadChannel+0x3e>
    247a:	2c 81       	ldd	r18, Y+4	; 0x04
    247c:	3d 81       	ldd	r19, Y+5	; 0x05
    247e:	21 15       	cp	r18, r1
    2480:	31 05       	cpc	r19, r1
    2482:	69 f0       	breq	.+26     	; 0x249e <Dio_ReadChannel+0x56>
    2484:	6b c0       	rjmp	.+214    	; 0x255c <Dio_ReadChannel+0x114>
    2486:	4c 81       	ldd	r20, Y+4	; 0x04
    2488:	5d 81       	ldd	r21, Y+5	; 0x05
    248a:	42 30       	cpi	r20, 0x02	; 2
    248c:	51 05       	cpc	r21, r1
    248e:	b9 f1       	breq	.+110    	; 0x24fe <Dio_ReadChannel+0xb6>
    2490:	8c 81       	ldd	r24, Y+4	; 0x04
    2492:	9d 81       	ldd	r25, Y+5	; 0x05
    2494:	83 30       	cpi	r24, 0x03	; 3
    2496:	91 05       	cpc	r25, r1
    2498:	09 f4       	brne	.+2      	; 0x249c <Dio_ReadChannel+0x54>
    249a:	49 c0       	rjmp	.+146    	; 0x252e <Dio_ReadChannel+0xe6>
    249c:	5f c0       	rjmp	.+190    	; 0x255c <Dio_ReadChannel+0x114>
	{
	case DIO_PORTA:
		if CHK_BIT(DIO_PINA_REG,pin)
    249e:	e9 e3       	ldi	r30, 0x39	; 57
    24a0:	f0 e0       	ldi	r31, 0x00	; 0
    24a2:	80 81       	ld	r24, Z
    24a4:	28 2f       	mov	r18, r24
    24a6:	30 e0       	ldi	r19, 0x00	; 0
    24a8:	8b 81       	ldd	r24, Y+3	; 0x03
    24aa:	88 2f       	mov	r24, r24
    24ac:	90 e0       	ldi	r25, 0x00	; 0
    24ae:	a9 01       	movw	r20, r18
    24b0:	02 c0       	rjmp	.+4      	; 0x24b6 <Dio_ReadChannel+0x6e>
    24b2:	55 95       	asr	r21
    24b4:	47 95       	ror	r20
    24b6:	8a 95       	dec	r24
    24b8:	e2 f7       	brpl	.-8      	; 0x24b2 <Dio_ReadChannel+0x6a>
    24ba:	ca 01       	movw	r24, r20
    24bc:	81 70       	andi	r24, 0x01	; 1
    24be:	90 70       	andi	r25, 0x00	; 0
    24c0:	88 23       	and	r24, r24
    24c2:	19 f0       	breq	.+6      	; 0x24ca <Dio_ReadChannel+0x82>
		{
			result = STD_HIGH;
    24c4:	81 e0       	ldi	r24, 0x01	; 1
    24c6:	89 83       	std	Y+1, r24	; 0x01
    24c8:	49 c0       	rjmp	.+146    	; 0x255c <Dio_ReadChannel+0x114>
		}
		else
		{
			result = STD_LOW;
    24ca:	19 82       	std	Y+1, r1	; 0x01
    24cc:	47 c0       	rjmp	.+142    	; 0x255c <Dio_ReadChannel+0x114>
		}
		break;
	case DIO_PORTB:
		if CHK_BIT(DIO_PINB_REG,pin)
    24ce:	e6 e3       	ldi	r30, 0x36	; 54
    24d0:	f0 e0       	ldi	r31, 0x00	; 0
    24d2:	80 81       	ld	r24, Z
    24d4:	28 2f       	mov	r18, r24
    24d6:	30 e0       	ldi	r19, 0x00	; 0
    24d8:	8b 81       	ldd	r24, Y+3	; 0x03
    24da:	88 2f       	mov	r24, r24
    24dc:	90 e0       	ldi	r25, 0x00	; 0
    24de:	a9 01       	movw	r20, r18
    24e0:	02 c0       	rjmp	.+4      	; 0x24e6 <Dio_ReadChannel+0x9e>
    24e2:	55 95       	asr	r21
    24e4:	47 95       	ror	r20
    24e6:	8a 95       	dec	r24
    24e8:	e2 f7       	brpl	.-8      	; 0x24e2 <Dio_ReadChannel+0x9a>
    24ea:	ca 01       	movw	r24, r20
    24ec:	81 70       	andi	r24, 0x01	; 1
    24ee:	90 70       	andi	r25, 0x00	; 0
    24f0:	88 23       	and	r24, r24
    24f2:	19 f0       	breq	.+6      	; 0x24fa <Dio_ReadChannel+0xb2>
		{
			result = STD_HIGH;
    24f4:	81 e0       	ldi	r24, 0x01	; 1
    24f6:	89 83       	std	Y+1, r24	; 0x01
    24f8:	31 c0       	rjmp	.+98     	; 0x255c <Dio_ReadChannel+0x114>
		}
		else
		{
			result = STD_LOW;
    24fa:	19 82       	std	Y+1, r1	; 0x01
    24fc:	2f c0       	rjmp	.+94     	; 0x255c <Dio_ReadChannel+0x114>
		}
		break;
	case DIO_PORTC:
		if CHK_BIT(DIO_PINC_REG,pin)
    24fe:	e3 e3       	ldi	r30, 0x33	; 51
    2500:	f0 e0       	ldi	r31, 0x00	; 0
    2502:	80 81       	ld	r24, Z
    2504:	28 2f       	mov	r18, r24
    2506:	30 e0       	ldi	r19, 0x00	; 0
    2508:	8b 81       	ldd	r24, Y+3	; 0x03
    250a:	88 2f       	mov	r24, r24
    250c:	90 e0       	ldi	r25, 0x00	; 0
    250e:	a9 01       	movw	r20, r18
    2510:	02 c0       	rjmp	.+4      	; 0x2516 <Dio_ReadChannel+0xce>
    2512:	55 95       	asr	r21
    2514:	47 95       	ror	r20
    2516:	8a 95       	dec	r24
    2518:	e2 f7       	brpl	.-8      	; 0x2512 <Dio_ReadChannel+0xca>
    251a:	ca 01       	movw	r24, r20
    251c:	81 70       	andi	r24, 0x01	; 1
    251e:	90 70       	andi	r25, 0x00	; 0
    2520:	88 23       	and	r24, r24
    2522:	19 f0       	breq	.+6      	; 0x252a <Dio_ReadChannel+0xe2>
		{
			result = STD_HIGH;
    2524:	81 e0       	ldi	r24, 0x01	; 1
    2526:	89 83       	std	Y+1, r24	; 0x01
    2528:	19 c0       	rjmp	.+50     	; 0x255c <Dio_ReadChannel+0x114>
		}
		else
		{
			result = STD_LOW;
    252a:	19 82       	std	Y+1, r1	; 0x01
    252c:	17 c0       	rjmp	.+46     	; 0x255c <Dio_ReadChannel+0x114>
		}
		break;
	case DIO_PORTD:
		if CHK_BIT(DIO_PIND_REG,pin)
    252e:	e0 e3       	ldi	r30, 0x30	; 48
    2530:	f0 e0       	ldi	r31, 0x00	; 0
    2532:	80 81       	ld	r24, Z
    2534:	28 2f       	mov	r18, r24
    2536:	30 e0       	ldi	r19, 0x00	; 0
    2538:	8b 81       	ldd	r24, Y+3	; 0x03
    253a:	88 2f       	mov	r24, r24
    253c:	90 e0       	ldi	r25, 0x00	; 0
    253e:	a9 01       	movw	r20, r18
    2540:	02 c0       	rjmp	.+4      	; 0x2546 <Dio_ReadChannel+0xfe>
    2542:	55 95       	asr	r21
    2544:	47 95       	ror	r20
    2546:	8a 95       	dec	r24
    2548:	e2 f7       	brpl	.-8      	; 0x2542 <Dio_ReadChannel+0xfa>
    254a:	ca 01       	movw	r24, r20
    254c:	81 70       	andi	r24, 0x01	; 1
    254e:	90 70       	andi	r25, 0x00	; 0
    2550:	88 23       	and	r24, r24
    2552:	19 f0       	breq	.+6      	; 0x255a <Dio_ReadChannel+0x112>
		{
			result = STD_HIGH;
    2554:	81 e0       	ldi	r24, 0x01	; 1
    2556:	89 83       	std	Y+1, r24	; 0x01
    2558:	01 c0       	rjmp	.+2      	; 0x255c <Dio_ReadChannel+0x114>
		}
		else
		{
			result = STD_LOW;
    255a:	19 82       	std	Y+1, r1	; 0x01
		}
		break;
	}
	return result;
    255c:	89 81       	ldd	r24, Y+1	; 0x01
}
    255e:	0f 90       	pop	r0
    2560:	0f 90       	pop	r0
    2562:	0f 90       	pop	r0
    2564:	0f 90       	pop	r0
    2566:	0f 90       	pop	r0
    2568:	cf 91       	pop	r28
    256a:	df 91       	pop	r29
    256c:	08 95       	ret

0000256e <adcInit>:
 * Author	:  Eng_Fawzi
 ********************************/
#include "Adc.h"

void adcInit(void)
{
    256e:	df 93       	push	r29
    2570:	cf 93       	push	r28
    2572:	cd b7       	in	r28, 0x3d	; 61
    2574:	de b7       	in	r29, 0x3e	; 62
	ADC_ADMUX_REG|=(AVCC5V_REF<<6);  /*	AVCC aas Vref	*/
    2576:	a7 e2       	ldi	r26, 0x27	; 39
    2578:	b0 e0       	ldi	r27, 0x00	; 0
    257a:	e7 e2       	ldi	r30, 0x27	; 39
    257c:	f0 e0       	ldi	r31, 0x00	; 0
    257e:	80 81       	ld	r24, Z
    2580:	80 64       	ori	r24, 0x40	; 64
    2582:	8c 93       	st	X, r24
	ADC_ADCSRA_REG=(ADC_ENABLE)|(ADCPS_128);
    2584:	e6 e2       	ldi	r30, 0x26	; 38
    2586:	f0 e0       	ldi	r31, 0x00	; 0
    2588:	87 e8       	ldi	r24, 0x87	; 135
    258a:	80 83       	st	Z, r24
}
    258c:	cf 91       	pop	r28
    258e:	df 91       	pop	r29
    2590:	08 95       	ret

00002592 <adcRead>:
u16 adcRead(u8 chnlNo)
{
    2592:	df 93       	push	r29
    2594:	cf 93       	push	r28
    2596:	00 d0       	rcall	.+0      	; 0x2598 <adcRead+0x6>
    2598:	0f 92       	push	r0
    259a:	cd b7       	in	r28, 0x3d	; 61
    259c:	de b7       	in	r29, 0x3e	; 62
    259e:	8b 83       	std	Y+3, r24	; 0x03
    u16 result;
    ADC_ADMUX_REG = (ADC_ADMUX_REG & 0xF8)|(chnlNo);
    25a0:	a7 e2       	ldi	r26, 0x27	; 39
    25a2:	b0 e0       	ldi	r27, 0x00	; 0
    25a4:	e7 e2       	ldi	r30, 0x27	; 39
    25a6:	f0 e0       	ldi	r31, 0x00	; 0
    25a8:	80 81       	ld	r24, Z
    25aa:	98 2f       	mov	r25, r24
    25ac:	98 7f       	andi	r25, 0xF8	; 248
    25ae:	8b 81       	ldd	r24, Y+3	; 0x03
    25b0:	89 2b       	or	r24, r25
    25b2:	8c 93       	st	X, r24
    ADC_ADCSRA_REG|=(ADC_START_CONVERSION);
    25b4:	a6 e2       	ldi	r26, 0x26	; 38
    25b6:	b0 e0       	ldi	r27, 0x00	; 0
    25b8:	e6 e2       	ldi	r30, 0x26	; 38
    25ba:	f0 e0       	ldi	r31, 0x00	; 0
    25bc:	80 81       	ld	r24, Z
    25be:	80 64       	ori	r24, 0x40	; 64
    25c0:	8c 93       	st	X, r24
 	while(!(CHK_BIT(ADC_ADCSRA_REG,ADIF_BIT_NO)))
    25c2:	e6 e2       	ldi	r30, 0x26	; 38
    25c4:	f0 e0       	ldi	r31, 0x00	; 0
    25c6:	80 81       	ld	r24, Z
    25c8:	82 95       	swap	r24
    25ca:	8f 70       	andi	r24, 0x0F	; 15
    25cc:	88 2f       	mov	r24, r24
    25ce:	90 e0       	ldi	r25, 0x00	; 0
    25d0:	81 70       	andi	r24, 0x01	; 1
    25d2:	90 70       	andi	r25, 0x00	; 0
    25d4:	00 97       	sbiw	r24, 0x00	; 0
    25d6:	a9 f3       	breq	.-22     	; 0x25c2 <adcRead+0x30>
 		  {
 		  	  /*	Do Nothing	*/
 		  	  	  ;
 		  }
 	/*	Clear Interrupt Flag To Be Ready For Another Conversion	*/
 	 ADC_ADCSRA_REG|=(1<<ADIF_BIT_NO);
    25d8:	a6 e2       	ldi	r26, 0x26	; 38
    25da:	b0 e0       	ldi	r27, 0x00	; 0
    25dc:	e6 e2       	ldi	r30, 0x26	; 38
    25de:	f0 e0       	ldi	r31, 0x00	; 0
    25e0:	80 81       	ld	r24, Z
    25e2:	80 61       	ori	r24, 0x10	; 16
    25e4:	8c 93       	st	X, r24
    result=(ADC_ADCL_REG|(ADC_ADCH_REG<<8));
    25e6:	e4 e2       	ldi	r30, 0x24	; 36
    25e8:	f0 e0       	ldi	r31, 0x00	; 0
    25ea:	80 81       	ld	r24, Z
    25ec:	28 2f       	mov	r18, r24
    25ee:	30 e0       	ldi	r19, 0x00	; 0
    25f0:	e5 e2       	ldi	r30, 0x25	; 37
    25f2:	f0 e0       	ldi	r31, 0x00	; 0
    25f4:	80 81       	ld	r24, Z
    25f6:	88 2f       	mov	r24, r24
    25f8:	90 e0       	ldi	r25, 0x00	; 0
    25fa:	98 2f       	mov	r25, r24
    25fc:	88 27       	eor	r24, r24
    25fe:	82 2b       	or	r24, r18
    2600:	93 2b       	or	r25, r19
    2602:	9a 83       	std	Y+2, r25	; 0x02
    2604:	89 83       	std	Y+1, r24	; 0x01
 	return result;
    2606:	89 81       	ldd	r24, Y+1	; 0x01
    2608:	9a 81       	ldd	r25, Y+2	; 0x02
}
    260a:	0f 90       	pop	r0
    260c:	0f 90       	pop	r0
    260e:	0f 90       	pop	r0
    2610:	cf 91       	pop	r28
    2612:	df 91       	pop	r29
    2614:	08 95       	ret

00002616 <__udivmodqi4>:
    2616:	99 1b       	sub	r25, r25
    2618:	79 e0       	ldi	r23, 0x09	; 9
    261a:	04 c0       	rjmp	.+8      	; 0x2624 <__udivmodqi4_ep>

0000261c <__udivmodqi4_loop>:
    261c:	99 1f       	adc	r25, r25
    261e:	96 17       	cp	r25, r22
    2620:	08 f0       	brcs	.+2      	; 0x2624 <__udivmodqi4_ep>
    2622:	96 1b       	sub	r25, r22

00002624 <__udivmodqi4_ep>:
    2624:	88 1f       	adc	r24, r24
    2626:	7a 95       	dec	r23
    2628:	c9 f7       	brne	.-14     	; 0x261c <__udivmodqi4_loop>
    262a:	80 95       	com	r24
    262c:	08 95       	ret

0000262e <__udivmodhi4>:
    262e:	aa 1b       	sub	r26, r26
    2630:	bb 1b       	sub	r27, r27
    2632:	51 e1       	ldi	r21, 0x11	; 17
    2634:	07 c0       	rjmp	.+14     	; 0x2644 <__udivmodhi4_ep>

00002636 <__udivmodhi4_loop>:
    2636:	aa 1f       	adc	r26, r26
    2638:	bb 1f       	adc	r27, r27
    263a:	a6 17       	cp	r26, r22
    263c:	b7 07       	cpc	r27, r23
    263e:	10 f0       	brcs	.+4      	; 0x2644 <__udivmodhi4_ep>
    2640:	a6 1b       	sub	r26, r22
    2642:	b7 0b       	sbc	r27, r23

00002644 <__udivmodhi4_ep>:
    2644:	88 1f       	adc	r24, r24
    2646:	99 1f       	adc	r25, r25
    2648:	5a 95       	dec	r21
    264a:	a9 f7       	brne	.-22     	; 0x2636 <__udivmodhi4_loop>
    264c:	80 95       	com	r24
    264e:	90 95       	com	r25
    2650:	bc 01       	movw	r22, r24
    2652:	cd 01       	movw	r24, r26
    2654:	08 95       	ret

00002656 <__prologue_saves__>:
    2656:	2f 92       	push	r2
    2658:	3f 92       	push	r3
    265a:	4f 92       	push	r4
    265c:	5f 92       	push	r5
    265e:	6f 92       	push	r6
    2660:	7f 92       	push	r7
    2662:	8f 92       	push	r8
    2664:	9f 92       	push	r9
    2666:	af 92       	push	r10
    2668:	bf 92       	push	r11
    266a:	cf 92       	push	r12
    266c:	df 92       	push	r13
    266e:	ef 92       	push	r14
    2670:	ff 92       	push	r15
    2672:	0f 93       	push	r16
    2674:	1f 93       	push	r17
    2676:	cf 93       	push	r28
    2678:	df 93       	push	r29
    267a:	cd b7       	in	r28, 0x3d	; 61
    267c:	de b7       	in	r29, 0x3e	; 62
    267e:	ca 1b       	sub	r28, r26
    2680:	db 0b       	sbc	r29, r27
    2682:	0f b6       	in	r0, 0x3f	; 63
    2684:	f8 94       	cli
    2686:	de bf       	out	0x3e, r29	; 62
    2688:	0f be       	out	0x3f, r0	; 63
    268a:	cd bf       	out	0x3d, r28	; 61
    268c:	09 94       	ijmp

0000268e <__epilogue_restores__>:
    268e:	2a 88       	ldd	r2, Y+18	; 0x12
    2690:	39 88       	ldd	r3, Y+17	; 0x11
    2692:	48 88       	ldd	r4, Y+16	; 0x10
    2694:	5f 84       	ldd	r5, Y+15	; 0x0f
    2696:	6e 84       	ldd	r6, Y+14	; 0x0e
    2698:	7d 84       	ldd	r7, Y+13	; 0x0d
    269a:	8c 84       	ldd	r8, Y+12	; 0x0c
    269c:	9b 84       	ldd	r9, Y+11	; 0x0b
    269e:	aa 84       	ldd	r10, Y+10	; 0x0a
    26a0:	b9 84       	ldd	r11, Y+9	; 0x09
    26a2:	c8 84       	ldd	r12, Y+8	; 0x08
    26a4:	df 80       	ldd	r13, Y+7	; 0x07
    26a6:	ee 80       	ldd	r14, Y+6	; 0x06
    26a8:	fd 80       	ldd	r15, Y+5	; 0x05
    26aa:	0c 81       	ldd	r16, Y+4	; 0x04
    26ac:	1b 81       	ldd	r17, Y+3	; 0x03
    26ae:	aa 81       	ldd	r26, Y+2	; 0x02
    26b0:	b9 81       	ldd	r27, Y+1	; 0x01
    26b2:	ce 0f       	add	r28, r30
    26b4:	d1 1d       	adc	r29, r1
    26b6:	0f b6       	in	r0, 0x3f	; 63
    26b8:	f8 94       	cli
    26ba:	de bf       	out	0x3e, r29	; 62
    26bc:	0f be       	out	0x3f, r0	; 63
    26be:	cd bf       	out	0x3d, r28	; 61
    26c0:	ed 01       	movw	r28, r26
    26c2:	08 95       	ret

000026c4 <_exit>:
    26c4:	f8 94       	cli

000026c6 <__stop_program>:
    26c6:	ff cf       	rjmp	.-2      	; 0x26c6 <__stop_program>
