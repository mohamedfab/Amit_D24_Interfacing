
Amit_D24_Interfacing.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000016b6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000148  00800060  000016b6  0000172a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         0000264c  00000000  00000000  00001874  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00001969  00000000  00000000  00003ec0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  00005829  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000197  00000000  00000000  00005969  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001b11  00000000  00000000  00005b00  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ebc  00000000  00000000  00007611  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e5b  00000000  00000000  000084cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  00009328  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002b1  00000000  00000000  00009488  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000836  00000000  00000000  00009739  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00009f6f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 eb       	ldi	r30, 0xB6	; 182
      68:	f6 e1       	ldi	r31, 0x16	; 22
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 3a       	cpi	r26, 0xA8	; 168
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 03 06 	call	0xc06	; 0xc06 <main>
      7a:	0c 94 59 0b 	jmp	0x16b2	; 0x16b2 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 11 03 	call	0x622	; 0x622 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 41 03 	call	0x682	; 0x682 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 41 03 	call	0x682	; 0x682 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 22 0b 	jmp	0x1644	; 0x1644 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 3e 0b 	jmp	0x167c	; 0x167c <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 2e 0b 	jmp	0x165c	; 0x165c <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 32 05 	call	0xa64	; 0xa64 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 32 05 	call	0xa64	; 0xa64 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 5d 04 	call	0x8ba	; 0x8ba <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 4a 0b 	jmp	0x1694	; 0x1694 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 2e 0b 	jmp	0x165c	; 0x165c <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 32 05 	call	0xa64	; 0xa64 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 32 05 	call	0xa64	; 0xa64 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 5d 04 	call	0x8ba	; 0x8ba <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 4a 0b 	jmp	0x1694	; 0x1694 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 22 0b 	jmp	0x1644	; 0x1644 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 32 05 	call	0xa64	; 0xa64 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 32 05 	call	0xa64	; 0xa64 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 5d 04 	call	0x8ba	; 0x8ba <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 3e 0b 	jmp	0x167c	; 0x167c <__epilogue_restores__>

00000622 <__gesf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 2e 0b 	jmp	0x165c	; 0x165c <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 32 05 	call	0xa64	; 0xa64 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 32 05 	call	0xa64	; 0xa64 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gesf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gesf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 aa 05 	call	0xb54	; 0xb54 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gesf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 4a 0b 	jmp	0x1694	; 0x1694 <__epilogue_restores__+0x18>

00000682 <__fixsfsi>:
     682:	ac e0       	ldi	r26, 0x0C	; 12
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 32 0b 	jmp	0x1664	; 0x1664 <__prologue_saves__+0x20>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	ce 01       	movw	r24, r28
     698:	01 96       	adiw	r24, 0x01	; 1
     69a:	be 01       	movw	r22, r28
     69c:	6b 5f       	subi	r22, 0xFB	; 251
     69e:	7f 4f       	sbci	r23, 0xFF	; 255
     6a0:	0e 94 32 05 	call	0xa64	; 0xa64 <__unpack_f>
     6a4:	8d 81       	ldd	r24, Y+5	; 0x05
     6a6:	82 30       	cpi	r24, 0x02	; 2
     6a8:	61 f1       	breq	.+88     	; 0x702 <__fixsfsi+0x80>
     6aa:	82 30       	cpi	r24, 0x02	; 2
     6ac:	50 f1       	brcs	.+84     	; 0x702 <__fixsfsi+0x80>
     6ae:	84 30       	cpi	r24, 0x04	; 4
     6b0:	21 f4       	brne	.+8      	; 0x6ba <__fixsfsi+0x38>
     6b2:	8e 81       	ldd	r24, Y+6	; 0x06
     6b4:	88 23       	and	r24, r24
     6b6:	51 f1       	breq	.+84     	; 0x70c <__fixsfsi+0x8a>
     6b8:	2e c0       	rjmp	.+92     	; 0x716 <__fixsfsi+0x94>
     6ba:	2f 81       	ldd	r18, Y+7	; 0x07
     6bc:	38 85       	ldd	r19, Y+8	; 0x08
     6be:	37 fd       	sbrc	r19, 7
     6c0:	20 c0       	rjmp	.+64     	; 0x702 <__fixsfsi+0x80>
     6c2:	6e 81       	ldd	r22, Y+6	; 0x06
     6c4:	2f 31       	cpi	r18, 0x1F	; 31
     6c6:	31 05       	cpc	r19, r1
     6c8:	1c f0       	brlt	.+6      	; 0x6d0 <__fixsfsi+0x4e>
     6ca:	66 23       	and	r22, r22
     6cc:	f9 f0       	breq	.+62     	; 0x70c <__fixsfsi+0x8a>
     6ce:	23 c0       	rjmp	.+70     	; 0x716 <__fixsfsi+0x94>
     6d0:	8e e1       	ldi	r24, 0x1E	; 30
     6d2:	90 e0       	ldi	r25, 0x00	; 0
     6d4:	82 1b       	sub	r24, r18
     6d6:	93 0b       	sbc	r25, r19
     6d8:	29 85       	ldd	r18, Y+9	; 0x09
     6da:	3a 85       	ldd	r19, Y+10	; 0x0a
     6dc:	4b 85       	ldd	r20, Y+11	; 0x0b
     6de:	5c 85       	ldd	r21, Y+12	; 0x0c
     6e0:	04 c0       	rjmp	.+8      	; 0x6ea <__fixsfsi+0x68>
     6e2:	56 95       	lsr	r21
     6e4:	47 95       	ror	r20
     6e6:	37 95       	ror	r19
     6e8:	27 95       	ror	r18
     6ea:	8a 95       	dec	r24
     6ec:	d2 f7       	brpl	.-12     	; 0x6e2 <__fixsfsi+0x60>
     6ee:	66 23       	and	r22, r22
     6f0:	b1 f0       	breq	.+44     	; 0x71e <__fixsfsi+0x9c>
     6f2:	50 95       	com	r21
     6f4:	40 95       	com	r20
     6f6:	30 95       	com	r19
     6f8:	21 95       	neg	r18
     6fa:	3f 4f       	sbci	r19, 0xFF	; 255
     6fc:	4f 4f       	sbci	r20, 0xFF	; 255
     6fe:	5f 4f       	sbci	r21, 0xFF	; 255
     700:	0e c0       	rjmp	.+28     	; 0x71e <__fixsfsi+0x9c>
     702:	20 e0       	ldi	r18, 0x00	; 0
     704:	30 e0       	ldi	r19, 0x00	; 0
     706:	40 e0       	ldi	r20, 0x00	; 0
     708:	50 e0       	ldi	r21, 0x00	; 0
     70a:	09 c0       	rjmp	.+18     	; 0x71e <__fixsfsi+0x9c>
     70c:	2f ef       	ldi	r18, 0xFF	; 255
     70e:	3f ef       	ldi	r19, 0xFF	; 255
     710:	4f ef       	ldi	r20, 0xFF	; 255
     712:	5f e7       	ldi	r21, 0x7F	; 127
     714:	04 c0       	rjmp	.+8      	; 0x71e <__fixsfsi+0x9c>
     716:	20 e0       	ldi	r18, 0x00	; 0
     718:	30 e0       	ldi	r19, 0x00	; 0
     71a:	40 e0       	ldi	r20, 0x00	; 0
     71c:	50 e8       	ldi	r21, 0x80	; 128
     71e:	b9 01       	movw	r22, r18
     720:	ca 01       	movw	r24, r20
     722:	2c 96       	adiw	r28, 0x0c	; 12
     724:	e2 e0       	ldi	r30, 0x02	; 2
     726:	0c 94 4e 0b 	jmp	0x169c	; 0x169c <__epilogue_restores__+0x20>

0000072a <__floatunsisf>:
     72a:	a8 e0       	ldi	r26, 0x08	; 8
     72c:	b0 e0       	ldi	r27, 0x00	; 0
     72e:	eb e9       	ldi	r30, 0x9B	; 155
     730:	f3 e0       	ldi	r31, 0x03	; 3
     732:	0c 94 2a 0b 	jmp	0x1654	; 0x1654 <__prologue_saves__+0x10>
     736:	7b 01       	movw	r14, r22
     738:	8c 01       	movw	r16, r24
     73a:	61 15       	cp	r22, r1
     73c:	71 05       	cpc	r23, r1
     73e:	81 05       	cpc	r24, r1
     740:	91 05       	cpc	r25, r1
     742:	19 f4       	brne	.+6      	; 0x74a <__floatunsisf+0x20>
     744:	82 e0       	ldi	r24, 0x02	; 2
     746:	89 83       	std	Y+1, r24	; 0x01
     748:	60 c0       	rjmp	.+192    	; 0x80a <__floatunsisf+0xe0>
     74a:	83 e0       	ldi	r24, 0x03	; 3
     74c:	89 83       	std	Y+1, r24	; 0x01
     74e:	8e e1       	ldi	r24, 0x1E	; 30
     750:	c8 2e       	mov	r12, r24
     752:	d1 2c       	mov	r13, r1
     754:	dc 82       	std	Y+4, r13	; 0x04
     756:	cb 82       	std	Y+3, r12	; 0x03
     758:	ed 82       	std	Y+5, r14	; 0x05
     75a:	fe 82       	std	Y+6, r15	; 0x06
     75c:	0f 83       	std	Y+7, r16	; 0x07
     75e:	18 87       	std	Y+8, r17	; 0x08
     760:	c8 01       	movw	r24, r16
     762:	b7 01       	movw	r22, r14
     764:	0e 94 0e 04 	call	0x81c	; 0x81c <__clzsi2>
     768:	fc 01       	movw	r30, r24
     76a:	31 97       	sbiw	r30, 0x01	; 1
     76c:	f7 ff       	sbrs	r31, 7
     76e:	3b c0       	rjmp	.+118    	; 0x7e6 <__floatunsisf+0xbc>
     770:	22 27       	eor	r18, r18
     772:	33 27       	eor	r19, r19
     774:	2e 1b       	sub	r18, r30
     776:	3f 0b       	sbc	r19, r31
     778:	57 01       	movw	r10, r14
     77a:	68 01       	movw	r12, r16
     77c:	02 2e       	mov	r0, r18
     77e:	04 c0       	rjmp	.+8      	; 0x788 <__floatunsisf+0x5e>
     780:	d6 94       	lsr	r13
     782:	c7 94       	ror	r12
     784:	b7 94       	ror	r11
     786:	a7 94       	ror	r10
     788:	0a 94       	dec	r0
     78a:	d2 f7       	brpl	.-12     	; 0x780 <__floatunsisf+0x56>
     78c:	40 e0       	ldi	r20, 0x00	; 0
     78e:	50 e0       	ldi	r21, 0x00	; 0
     790:	60 e0       	ldi	r22, 0x00	; 0
     792:	70 e0       	ldi	r23, 0x00	; 0
     794:	81 e0       	ldi	r24, 0x01	; 1
     796:	90 e0       	ldi	r25, 0x00	; 0
     798:	a0 e0       	ldi	r26, 0x00	; 0
     79a:	b0 e0       	ldi	r27, 0x00	; 0
     79c:	04 c0       	rjmp	.+8      	; 0x7a6 <__floatunsisf+0x7c>
     79e:	88 0f       	add	r24, r24
     7a0:	99 1f       	adc	r25, r25
     7a2:	aa 1f       	adc	r26, r26
     7a4:	bb 1f       	adc	r27, r27
     7a6:	2a 95       	dec	r18
     7a8:	d2 f7       	brpl	.-12     	; 0x79e <__floatunsisf+0x74>
     7aa:	01 97       	sbiw	r24, 0x01	; 1
     7ac:	a1 09       	sbc	r26, r1
     7ae:	b1 09       	sbc	r27, r1
     7b0:	8e 21       	and	r24, r14
     7b2:	9f 21       	and	r25, r15
     7b4:	a0 23       	and	r26, r16
     7b6:	b1 23       	and	r27, r17
     7b8:	00 97       	sbiw	r24, 0x00	; 0
     7ba:	a1 05       	cpc	r26, r1
     7bc:	b1 05       	cpc	r27, r1
     7be:	21 f0       	breq	.+8      	; 0x7c8 <__floatunsisf+0x9e>
     7c0:	41 e0       	ldi	r20, 0x01	; 1
     7c2:	50 e0       	ldi	r21, 0x00	; 0
     7c4:	60 e0       	ldi	r22, 0x00	; 0
     7c6:	70 e0       	ldi	r23, 0x00	; 0
     7c8:	4a 29       	or	r20, r10
     7ca:	5b 29       	or	r21, r11
     7cc:	6c 29       	or	r22, r12
     7ce:	7d 29       	or	r23, r13
     7d0:	4d 83       	std	Y+5, r20	; 0x05
     7d2:	5e 83       	std	Y+6, r21	; 0x06
     7d4:	6f 83       	std	Y+7, r22	; 0x07
     7d6:	78 87       	std	Y+8, r23	; 0x08
     7d8:	8e e1       	ldi	r24, 0x1E	; 30
     7da:	90 e0       	ldi	r25, 0x00	; 0
     7dc:	8e 1b       	sub	r24, r30
     7de:	9f 0b       	sbc	r25, r31
     7e0:	9c 83       	std	Y+4, r25	; 0x04
     7e2:	8b 83       	std	Y+3, r24	; 0x03
     7e4:	12 c0       	rjmp	.+36     	; 0x80a <__floatunsisf+0xe0>
     7e6:	30 97       	sbiw	r30, 0x00	; 0
     7e8:	81 f0       	breq	.+32     	; 0x80a <__floatunsisf+0xe0>
     7ea:	0e 2e       	mov	r0, r30
     7ec:	04 c0       	rjmp	.+8      	; 0x7f6 <__floatunsisf+0xcc>
     7ee:	ee 0c       	add	r14, r14
     7f0:	ff 1c       	adc	r15, r15
     7f2:	00 1f       	adc	r16, r16
     7f4:	11 1f       	adc	r17, r17
     7f6:	0a 94       	dec	r0
     7f8:	d2 f7       	brpl	.-12     	; 0x7ee <__floatunsisf+0xc4>
     7fa:	ed 82       	std	Y+5, r14	; 0x05
     7fc:	fe 82       	std	Y+6, r15	; 0x06
     7fe:	0f 83       	std	Y+7, r16	; 0x07
     800:	18 87       	std	Y+8, r17	; 0x08
     802:	ce 1a       	sub	r12, r30
     804:	df 0a       	sbc	r13, r31
     806:	dc 82       	std	Y+4, r13	; 0x04
     808:	cb 82       	std	Y+3, r12	; 0x03
     80a:	1a 82       	std	Y+2, r1	; 0x02
     80c:	ce 01       	movw	r24, r28
     80e:	01 96       	adiw	r24, 0x01	; 1
     810:	0e 94 5d 04 	call	0x8ba	; 0x8ba <__pack_f>
     814:	28 96       	adiw	r28, 0x08	; 8
     816:	ea e0       	ldi	r30, 0x0A	; 10
     818:	0c 94 46 0b 	jmp	0x168c	; 0x168c <__epilogue_restores__+0x10>

0000081c <__clzsi2>:
     81c:	ef 92       	push	r14
     81e:	ff 92       	push	r15
     820:	0f 93       	push	r16
     822:	1f 93       	push	r17
     824:	7b 01       	movw	r14, r22
     826:	8c 01       	movw	r16, r24
     828:	80 e0       	ldi	r24, 0x00	; 0
     82a:	e8 16       	cp	r14, r24
     82c:	80 e0       	ldi	r24, 0x00	; 0
     82e:	f8 06       	cpc	r15, r24
     830:	81 e0       	ldi	r24, 0x01	; 1
     832:	08 07       	cpc	r16, r24
     834:	80 e0       	ldi	r24, 0x00	; 0
     836:	18 07       	cpc	r17, r24
     838:	88 f4       	brcc	.+34     	; 0x85c <__clzsi2+0x40>
     83a:	8f ef       	ldi	r24, 0xFF	; 255
     83c:	e8 16       	cp	r14, r24
     83e:	f1 04       	cpc	r15, r1
     840:	01 05       	cpc	r16, r1
     842:	11 05       	cpc	r17, r1
     844:	31 f0       	breq	.+12     	; 0x852 <__clzsi2+0x36>
     846:	28 f0       	brcs	.+10     	; 0x852 <__clzsi2+0x36>
     848:	88 e0       	ldi	r24, 0x08	; 8
     84a:	90 e0       	ldi	r25, 0x00	; 0
     84c:	a0 e0       	ldi	r26, 0x00	; 0
     84e:	b0 e0       	ldi	r27, 0x00	; 0
     850:	17 c0       	rjmp	.+46     	; 0x880 <__stack+0x21>
     852:	80 e0       	ldi	r24, 0x00	; 0
     854:	90 e0       	ldi	r25, 0x00	; 0
     856:	a0 e0       	ldi	r26, 0x00	; 0
     858:	b0 e0       	ldi	r27, 0x00	; 0
     85a:	12 c0       	rjmp	.+36     	; 0x880 <__stack+0x21>
     85c:	80 e0       	ldi	r24, 0x00	; 0
     85e:	e8 16       	cp	r14, r24
     860:	80 e0       	ldi	r24, 0x00	; 0
     862:	f8 06       	cpc	r15, r24
     864:	80 e0       	ldi	r24, 0x00	; 0
     866:	08 07       	cpc	r16, r24
     868:	81 e0       	ldi	r24, 0x01	; 1
     86a:	18 07       	cpc	r17, r24
     86c:	28 f0       	brcs	.+10     	; 0x878 <__stack+0x19>
     86e:	88 e1       	ldi	r24, 0x18	; 24
     870:	90 e0       	ldi	r25, 0x00	; 0
     872:	a0 e0       	ldi	r26, 0x00	; 0
     874:	b0 e0       	ldi	r27, 0x00	; 0
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	80 e1       	ldi	r24, 0x10	; 16
     87a:	90 e0       	ldi	r25, 0x00	; 0
     87c:	a0 e0       	ldi	r26, 0x00	; 0
     87e:	b0 e0       	ldi	r27, 0x00	; 0
     880:	20 e2       	ldi	r18, 0x20	; 32
     882:	30 e0       	ldi	r19, 0x00	; 0
     884:	40 e0       	ldi	r20, 0x00	; 0
     886:	50 e0       	ldi	r21, 0x00	; 0
     888:	28 1b       	sub	r18, r24
     88a:	39 0b       	sbc	r19, r25
     88c:	4a 0b       	sbc	r20, r26
     88e:	5b 0b       	sbc	r21, r27
     890:	04 c0       	rjmp	.+8      	; 0x89a <__stack+0x3b>
     892:	16 95       	lsr	r17
     894:	07 95       	ror	r16
     896:	f7 94       	ror	r15
     898:	e7 94       	ror	r14
     89a:	8a 95       	dec	r24
     89c:	d2 f7       	brpl	.-12     	; 0x892 <__stack+0x33>
     89e:	f7 01       	movw	r30, r14
     8a0:	e8 59       	subi	r30, 0x98	; 152
     8a2:	ff 4f       	sbci	r31, 0xFF	; 255
     8a4:	80 81       	ld	r24, Z
     8a6:	28 1b       	sub	r18, r24
     8a8:	31 09       	sbc	r19, r1
     8aa:	41 09       	sbc	r20, r1
     8ac:	51 09       	sbc	r21, r1
     8ae:	c9 01       	movw	r24, r18
     8b0:	1f 91       	pop	r17
     8b2:	0f 91       	pop	r16
     8b4:	ff 90       	pop	r15
     8b6:	ef 90       	pop	r14
     8b8:	08 95       	ret

000008ba <__pack_f>:
     8ba:	df 92       	push	r13
     8bc:	ef 92       	push	r14
     8be:	ff 92       	push	r15
     8c0:	0f 93       	push	r16
     8c2:	1f 93       	push	r17
     8c4:	fc 01       	movw	r30, r24
     8c6:	e4 80       	ldd	r14, Z+4	; 0x04
     8c8:	f5 80       	ldd	r15, Z+5	; 0x05
     8ca:	06 81       	ldd	r16, Z+6	; 0x06
     8cc:	17 81       	ldd	r17, Z+7	; 0x07
     8ce:	d1 80       	ldd	r13, Z+1	; 0x01
     8d0:	80 81       	ld	r24, Z
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	48 f4       	brcc	.+18     	; 0x8e8 <__pack_f+0x2e>
     8d6:	80 e0       	ldi	r24, 0x00	; 0
     8d8:	90 e0       	ldi	r25, 0x00	; 0
     8da:	a0 e1       	ldi	r26, 0x10	; 16
     8dc:	b0 e0       	ldi	r27, 0x00	; 0
     8de:	e8 2a       	or	r14, r24
     8e0:	f9 2a       	or	r15, r25
     8e2:	0a 2b       	or	r16, r26
     8e4:	1b 2b       	or	r17, r27
     8e6:	a5 c0       	rjmp	.+330    	; 0xa32 <__pack_f+0x178>
     8e8:	84 30       	cpi	r24, 0x04	; 4
     8ea:	09 f4       	brne	.+2      	; 0x8ee <__pack_f+0x34>
     8ec:	9f c0       	rjmp	.+318    	; 0xa2c <__pack_f+0x172>
     8ee:	82 30       	cpi	r24, 0x02	; 2
     8f0:	21 f4       	brne	.+8      	; 0x8fa <__pack_f+0x40>
     8f2:	ee 24       	eor	r14, r14
     8f4:	ff 24       	eor	r15, r15
     8f6:	87 01       	movw	r16, r14
     8f8:	05 c0       	rjmp	.+10     	; 0x904 <__pack_f+0x4a>
     8fa:	e1 14       	cp	r14, r1
     8fc:	f1 04       	cpc	r15, r1
     8fe:	01 05       	cpc	r16, r1
     900:	11 05       	cpc	r17, r1
     902:	19 f4       	brne	.+6      	; 0x90a <__pack_f+0x50>
     904:	e0 e0       	ldi	r30, 0x00	; 0
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	96 c0       	rjmp	.+300    	; 0xa36 <__pack_f+0x17c>
     90a:	62 81       	ldd	r22, Z+2	; 0x02
     90c:	73 81       	ldd	r23, Z+3	; 0x03
     90e:	9f ef       	ldi	r25, 0xFF	; 255
     910:	62 38       	cpi	r22, 0x82	; 130
     912:	79 07       	cpc	r23, r25
     914:	0c f0       	brlt	.+2      	; 0x918 <__pack_f+0x5e>
     916:	5b c0       	rjmp	.+182    	; 0x9ce <__pack_f+0x114>
     918:	22 e8       	ldi	r18, 0x82	; 130
     91a:	3f ef       	ldi	r19, 0xFF	; 255
     91c:	26 1b       	sub	r18, r22
     91e:	37 0b       	sbc	r19, r23
     920:	2a 31       	cpi	r18, 0x1A	; 26
     922:	31 05       	cpc	r19, r1
     924:	2c f0       	brlt	.+10     	; 0x930 <__pack_f+0x76>
     926:	20 e0       	ldi	r18, 0x00	; 0
     928:	30 e0       	ldi	r19, 0x00	; 0
     92a:	40 e0       	ldi	r20, 0x00	; 0
     92c:	50 e0       	ldi	r21, 0x00	; 0
     92e:	2a c0       	rjmp	.+84     	; 0x984 <__pack_f+0xca>
     930:	b8 01       	movw	r22, r16
     932:	a7 01       	movw	r20, r14
     934:	02 2e       	mov	r0, r18
     936:	04 c0       	rjmp	.+8      	; 0x940 <__pack_f+0x86>
     938:	76 95       	lsr	r23
     93a:	67 95       	ror	r22
     93c:	57 95       	ror	r21
     93e:	47 95       	ror	r20
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__pack_f+0x7e>
     944:	81 e0       	ldi	r24, 0x01	; 1
     946:	90 e0       	ldi	r25, 0x00	; 0
     948:	a0 e0       	ldi	r26, 0x00	; 0
     94a:	b0 e0       	ldi	r27, 0x00	; 0
     94c:	04 c0       	rjmp	.+8      	; 0x956 <__pack_f+0x9c>
     94e:	88 0f       	add	r24, r24
     950:	99 1f       	adc	r25, r25
     952:	aa 1f       	adc	r26, r26
     954:	bb 1f       	adc	r27, r27
     956:	2a 95       	dec	r18
     958:	d2 f7       	brpl	.-12     	; 0x94e <__pack_f+0x94>
     95a:	01 97       	sbiw	r24, 0x01	; 1
     95c:	a1 09       	sbc	r26, r1
     95e:	b1 09       	sbc	r27, r1
     960:	8e 21       	and	r24, r14
     962:	9f 21       	and	r25, r15
     964:	a0 23       	and	r26, r16
     966:	b1 23       	and	r27, r17
     968:	00 97       	sbiw	r24, 0x00	; 0
     96a:	a1 05       	cpc	r26, r1
     96c:	b1 05       	cpc	r27, r1
     96e:	21 f0       	breq	.+8      	; 0x978 <__pack_f+0xbe>
     970:	81 e0       	ldi	r24, 0x01	; 1
     972:	90 e0       	ldi	r25, 0x00	; 0
     974:	a0 e0       	ldi	r26, 0x00	; 0
     976:	b0 e0       	ldi	r27, 0x00	; 0
     978:	9a 01       	movw	r18, r20
     97a:	ab 01       	movw	r20, r22
     97c:	28 2b       	or	r18, r24
     97e:	39 2b       	or	r19, r25
     980:	4a 2b       	or	r20, r26
     982:	5b 2b       	or	r21, r27
     984:	da 01       	movw	r26, r20
     986:	c9 01       	movw	r24, r18
     988:	8f 77       	andi	r24, 0x7F	; 127
     98a:	90 70       	andi	r25, 0x00	; 0
     98c:	a0 70       	andi	r26, 0x00	; 0
     98e:	b0 70       	andi	r27, 0x00	; 0
     990:	80 34       	cpi	r24, 0x40	; 64
     992:	91 05       	cpc	r25, r1
     994:	a1 05       	cpc	r26, r1
     996:	b1 05       	cpc	r27, r1
     998:	39 f4       	brne	.+14     	; 0x9a8 <__pack_f+0xee>
     99a:	27 ff       	sbrs	r18, 7
     99c:	09 c0       	rjmp	.+18     	; 0x9b0 <__pack_f+0xf6>
     99e:	20 5c       	subi	r18, 0xC0	; 192
     9a0:	3f 4f       	sbci	r19, 0xFF	; 255
     9a2:	4f 4f       	sbci	r20, 0xFF	; 255
     9a4:	5f 4f       	sbci	r21, 0xFF	; 255
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__pack_f+0xf6>
     9a8:	21 5c       	subi	r18, 0xC1	; 193
     9aa:	3f 4f       	sbci	r19, 0xFF	; 255
     9ac:	4f 4f       	sbci	r20, 0xFF	; 255
     9ae:	5f 4f       	sbci	r21, 0xFF	; 255
     9b0:	e0 e0       	ldi	r30, 0x00	; 0
     9b2:	f0 e0       	ldi	r31, 0x00	; 0
     9b4:	20 30       	cpi	r18, 0x00	; 0
     9b6:	a0 e0       	ldi	r26, 0x00	; 0
     9b8:	3a 07       	cpc	r19, r26
     9ba:	a0 e0       	ldi	r26, 0x00	; 0
     9bc:	4a 07       	cpc	r20, r26
     9be:	a0 e4       	ldi	r26, 0x40	; 64
     9c0:	5a 07       	cpc	r21, r26
     9c2:	10 f0       	brcs	.+4      	; 0x9c8 <__pack_f+0x10e>
     9c4:	e1 e0       	ldi	r30, 0x01	; 1
     9c6:	f0 e0       	ldi	r31, 0x00	; 0
     9c8:	79 01       	movw	r14, r18
     9ca:	8a 01       	movw	r16, r20
     9cc:	27 c0       	rjmp	.+78     	; 0xa1c <__pack_f+0x162>
     9ce:	60 38       	cpi	r22, 0x80	; 128
     9d0:	71 05       	cpc	r23, r1
     9d2:	64 f5       	brge	.+88     	; 0xa2c <__pack_f+0x172>
     9d4:	fb 01       	movw	r30, r22
     9d6:	e1 58       	subi	r30, 0x81	; 129
     9d8:	ff 4f       	sbci	r31, 0xFF	; 255
     9da:	d8 01       	movw	r26, r16
     9dc:	c7 01       	movw	r24, r14
     9de:	8f 77       	andi	r24, 0x7F	; 127
     9e0:	90 70       	andi	r25, 0x00	; 0
     9e2:	a0 70       	andi	r26, 0x00	; 0
     9e4:	b0 70       	andi	r27, 0x00	; 0
     9e6:	80 34       	cpi	r24, 0x40	; 64
     9e8:	91 05       	cpc	r25, r1
     9ea:	a1 05       	cpc	r26, r1
     9ec:	b1 05       	cpc	r27, r1
     9ee:	39 f4       	brne	.+14     	; 0x9fe <__pack_f+0x144>
     9f0:	e7 fe       	sbrs	r14, 7
     9f2:	0d c0       	rjmp	.+26     	; 0xa0e <__pack_f+0x154>
     9f4:	80 e4       	ldi	r24, 0x40	; 64
     9f6:	90 e0       	ldi	r25, 0x00	; 0
     9f8:	a0 e0       	ldi	r26, 0x00	; 0
     9fa:	b0 e0       	ldi	r27, 0x00	; 0
     9fc:	04 c0       	rjmp	.+8      	; 0xa06 <__pack_f+0x14c>
     9fe:	8f e3       	ldi	r24, 0x3F	; 63
     a00:	90 e0       	ldi	r25, 0x00	; 0
     a02:	a0 e0       	ldi	r26, 0x00	; 0
     a04:	b0 e0       	ldi	r27, 0x00	; 0
     a06:	e8 0e       	add	r14, r24
     a08:	f9 1e       	adc	r15, r25
     a0a:	0a 1f       	adc	r16, r26
     a0c:	1b 1f       	adc	r17, r27
     a0e:	17 ff       	sbrs	r17, 7
     a10:	05 c0       	rjmp	.+10     	; 0xa1c <__pack_f+0x162>
     a12:	16 95       	lsr	r17
     a14:	07 95       	ror	r16
     a16:	f7 94       	ror	r15
     a18:	e7 94       	ror	r14
     a1a:	31 96       	adiw	r30, 0x01	; 1
     a1c:	87 e0       	ldi	r24, 0x07	; 7
     a1e:	16 95       	lsr	r17
     a20:	07 95       	ror	r16
     a22:	f7 94       	ror	r15
     a24:	e7 94       	ror	r14
     a26:	8a 95       	dec	r24
     a28:	d1 f7       	brne	.-12     	; 0xa1e <__pack_f+0x164>
     a2a:	05 c0       	rjmp	.+10     	; 0xa36 <__pack_f+0x17c>
     a2c:	ee 24       	eor	r14, r14
     a2e:	ff 24       	eor	r15, r15
     a30:	87 01       	movw	r16, r14
     a32:	ef ef       	ldi	r30, 0xFF	; 255
     a34:	f0 e0       	ldi	r31, 0x00	; 0
     a36:	6e 2f       	mov	r22, r30
     a38:	67 95       	ror	r22
     a3a:	66 27       	eor	r22, r22
     a3c:	67 95       	ror	r22
     a3e:	90 2f       	mov	r25, r16
     a40:	9f 77       	andi	r25, 0x7F	; 127
     a42:	d7 94       	ror	r13
     a44:	dd 24       	eor	r13, r13
     a46:	d7 94       	ror	r13
     a48:	8e 2f       	mov	r24, r30
     a4a:	86 95       	lsr	r24
     a4c:	49 2f       	mov	r20, r25
     a4e:	46 2b       	or	r20, r22
     a50:	58 2f       	mov	r21, r24
     a52:	5d 29       	or	r21, r13
     a54:	b7 01       	movw	r22, r14
     a56:	ca 01       	movw	r24, r20
     a58:	1f 91       	pop	r17
     a5a:	0f 91       	pop	r16
     a5c:	ff 90       	pop	r15
     a5e:	ef 90       	pop	r14
     a60:	df 90       	pop	r13
     a62:	08 95       	ret

00000a64 <__unpack_f>:
     a64:	fc 01       	movw	r30, r24
     a66:	db 01       	movw	r26, r22
     a68:	40 81       	ld	r20, Z
     a6a:	51 81       	ldd	r21, Z+1	; 0x01
     a6c:	22 81       	ldd	r18, Z+2	; 0x02
     a6e:	62 2f       	mov	r22, r18
     a70:	6f 77       	andi	r22, 0x7F	; 127
     a72:	70 e0       	ldi	r23, 0x00	; 0
     a74:	22 1f       	adc	r18, r18
     a76:	22 27       	eor	r18, r18
     a78:	22 1f       	adc	r18, r18
     a7a:	93 81       	ldd	r25, Z+3	; 0x03
     a7c:	89 2f       	mov	r24, r25
     a7e:	88 0f       	add	r24, r24
     a80:	82 2b       	or	r24, r18
     a82:	28 2f       	mov	r18, r24
     a84:	30 e0       	ldi	r19, 0x00	; 0
     a86:	99 1f       	adc	r25, r25
     a88:	99 27       	eor	r25, r25
     a8a:	99 1f       	adc	r25, r25
     a8c:	11 96       	adiw	r26, 0x01	; 1
     a8e:	9c 93       	st	X, r25
     a90:	11 97       	sbiw	r26, 0x01	; 1
     a92:	21 15       	cp	r18, r1
     a94:	31 05       	cpc	r19, r1
     a96:	a9 f5       	brne	.+106    	; 0xb02 <__unpack_f+0x9e>
     a98:	41 15       	cp	r20, r1
     a9a:	51 05       	cpc	r21, r1
     a9c:	61 05       	cpc	r22, r1
     a9e:	71 05       	cpc	r23, r1
     aa0:	11 f4       	brne	.+4      	; 0xaa6 <__unpack_f+0x42>
     aa2:	82 e0       	ldi	r24, 0x02	; 2
     aa4:	37 c0       	rjmp	.+110    	; 0xb14 <__unpack_f+0xb0>
     aa6:	82 e8       	ldi	r24, 0x82	; 130
     aa8:	9f ef       	ldi	r25, 0xFF	; 255
     aaa:	13 96       	adiw	r26, 0x03	; 3
     aac:	9c 93       	st	X, r25
     aae:	8e 93       	st	-X, r24
     ab0:	12 97       	sbiw	r26, 0x02	; 2
     ab2:	9a 01       	movw	r18, r20
     ab4:	ab 01       	movw	r20, r22
     ab6:	67 e0       	ldi	r22, 0x07	; 7
     ab8:	22 0f       	add	r18, r18
     aba:	33 1f       	adc	r19, r19
     abc:	44 1f       	adc	r20, r20
     abe:	55 1f       	adc	r21, r21
     ac0:	6a 95       	dec	r22
     ac2:	d1 f7       	brne	.-12     	; 0xab8 <__unpack_f+0x54>
     ac4:	83 e0       	ldi	r24, 0x03	; 3
     ac6:	8c 93       	st	X, r24
     ac8:	0d c0       	rjmp	.+26     	; 0xae4 <__unpack_f+0x80>
     aca:	22 0f       	add	r18, r18
     acc:	33 1f       	adc	r19, r19
     ace:	44 1f       	adc	r20, r20
     ad0:	55 1f       	adc	r21, r21
     ad2:	12 96       	adiw	r26, 0x02	; 2
     ad4:	8d 91       	ld	r24, X+
     ad6:	9c 91       	ld	r25, X
     ad8:	13 97       	sbiw	r26, 0x03	; 3
     ada:	01 97       	sbiw	r24, 0x01	; 1
     adc:	13 96       	adiw	r26, 0x03	; 3
     ade:	9c 93       	st	X, r25
     ae0:	8e 93       	st	-X, r24
     ae2:	12 97       	sbiw	r26, 0x02	; 2
     ae4:	20 30       	cpi	r18, 0x00	; 0
     ae6:	80 e0       	ldi	r24, 0x00	; 0
     ae8:	38 07       	cpc	r19, r24
     aea:	80 e0       	ldi	r24, 0x00	; 0
     aec:	48 07       	cpc	r20, r24
     aee:	80 e4       	ldi	r24, 0x40	; 64
     af0:	58 07       	cpc	r21, r24
     af2:	58 f3       	brcs	.-42     	; 0xaca <__unpack_f+0x66>
     af4:	14 96       	adiw	r26, 0x04	; 4
     af6:	2d 93       	st	X+, r18
     af8:	3d 93       	st	X+, r19
     afa:	4d 93       	st	X+, r20
     afc:	5c 93       	st	X, r21
     afe:	17 97       	sbiw	r26, 0x07	; 7
     b00:	08 95       	ret
     b02:	2f 3f       	cpi	r18, 0xFF	; 255
     b04:	31 05       	cpc	r19, r1
     b06:	79 f4       	brne	.+30     	; 0xb26 <__unpack_f+0xc2>
     b08:	41 15       	cp	r20, r1
     b0a:	51 05       	cpc	r21, r1
     b0c:	61 05       	cpc	r22, r1
     b0e:	71 05       	cpc	r23, r1
     b10:	19 f4       	brne	.+6      	; 0xb18 <__unpack_f+0xb4>
     b12:	84 e0       	ldi	r24, 0x04	; 4
     b14:	8c 93       	st	X, r24
     b16:	08 95       	ret
     b18:	64 ff       	sbrs	r22, 4
     b1a:	03 c0       	rjmp	.+6      	; 0xb22 <__unpack_f+0xbe>
     b1c:	81 e0       	ldi	r24, 0x01	; 1
     b1e:	8c 93       	st	X, r24
     b20:	12 c0       	rjmp	.+36     	; 0xb46 <__unpack_f+0xe2>
     b22:	1c 92       	st	X, r1
     b24:	10 c0       	rjmp	.+32     	; 0xb46 <__unpack_f+0xe2>
     b26:	2f 57       	subi	r18, 0x7F	; 127
     b28:	30 40       	sbci	r19, 0x00	; 0
     b2a:	13 96       	adiw	r26, 0x03	; 3
     b2c:	3c 93       	st	X, r19
     b2e:	2e 93       	st	-X, r18
     b30:	12 97       	sbiw	r26, 0x02	; 2
     b32:	83 e0       	ldi	r24, 0x03	; 3
     b34:	8c 93       	st	X, r24
     b36:	87 e0       	ldi	r24, 0x07	; 7
     b38:	44 0f       	add	r20, r20
     b3a:	55 1f       	adc	r21, r21
     b3c:	66 1f       	adc	r22, r22
     b3e:	77 1f       	adc	r23, r23
     b40:	8a 95       	dec	r24
     b42:	d1 f7       	brne	.-12     	; 0xb38 <__unpack_f+0xd4>
     b44:	70 64       	ori	r23, 0x40	; 64
     b46:	14 96       	adiw	r26, 0x04	; 4
     b48:	4d 93       	st	X+, r20
     b4a:	5d 93       	st	X+, r21
     b4c:	6d 93       	st	X+, r22
     b4e:	7c 93       	st	X, r23
     b50:	17 97       	sbiw	r26, 0x07	; 7
     b52:	08 95       	ret

00000b54 <__fpcmp_parts_f>:
     b54:	1f 93       	push	r17
     b56:	dc 01       	movw	r26, r24
     b58:	fb 01       	movw	r30, r22
     b5a:	9c 91       	ld	r25, X
     b5c:	92 30       	cpi	r25, 0x02	; 2
     b5e:	08 f4       	brcc	.+2      	; 0xb62 <__fpcmp_parts_f+0xe>
     b60:	47 c0       	rjmp	.+142    	; 0xbf0 <__fpcmp_parts_f+0x9c>
     b62:	80 81       	ld	r24, Z
     b64:	82 30       	cpi	r24, 0x02	; 2
     b66:	08 f4       	brcc	.+2      	; 0xb6a <__fpcmp_parts_f+0x16>
     b68:	43 c0       	rjmp	.+134    	; 0xbf0 <__fpcmp_parts_f+0x9c>
     b6a:	94 30       	cpi	r25, 0x04	; 4
     b6c:	51 f4       	brne	.+20     	; 0xb82 <__fpcmp_parts_f+0x2e>
     b6e:	11 96       	adiw	r26, 0x01	; 1
     b70:	1c 91       	ld	r17, X
     b72:	84 30       	cpi	r24, 0x04	; 4
     b74:	99 f5       	brne	.+102    	; 0xbdc <__fpcmp_parts_f+0x88>
     b76:	81 81       	ldd	r24, Z+1	; 0x01
     b78:	68 2f       	mov	r22, r24
     b7a:	70 e0       	ldi	r23, 0x00	; 0
     b7c:	61 1b       	sub	r22, r17
     b7e:	71 09       	sbc	r23, r1
     b80:	3f c0       	rjmp	.+126    	; 0xc00 <__fpcmp_parts_f+0xac>
     b82:	84 30       	cpi	r24, 0x04	; 4
     b84:	21 f0       	breq	.+8      	; 0xb8e <__fpcmp_parts_f+0x3a>
     b86:	92 30       	cpi	r25, 0x02	; 2
     b88:	31 f4       	brne	.+12     	; 0xb96 <__fpcmp_parts_f+0x42>
     b8a:	82 30       	cpi	r24, 0x02	; 2
     b8c:	b9 f1       	breq	.+110    	; 0xbfc <__fpcmp_parts_f+0xa8>
     b8e:	81 81       	ldd	r24, Z+1	; 0x01
     b90:	88 23       	and	r24, r24
     b92:	89 f1       	breq	.+98     	; 0xbf6 <__fpcmp_parts_f+0xa2>
     b94:	2d c0       	rjmp	.+90     	; 0xbf0 <__fpcmp_parts_f+0x9c>
     b96:	11 96       	adiw	r26, 0x01	; 1
     b98:	1c 91       	ld	r17, X
     b9a:	11 97       	sbiw	r26, 0x01	; 1
     b9c:	82 30       	cpi	r24, 0x02	; 2
     b9e:	f1 f0       	breq	.+60     	; 0xbdc <__fpcmp_parts_f+0x88>
     ba0:	81 81       	ldd	r24, Z+1	; 0x01
     ba2:	18 17       	cp	r17, r24
     ba4:	d9 f4       	brne	.+54     	; 0xbdc <__fpcmp_parts_f+0x88>
     ba6:	12 96       	adiw	r26, 0x02	; 2
     ba8:	2d 91       	ld	r18, X+
     baa:	3c 91       	ld	r19, X
     bac:	13 97       	sbiw	r26, 0x03	; 3
     bae:	82 81       	ldd	r24, Z+2	; 0x02
     bb0:	93 81       	ldd	r25, Z+3	; 0x03
     bb2:	82 17       	cp	r24, r18
     bb4:	93 07       	cpc	r25, r19
     bb6:	94 f0       	brlt	.+36     	; 0xbdc <__fpcmp_parts_f+0x88>
     bb8:	28 17       	cp	r18, r24
     bba:	39 07       	cpc	r19, r25
     bbc:	bc f0       	brlt	.+46     	; 0xbec <__fpcmp_parts_f+0x98>
     bbe:	14 96       	adiw	r26, 0x04	; 4
     bc0:	8d 91       	ld	r24, X+
     bc2:	9d 91       	ld	r25, X+
     bc4:	0d 90       	ld	r0, X+
     bc6:	bc 91       	ld	r27, X
     bc8:	a0 2d       	mov	r26, r0
     bca:	24 81       	ldd	r18, Z+4	; 0x04
     bcc:	35 81       	ldd	r19, Z+5	; 0x05
     bce:	46 81       	ldd	r20, Z+6	; 0x06
     bd0:	57 81       	ldd	r21, Z+7	; 0x07
     bd2:	28 17       	cp	r18, r24
     bd4:	39 07       	cpc	r19, r25
     bd6:	4a 07       	cpc	r20, r26
     bd8:	5b 07       	cpc	r21, r27
     bda:	18 f4       	brcc	.+6      	; 0xbe2 <__fpcmp_parts_f+0x8e>
     bdc:	11 23       	and	r17, r17
     bde:	41 f0       	breq	.+16     	; 0xbf0 <__fpcmp_parts_f+0x9c>
     be0:	0a c0       	rjmp	.+20     	; 0xbf6 <__fpcmp_parts_f+0xa2>
     be2:	82 17       	cp	r24, r18
     be4:	93 07       	cpc	r25, r19
     be6:	a4 07       	cpc	r26, r20
     be8:	b5 07       	cpc	r27, r21
     bea:	40 f4       	brcc	.+16     	; 0xbfc <__fpcmp_parts_f+0xa8>
     bec:	11 23       	and	r17, r17
     bee:	19 f0       	breq	.+6      	; 0xbf6 <__fpcmp_parts_f+0xa2>
     bf0:	61 e0       	ldi	r22, 0x01	; 1
     bf2:	70 e0       	ldi	r23, 0x00	; 0
     bf4:	05 c0       	rjmp	.+10     	; 0xc00 <__fpcmp_parts_f+0xac>
     bf6:	6f ef       	ldi	r22, 0xFF	; 255
     bf8:	7f ef       	ldi	r23, 0xFF	; 255
     bfa:	02 c0       	rjmp	.+4      	; 0xc00 <__fpcmp_parts_f+0xac>
     bfc:	60 e0       	ldi	r22, 0x00	; 0
     bfe:	70 e0       	ldi	r23, 0x00	; 0
     c00:	cb 01       	movw	r24, r22
     c02:	1f 91       	pop	r17
     c04:	08 95       	ret

00000c06 <main>:
#include <avr/interrupt.h>
#include "Adc.h"
#define WDG_WDTCR_REG			(*(volatile u8*)0x41)
int main ()
{
	LED_Init();
     c06:	0e 94 ca 06 	call	0xd94	; 0xd94 <LED_Init>
	WDG_WDTCR_REG |= 7;   			/*	Reset Time 2.1s	*/
     c0a:	e1 e4       	ldi	r30, 0x41	; 65
     c0c:	f0 e0       	ldi	r31, 0x00	; 0
     c0e:	80 81       	ld	r24, Z
     c10:	87 60       	ori	r24, 0x07	; 7
     c12:	80 83       	st	Z, r24
	SET_BIT(WDG_WDTCR_REG,3);		/*	Enable Watchdog*/
     c14:	80 81       	ld	r24, Z
     c16:	88 60       	ori	r24, 0x08	; 8
     c18:	80 83       	st	Z, r24

	LED_ON(LED0);
     c1a:	80 e0       	ldi	r24, 0x00	; 0
     c1c:	0e 94 b1 06 	call	0xd62	; 0xd62 <LED_ON>
     c20:	28 e2       	ldi	r18, 0x28	; 40
     c22:	33 e2       	ldi	r19, 0x23	; 35
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c24:	40 e9       	ldi	r20, 0x90	; 144
     c26:	51 e0       	ldi	r21, 0x01	; 1
     c28:	ca 01       	movw	r24, r20
     c2a:	01 97       	sbiw	r24, 0x01	; 1
     c2c:	f1 f7       	brne	.-4      	; 0xc2a <main+0x24>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c2e:	21 50       	subi	r18, 0x01	; 1
     c30:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c32:	d1 f7       	brne	.-12     	; 0xc28 <main+0x22>
	_delay_ms(900);
	LED_OFF(LED0);
     c34:	80 e0       	ldi	r24, 0x00	; 0
     c36:	0e 94 98 06 	call	0xd30	; 0xd30 <LED_OFF>
     c3a:	28 e2       	ldi	r18, 0x28	; 40
     c3c:	33 e2       	ldi	r19, 0x23	; 35
     c3e:	40 e9       	ldi	r20, 0x90	; 144
     c40:	51 e0       	ldi	r21, 0x01	; 1
     c42:	ca 01       	movw	r24, r20
     c44:	01 97       	sbiw	r24, 0x01	; 1
     c46:	f1 f7       	brne	.-4      	; 0xc44 <main+0x3e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c48:	21 50       	subi	r18, 0x01	; 1
     c4a:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c4c:	d1 f7       	brne	.-12     	; 0xc42 <main+0x3c>
	_delay_ms(900);

	while (1)
	{
		asm("WDR");
     c4e:	a8 95       	wdr
     c50:	fe cf       	rjmp	.-4      	; 0xc4e <main+0x48>

00000c52 <SSD_DisplayNumber>:
	/*	Configure Control Lines As Output	*/
	Dio_ConfigChannel(DIO_PORTB,DIO_PIN1,OUTPUT);
	Dio_ConfigChannel(DIO_PORTB,DIO_PIN2,OUTPUT);
}
void SSD_DisplayNumber(u8 num)
{
     c52:	ff 92       	push	r15
     c54:	0f 93       	push	r16
     c56:	1f 93       	push	r17
     c58:	f8 2e       	mov	r15, r24
	u8 loc_FirstDigit = (num/10)<<4;
	u8 loc_Second_Digit = (num%10)<<4;

	/*	Enable SSD1	*/
	Dio_WriteChannel(DIO_PORTB, DIO_PIN2, STD_HIGH);
     c5a:	81 e0       	ldi	r24, 0x01	; 1
     c5c:	62 e0       	ldi	r22, 0x02	; 2
     c5e:	41 e0       	ldi	r20, 0x01	; 1
     c60:	0e 94 c4 09 	call	0x1388	; 0x1388 <Dio_WriteChannel>
	/*	Disable SSD2	*/
	Dio_WriteChannel(DIO_PORTB, DIO_PIN1, STD_LOW);
     c64:	81 e0       	ldi	r24, 0x01	; 1
     c66:	61 e0       	ldi	r22, 0x01	; 1
     c68:	40 e0       	ldi	r20, 0x00	; 0
     c6a:	0e 94 c4 09 	call	0x1388	; 0x1388 <Dio_WriteChannel>
	/*	Write Number To SSD	*/
	Dio_WriteGroup(DIO_PORTA,SSD_MASK,loc_FirstDigit);
     c6e:	8f 2d       	mov	r24, r15
     c70:	6a e0       	ldi	r22, 0x0A	; 10
     c72:	0e 94 02 0b 	call	0x1604	; 0x1604 <__udivmodqi4>
     c76:	48 2f       	mov	r20, r24
     c78:	42 95       	swap	r20
     c7a:	40 7f       	andi	r20, 0xF0	; 240
     c7c:	80 e0       	ldi	r24, 0x00	; 0
     c7e:	60 ef       	ldi	r22, 0xF0	; 240
     c80:	0e 94 43 0a 	call	0x1486	; 0x1486 <Dio_WriteGroup>
     c84:	00 ea       	ldi	r16, 0xA0	; 160
     c86:	1f e0       	ldi	r17, 0x0F	; 15
     c88:	c8 01       	movw	r24, r16
     c8a:	01 97       	sbiw	r24, 0x01	; 1
     c8c:	f1 f7       	brne	.-4      	; 0xc8a <SSD_DisplayNumber+0x38>
	/*	wait(1m)	*/
	_delay_ms(1);

	/*	Disable SSD1	*/
	Dio_WriteChannel(DIO_PORTB, DIO_PIN2, STD_LOW);
     c8e:	81 e0       	ldi	r24, 0x01	; 1
     c90:	62 e0       	ldi	r22, 0x02	; 2
     c92:	40 e0       	ldi	r20, 0x00	; 0
     c94:	0e 94 c4 09 	call	0x1388	; 0x1388 <Dio_WriteChannel>
	/*	Enable SSD2	*/
	Dio_WriteChannel(DIO_PORTB, DIO_PIN1, STD_HIGH);
     c98:	81 e0       	ldi	r24, 0x01	; 1
     c9a:	61 e0       	ldi	r22, 0x01	; 1
     c9c:	41 e0       	ldi	r20, 0x01	; 1
     c9e:	0e 94 c4 09 	call	0x1388	; 0x1388 <Dio_WriteChannel>
	/*	Write Number To SSD	*/
	Dio_WriteGroup(DIO_PORTA,SSD_MASK,loc_Second_Digit);
     ca2:	8f 2d       	mov	r24, r15
     ca4:	6a e0       	ldi	r22, 0x0A	; 10
     ca6:	0e 94 02 0b 	call	0x1604	; 0x1604 <__udivmodqi4>
     caa:	92 95       	swap	r25
     cac:	90 7f       	andi	r25, 0xF0	; 240
     cae:	80 e0       	ldi	r24, 0x00	; 0
     cb0:	60 ef       	ldi	r22, 0xF0	; 240
     cb2:	49 2f       	mov	r20, r25
     cb4:	0e 94 43 0a 	call	0x1486	; 0x1486 <Dio_WriteGroup>
     cb8:	c8 01       	movw	r24, r16
     cba:	01 97       	sbiw	r24, 0x01	; 1
     cbc:	f1 f7       	brne	.-4      	; 0xcba <SSD_DisplayNumber+0x68>
	/*	wait(1m)	*/
	_delay_ms(1);
}
     cbe:	1f 91       	pop	r17
     cc0:	0f 91       	pop	r16
     cc2:	ff 90       	pop	r15
     cc4:	08 95       	ret

00000cc6 <SSD_Init>:
 */
#include "SSD.h"
void SSD_Init(void)
{
	/*	Configure Data Lines As Output	*/
	Dio_ConfigChannel(DIO_PORTA,DIO_PIN4,OUTPUT);
     cc6:	80 e0       	ldi	r24, 0x00	; 0
     cc8:	64 e0       	ldi	r22, 0x04	; 4
     cca:	41 e0       	ldi	r20, 0x01	; 1
     ccc:	0e 94 45 09 	call	0x128a	; 0x128a <Dio_ConfigChannel>
	Dio_ConfigChannel(DIO_PORTA,DIO_PIN5,OUTPUT);
     cd0:	80 e0       	ldi	r24, 0x00	; 0
     cd2:	65 e0       	ldi	r22, 0x05	; 5
     cd4:	41 e0       	ldi	r20, 0x01	; 1
     cd6:	0e 94 45 09 	call	0x128a	; 0x128a <Dio_ConfigChannel>
	Dio_ConfigChannel(DIO_PORTA,DIO_PIN6,OUTPUT);
     cda:	80 e0       	ldi	r24, 0x00	; 0
     cdc:	66 e0       	ldi	r22, 0x06	; 6
     cde:	41 e0       	ldi	r20, 0x01	; 1
     ce0:	0e 94 45 09 	call	0x128a	; 0x128a <Dio_ConfigChannel>
	Dio_ConfigChannel(DIO_PORTA,DIO_PIN7,OUTPUT);
     ce4:	80 e0       	ldi	r24, 0x00	; 0
     ce6:	67 e0       	ldi	r22, 0x07	; 7
     ce8:	41 e0       	ldi	r20, 0x01	; 1
     cea:	0e 94 45 09 	call	0x128a	; 0x128a <Dio_ConfigChannel>

	/*	Configure Control Lines As Output	*/
	Dio_ConfigChannel(DIO_PORTB,DIO_PIN1,OUTPUT);
     cee:	81 e0       	ldi	r24, 0x01	; 1
     cf0:	61 e0       	ldi	r22, 0x01	; 1
     cf2:	41 e0       	ldi	r20, 0x01	; 1
     cf4:	0e 94 45 09 	call	0x128a	; 0x128a <Dio_ConfigChannel>
	Dio_ConfigChannel(DIO_PORTB,DIO_PIN2,OUTPUT);
     cf8:	81 e0       	ldi	r24, 0x01	; 1
     cfa:	62 e0       	ldi	r22, 0x02	; 2
     cfc:	41 e0       	ldi	r20, 0x01	; 1
     cfe:	0e 94 45 09 	call	0x128a	; 0x128a <Dio_ConfigChannel>
}
     d02:	08 95       	ret

00000d04 <LED_TOGGLE>:
		break;
	}
}
void LED_TOGGLE(led_type ledId)
{
	switch (ledId)
     d04:	81 30       	cpi	r24, 0x01	; 1
     d06:	51 f0       	breq	.+20     	; 0xd1c <LED_TOGGLE+0x18>
     d08:	81 30       	cpi	r24, 0x01	; 1
     d0a:	18 f0       	brcs	.+6      	; 0xd12 <LED_TOGGLE+0xe>
     d0c:	82 30       	cpi	r24, 0x02	; 2
     d0e:	79 f4       	brne	.+30     	; 0xd2e <LED_TOGGLE+0x2a>
     d10:	0a c0       	rjmp	.+20     	; 0xd26 <LED_TOGGLE+0x22>
	{
	case LED0:
		Dio_TogglChannel(LED0_PORT,LED0_PIN);
     d12:	82 e0       	ldi	r24, 0x02	; 2
     d14:	62 e0       	ldi	r22, 0x02	; 2
     d16:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <Dio_TogglChannel>
     d1a:	08 95       	ret
		break;

	case LED1:
		Dio_TogglChannel(LED1_PORT,LED1_PIN);
     d1c:	82 e0       	ldi	r24, 0x02	; 2
     d1e:	67 e0       	ldi	r22, 0x07	; 7
     d20:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <Dio_TogglChannel>
     d24:	08 95       	ret
		break;

	case LED2:
		Dio_TogglChannel(LED2_PORT,LED2_PIN);
     d26:	83 e0       	ldi	r24, 0x03	; 3
     d28:	63 e0       	ldi	r22, 0x03	; 3
     d2a:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <Dio_TogglChannel>
     d2e:	08 95       	ret

00000d30 <LED_OFF>:
	}
}

void LED_OFF(led_type ledId)
{
	switch (ledId)
     d30:	81 30       	cpi	r24, 0x01	; 1
     d32:	59 f0       	breq	.+22     	; 0xd4a <LED_OFF+0x1a>
     d34:	81 30       	cpi	r24, 0x01	; 1
     d36:	18 f0       	brcs	.+6      	; 0xd3e <LED_OFF+0xe>
     d38:	82 30       	cpi	r24, 0x02	; 2
     d3a:	91 f4       	brne	.+36     	; 0xd60 <LED_OFF+0x30>
     d3c:	0c c0       	rjmp	.+24     	; 0xd56 <LED_OFF+0x26>
	{
	case LED0:
		Dio_WriteChannel(LED0_PORT,LED0_PIN,STD_LOW);
     d3e:	82 e0       	ldi	r24, 0x02	; 2
     d40:	62 e0       	ldi	r22, 0x02	; 2
     d42:	40 e0       	ldi	r20, 0x00	; 0
     d44:	0e 94 c4 09 	call	0x1388	; 0x1388 <Dio_WriteChannel>
     d48:	08 95       	ret
		break;

	case LED1:
		Dio_WriteChannel(LED1_PORT,LED1_PIN,STD_LOW);
     d4a:	82 e0       	ldi	r24, 0x02	; 2
     d4c:	67 e0       	ldi	r22, 0x07	; 7
     d4e:	40 e0       	ldi	r20, 0x00	; 0
     d50:	0e 94 c4 09 	call	0x1388	; 0x1388 <Dio_WriteChannel>
     d54:	08 95       	ret
		break;

	case LED2:
		Dio_WriteChannel(LED2_PORT,LED2_PIN,STD_LOW);
     d56:	83 e0       	ldi	r24, 0x03	; 3
     d58:	63 e0       	ldi	r22, 0x03	; 3
     d5a:	40 e0       	ldi	r20, 0x00	; 0
     d5c:	0e 94 c4 09 	call	0x1388	; 0x1388 <Dio_WriteChannel>
     d60:	08 95       	ret

00000d62 <LED_ON>:
	Dio_ConfigChannel(LED2_PORT,LED2_PIN,OUTPUT);
}

void LED_ON(led_type ledId)
{
	switch (ledId)
     d62:	81 30       	cpi	r24, 0x01	; 1
     d64:	59 f0       	breq	.+22     	; 0xd7c <LED_ON+0x1a>
     d66:	81 30       	cpi	r24, 0x01	; 1
     d68:	18 f0       	brcs	.+6      	; 0xd70 <LED_ON+0xe>
     d6a:	82 30       	cpi	r24, 0x02	; 2
     d6c:	91 f4       	brne	.+36     	; 0xd92 <LED_ON+0x30>
     d6e:	0c c0       	rjmp	.+24     	; 0xd88 <LED_ON+0x26>
	{
	case LED0:
		Dio_WriteChannel(LED0_PORT,LED0_PIN,STD_HIGH);
     d70:	82 e0       	ldi	r24, 0x02	; 2
     d72:	62 e0       	ldi	r22, 0x02	; 2
     d74:	41 e0       	ldi	r20, 0x01	; 1
     d76:	0e 94 c4 09 	call	0x1388	; 0x1388 <Dio_WriteChannel>
     d7a:	08 95       	ret
		break;

	case LED1:
		Dio_WriteChannel(LED1_PORT,LED1_PIN,STD_HIGH);
     d7c:	82 e0       	ldi	r24, 0x02	; 2
     d7e:	67 e0       	ldi	r22, 0x07	; 7
     d80:	41 e0       	ldi	r20, 0x01	; 1
     d82:	0e 94 c4 09 	call	0x1388	; 0x1388 <Dio_WriteChannel>
     d86:	08 95       	ret
		break;

	case LED2:
		Dio_WriteChannel(LED2_PORT,LED2_PIN,STD_HIGH);
     d88:	83 e0       	ldi	r24, 0x03	; 3
     d8a:	63 e0       	ldi	r22, 0x03	; 3
     d8c:	41 e0       	ldi	r20, 0x01	; 1
     d8e:	0e 94 c4 09 	call	0x1388	; 0x1388 <Dio_WriteChannel>
     d92:	08 95       	ret

00000d94 <LED_Init>:

#include "Led.h"

void LED_Init(void)
{
	Dio_ConfigChannel(LED0_PORT,LED0_PIN,OUTPUT);
     d94:	82 e0       	ldi	r24, 0x02	; 2
     d96:	62 e0       	ldi	r22, 0x02	; 2
     d98:	41 e0       	ldi	r20, 0x01	; 1
     d9a:	0e 94 45 09 	call	0x128a	; 0x128a <Dio_ConfigChannel>
	Dio_ConfigChannel(LED1_PORT,LED1_PIN,OUTPUT);
     d9e:	82 e0       	ldi	r24, 0x02	; 2
     da0:	67 e0       	ldi	r22, 0x07	; 7
     da2:	41 e0       	ldi	r20, 0x01	; 1
     da4:	0e 94 45 09 	call	0x128a	; 0x128a <Dio_ConfigChannel>
	Dio_ConfigChannel(LED2_PORT,LED2_PIN,OUTPUT);
     da8:	83 e0       	ldi	r24, 0x03	; 3
     daa:	63 e0       	ldi	r22, 0x03	; 3
     dac:	41 e0       	ldi	r20, 0x01	; 1
     dae:	0e 94 45 09 	call	0x128a	; 0x128a <Dio_ConfigChannel>
}
     db2:	08 95       	ret

00000db4 <Enable_Pulse>:
	Lcd_Goto_Row_Column(0,0);
	Lcd_Cmd(_LCD_CURSOR_OFF);
}
static void Enable_Pulse(void)
{
	Dio_WriteChannel(DIO_PORTB, DIO_PIN3, STD_HIGH);
     db4:	81 e0       	ldi	r24, 0x01	; 1
     db6:	63 e0       	ldi	r22, 0x03	; 3
     db8:	41 e0       	ldi	r20, 0x01	; 1
     dba:	0e 94 c4 09 	call	0x1388	; 0x1388 <Dio_WriteChannel>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     dbe:	85 e0       	ldi	r24, 0x05	; 5
     dc0:	8a 95       	dec	r24
     dc2:	f1 f7       	brne	.-4      	; 0xdc0 <Enable_Pulse+0xc>
	_delay_us(1);
	Dio_WriteChannel(DIO_PORTB, DIO_PIN3, STD_LOW);
     dc4:	81 e0       	ldi	r24, 0x01	; 1
     dc6:	63 e0       	ldi	r22, 0x03	; 3
     dc8:	40 e0       	ldi	r20, 0x00	; 0
     dca:	0e 94 c4 09 	call	0x1388	; 0x1388 <Dio_WriteChannel>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     dce:	80 e4       	ldi	r24, 0x40	; 64
     dd0:	9f e1       	ldi	r25, 0x1F	; 31
     dd2:	01 97       	sbiw	r24, 0x01	; 1
     dd4:	f1 f7       	brne	.-4      	; 0xdd2 <Enable_Pulse+0x1e>
	_delay_ms(2);
}
     dd6:	08 95       	ret

00000dd8 <Lcd_DisplayChr>:
	Dio_WriteGroup(DIO_PORTA,LCD_MASK,Low_Nibble);
	Enable_Pulse();
}

void Lcd_DisplayChr(u8 chr)
{
     dd8:	1f 93       	push	r17
     dda:	18 2f       	mov	r17, r24

static void Lcd_Data(u8 data) /*	RS-> 1	*/
{
	u8 High_Nibble = data;    /*	MSB	*/
	u8 Low_Nibble = data<<4;		/*	LSB	*/
	Dio_WriteChannel(DIO_PORTB, DIO_PIN1, STD_HIGH);   /* Data Mode */
     ddc:	81 e0       	ldi	r24, 0x01	; 1
     dde:	61 e0       	ldi	r22, 0x01	; 1
     de0:	41 e0       	ldi	r20, 0x01	; 1
     de2:	0e 94 c4 09 	call	0x1388	; 0x1388 <Dio_WriteChannel>
	Dio_WriteGroup(DIO_PORTA,LCD_MASK,High_Nibble);
     de6:	80 e0       	ldi	r24, 0x00	; 0
     de8:	60 ef       	ldi	r22, 0xF0	; 240
     dea:	41 2f       	mov	r20, r17
     dec:	0e 94 43 0a 	call	0x1486	; 0x1486 <Dio_WriteGroup>
	Enable_Pulse();
     df0:	0e 94 da 06 	call	0xdb4	; 0xdb4 <Enable_Pulse>

	Dio_WriteGroup(DIO_PORTA,LCD_MASK,Low_Nibble);
     df4:	12 95       	swap	r17
     df6:	10 7f       	andi	r17, 0xF0	; 240
     df8:	80 e0       	ldi	r24, 0x00	; 0
     dfa:	60 ef       	ldi	r22, 0xF0	; 240
     dfc:	41 2f       	mov	r20, r17
     dfe:	0e 94 43 0a 	call	0x1486	; 0x1486 <Dio_WriteGroup>
	Enable_Pulse();
     e02:	0e 94 da 06 	call	0xdb4	; 0xdb4 <Enable_Pulse>
}

void Lcd_DisplayChr(u8 chr)
{
	Lcd_Data(chr);
}
     e06:	1f 91       	pop	r17
     e08:	08 95       	ret

00000e0a <Lcd_DisplayNum>:
		Lcd_Cmd(0xC0+col);
		break;
	}
}
void Lcd_DisplayNum(u16 num)
{
     e0a:	0f 93       	push	r16
     e0c:	1f 93       	push	r17
     e0e:	8c 01       	movw	r16, r24
	Lcd_DisplayChr(num/1000 + '0');
     e10:	68 ee       	ldi	r22, 0xE8	; 232
     e12:	73 e0       	ldi	r23, 0x03	; 3
     e14:	0e 94 0e 0b 	call	0x161c	; 0x161c <__udivmodhi4>
     e18:	86 2f       	mov	r24, r22
     e1a:	80 5d       	subi	r24, 0xD0	; 208
     e1c:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <Lcd_DisplayChr>
	Lcd_DisplayChr(num%1000/100 + '0');
     e20:	c8 01       	movw	r24, r16
     e22:	68 ee       	ldi	r22, 0xE8	; 232
     e24:	73 e0       	ldi	r23, 0x03	; 3
     e26:	0e 94 0e 0b 	call	0x161c	; 0x161c <__udivmodhi4>
     e2a:	18 2f       	mov	r17, r24
     e2c:	09 2f       	mov	r16, r25
     e2e:	64 e6       	ldi	r22, 0x64	; 100
     e30:	70 e0       	ldi	r23, 0x00	; 0
     e32:	0e 94 0e 0b 	call	0x161c	; 0x161c <__udivmodhi4>
     e36:	86 2f       	mov	r24, r22
     e38:	80 5d       	subi	r24, 0xD0	; 208
     e3a:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <Lcd_DisplayChr>
	Lcd_DisplayChr(num%1000%100/10 + '0');
     e3e:	81 2f       	mov	r24, r17
     e40:	90 2f       	mov	r25, r16
     e42:	64 e6       	ldi	r22, 0x64	; 100
     e44:	70 e0       	ldi	r23, 0x00	; 0
     e46:	0e 94 0e 0b 	call	0x161c	; 0x161c <__udivmodhi4>
     e4a:	18 2f       	mov	r17, r24
     e4c:	09 2f       	mov	r16, r25
     e4e:	6a e0       	ldi	r22, 0x0A	; 10
     e50:	70 e0       	ldi	r23, 0x00	; 0
     e52:	0e 94 0e 0b 	call	0x161c	; 0x161c <__udivmodhi4>
     e56:	86 2f       	mov	r24, r22
     e58:	80 5d       	subi	r24, 0xD0	; 208
     e5a:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <Lcd_DisplayChr>
	Lcd_DisplayChr(num%1000%100%10 + '0');
     e5e:	81 2f       	mov	r24, r17
     e60:	90 2f       	mov	r25, r16
     e62:	6a e0       	ldi	r22, 0x0A	; 10
     e64:	70 e0       	ldi	r23, 0x00	; 0
     e66:	0e 94 0e 0b 	call	0x161c	; 0x161c <__udivmodhi4>
     e6a:	80 5d       	subi	r24, 0xD0	; 208
     e6c:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <Lcd_DisplayChr>
}
     e70:	1f 91       	pop	r17
     e72:	0f 91       	pop	r16
     e74:	08 95       	ret

00000e76 <LcdDisplayFloat>:

void LcdDisplayFloat(f64 floatNum)
{
     e76:	af 92       	push	r10
     e78:	bf 92       	push	r11
     e7a:	cf 92       	push	r12
     e7c:	df 92       	push	r13
     e7e:	ef 92       	push	r14
     e80:	ff 92       	push	r15
     e82:	0f 93       	push	r16
     e84:	1f 93       	push	r17
     e86:	5b 01       	movw	r10, r22
     e88:	6c 01       	movw	r12, r24
	u16 intPart = 0;
	f64 fractionTemp = 0;
	u16 fractionPart = 0;

	intPart = (u16)floatNum;
     e8a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     e8e:	dc 01       	movw	r26, r24
     e90:	cb 01       	movw	r24, r22
     e92:	7c 01       	movw	r14, r24
	fractionTemp = floatNum - intPart;
	fractionPart = fractionTemp * 100;

	Lcd_DisplayNum(intPart);
     e94:	0e 94 05 07 	call	0xe0a	; 0xe0a <Lcd_DisplayNum>
	Lcd_DisplayChr('.');
     e98:	8e e2       	ldi	r24, 0x2E	; 46
     e9a:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <Lcd_DisplayChr>
	Lcd_DisplayNum(fractionPart);
     e9e:	00 e0       	ldi	r16, 0x00	; 0
     ea0:	10 e0       	ldi	r17, 0x00	; 0
     ea2:	c8 01       	movw	r24, r16
     ea4:	b7 01       	movw	r22, r14
     ea6:	0e 94 95 03 	call	0x72a	; 0x72a <__floatunsisf>
     eaa:	9b 01       	movw	r18, r22
     eac:	ac 01       	movw	r20, r24
     eae:	c6 01       	movw	r24, r12
     eb0:	b5 01       	movw	r22, r10
     eb2:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
     eb6:	20 e0       	ldi	r18, 0x00	; 0
     eb8:	30 e0       	ldi	r19, 0x00	; 0
     eba:	48 ec       	ldi	r20, 0xC8	; 200
     ebc:	52 e4       	ldi	r21, 0x42	; 66
     ebe:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     ec2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     ec6:	dc 01       	movw	r26, r24
     ec8:	cb 01       	movw	r24, r22
     eca:	0e 94 05 07 	call	0xe0a	; 0xe0a <Lcd_DisplayNum>
}
     ece:	1f 91       	pop	r17
     ed0:	0f 91       	pop	r16
     ed2:	ff 90       	pop	r15
     ed4:	ef 90       	pop	r14
     ed6:	df 90       	pop	r13
     ed8:	cf 90       	pop	r12
     eda:	bf 90       	pop	r11
     edc:	af 90       	pop	r10
     ede:	08 95       	ret

00000ee0 <Lcd_DisplayStr>:
{
	Lcd_Data(chr);
}

void Lcd_DisplayStr(u8* str)
{
     ee0:	cf 93       	push	r28
     ee2:	df 93       	push	r29
     ee4:	ec 01       	movw	r28, r24
	while (*str != '\0')
     ee6:	88 81       	ld	r24, Y
     ee8:	88 23       	and	r24, r24
     eea:	31 f0       	breq	.+12     	; 0xef8 <Lcd_DisplayStr+0x18>
	{
		Lcd_DisplayChr(*str);
     eec:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <Lcd_DisplayChr>
		str++;
     ef0:	21 96       	adiw	r28, 0x01	; 1
	Lcd_Data(chr);
}

void Lcd_DisplayStr(u8* str)
{
	while (*str != '\0')
     ef2:	88 81       	ld	r24, Y
     ef4:	88 23       	and	r24, r24
     ef6:	d1 f7       	brne	.-12     	; 0xeec <Lcd_DisplayStr+0xc>
	{
		Lcd_DisplayChr(*str);
		str++;
	}
}
     ef8:	df 91       	pop	r29
     efa:	cf 91       	pop	r28
     efc:	08 95       	ret

00000efe <Lcd_Cmd>:
	Dio_WriteGroup(DIO_PORTA,LCD_MASK,Low_Nibble);
	Enable_Pulse();
}

void Lcd_Cmd(lcd_Cmd_Type cmd)/*	RS-> 0	*/
{
     efe:	1f 93       	push	r17
     f00:	18 2f       	mov	r17, r24
	u8 High_Nibble = cmd;    /*	MSB	*/
	u8 Low_Nibble = cmd<<4;		/*	LSB	*/
	Dio_WriteChannel(DIO_PORTB, DIO_PIN1, STD_LOW);   /* Command Mode */
     f02:	81 e0       	ldi	r24, 0x01	; 1
     f04:	61 e0       	ldi	r22, 0x01	; 1
     f06:	40 e0       	ldi	r20, 0x00	; 0
     f08:	0e 94 c4 09 	call	0x1388	; 0x1388 <Dio_WriteChannel>
	Dio_WriteGroup(DIO_PORTA,LCD_MASK,High_Nibble);
     f0c:	80 e0       	ldi	r24, 0x00	; 0
     f0e:	60 ef       	ldi	r22, 0xF0	; 240
     f10:	41 2f       	mov	r20, r17
     f12:	0e 94 43 0a 	call	0x1486	; 0x1486 <Dio_WriteGroup>
	Enable_Pulse();
     f16:	0e 94 da 06 	call	0xdb4	; 0xdb4 <Enable_Pulse>

	Dio_WriteGroup(DIO_PORTA,LCD_MASK,Low_Nibble);
     f1a:	12 95       	swap	r17
     f1c:	10 7f       	andi	r17, 0xF0	; 240
     f1e:	80 e0       	ldi	r24, 0x00	; 0
     f20:	60 ef       	ldi	r22, 0xF0	; 240
     f22:	41 2f       	mov	r20, r17
     f24:	0e 94 43 0a 	call	0x1486	; 0x1486 <Dio_WriteGroup>
	Enable_Pulse();
     f28:	0e 94 da 06 	call	0xdb4	; 0xdb4 <Enable_Pulse>
}
     f2c:	1f 91       	pop	r17
     f2e:	08 95       	ret

00000f30 <Lcd_Goto_Row_Column>:
	}
}

void Lcd_Goto_Row_Column(u8 row, u8 col)
{
	switch (row)
     f30:	88 23       	and	r24, r24
     f32:	19 f0       	breq	.+6      	; 0xf3a <Lcd_Goto_Row_Column+0xa>
     f34:	81 30       	cpi	r24, 0x01	; 1
     f36:	51 f4       	brne	.+20     	; 0xf4c <Lcd_Goto_Row_Column+0x1c>
     f38:	05 c0       	rjmp	.+10     	; 0xf44 <Lcd_Goto_Row_Column+0x14>
	{
	case 0:
		Lcd_Cmd(0x80+col);
     f3a:	86 2f       	mov	r24, r22
     f3c:	80 58       	subi	r24, 0x80	; 128
     f3e:	0e 94 7f 07 	call	0xefe	; 0xefe <Lcd_Cmd>
     f42:	08 95       	ret
		break;

	case 1:
		Lcd_Cmd(0xC0+col);
     f44:	86 2f       	mov	r24, r22
     f46:	80 54       	subi	r24, 0x40	; 64
     f48:	0e 94 7f 07 	call	0xefe	; 0xefe <Lcd_Cmd>
     f4c:	08 95       	ret

00000f4e <Lcd_Init>:
			}
	}
}

void Lcd_Init(void)
{
     f4e:	af 92       	push	r10
     f50:	bf 92       	push	r11
     f52:	cf 92       	push	r12
     f54:	df 92       	push	r13
     f56:	ef 92       	push	r14
     f58:	ff 92       	push	r15
     f5a:	0f 93       	push	r16
     f5c:	1f 93       	push	r17
     f5e:	cf 93       	push	r28
     f60:	df 93       	push	r29
	/*	Configure Data Lines As Output	*/
	Dio_ConfigChannel(DIO_PORTA,DIO_PIN4,OUTPUT);
     f62:	80 e0       	ldi	r24, 0x00	; 0
     f64:	64 e0       	ldi	r22, 0x04	; 4
     f66:	41 e0       	ldi	r20, 0x01	; 1
     f68:	0e 94 45 09 	call	0x128a	; 0x128a <Dio_ConfigChannel>
	Dio_ConfigChannel(DIO_PORTA,DIO_PIN5,OUTPUT);
     f6c:	80 e0       	ldi	r24, 0x00	; 0
     f6e:	65 e0       	ldi	r22, 0x05	; 5
     f70:	41 e0       	ldi	r20, 0x01	; 1
     f72:	0e 94 45 09 	call	0x128a	; 0x128a <Dio_ConfigChannel>
	Dio_ConfigChannel(DIO_PORTA,DIO_PIN6,OUTPUT);
     f76:	80 e0       	ldi	r24, 0x00	; 0
     f78:	66 e0       	ldi	r22, 0x06	; 6
     f7a:	41 e0       	ldi	r20, 0x01	; 1
     f7c:	0e 94 45 09 	call	0x128a	; 0x128a <Dio_ConfigChannel>
	Dio_ConfigChannel(DIO_PORTA,DIO_PIN7,OUTPUT);
     f80:	80 e0       	ldi	r24, 0x00	; 0
     f82:	67 e0       	ldi	r22, 0x07	; 7
     f84:	41 e0       	ldi	r20, 0x01	; 1
     f86:	0e 94 45 09 	call	0x128a	; 0x128a <Dio_ConfigChannel>

	/*	Configure Control Lines As Output	*/
	Dio_ConfigChannel(DIO_PORTB,DIO_PIN1,OUTPUT);   /*	RS	*/
     f8a:	81 e0       	ldi	r24, 0x01	; 1
     f8c:	61 e0       	ldi	r22, 0x01	; 1
     f8e:	41 e0       	ldi	r20, 0x01	; 1
     f90:	0e 94 45 09 	call	0x128a	; 0x128a <Dio_ConfigChannel>
	Dio_ConfigChannel(DIO_PORTB,DIO_PIN2,OUTPUT);	/*	RW	*/
     f94:	81 e0       	ldi	r24, 0x01	; 1
     f96:	62 e0       	ldi	r22, 0x02	; 2
     f98:	41 e0       	ldi	r20, 0x01	; 1
     f9a:	0e 94 45 09 	call	0x128a	; 0x128a <Dio_ConfigChannel>
	Dio_ConfigChannel(DIO_PORTB,DIO_PIN3,OUTPUT);	/*	En	*/
     f9e:	81 e0       	ldi	r24, 0x01	; 1
     fa0:	63 e0       	ldi	r22, 0x03	; 3
     fa2:	41 e0       	ldi	r20, 0x01	; 1
     fa4:	0e 94 45 09 	call	0x128a	; 0x128a <Dio_ConfigChannel>

	Dio_WriteChannel(DIO_PORTB, DIO_PIN2, STD_LOW);
     fa8:	81 e0       	ldi	r24, 0x01	; 1
     faa:	62 e0       	ldi	r22, 0x02	; 2
     fac:	40 e0       	ldi	r20, 0x00	; 0
     fae:	0e 94 c4 09 	call	0x1388	; 0x1388 <Dio_WriteChannel>
     fb2:	80 e6       	ldi	r24, 0x60	; 96
     fb4:	9a ee       	ldi	r25, 0xEA	; 234
     fb6:	01 97       	sbiw	r24, 0x01	; 1
     fb8:	f1 f7       	brne	.-4      	; 0xfb6 <Lcd_Init+0x68>

	_delay_ms(15);

	Lcd_Cmd(3);
     fba:	83 e0       	ldi	r24, 0x03	; 3
     fbc:	0e 94 7f 07 	call	0xefe	; 0xefe <Lcd_Cmd>
     fc0:	80 e2       	ldi	r24, 0x20	; 32
     fc2:	9e e4       	ldi	r25, 0x4E	; 78
     fc4:	01 97       	sbiw	r24, 0x01	; 1
     fc6:	f1 f7       	brne	.-4      	; 0xfc4 <Lcd_Init+0x76>
	_delay_ms(5);
	Lcd_Cmd(3);
     fc8:	83 e0       	ldi	r24, 0x03	; 3
     fca:	0e 94 7f 07 	call	0xefe	; 0xefe <Lcd_Cmd>
     fce:	80 e9       	ldi	r24, 0x90	; 144
     fd0:	91 e0       	ldi	r25, 0x01	; 1
     fd2:	01 97       	sbiw	r24, 0x01	; 1
     fd4:	f1 f7       	brne	.-4      	; 0xfd2 <Lcd_Init+0x84>
	_delay_us(100);
	Lcd_Cmd(3);
     fd6:	83 e0       	ldi	r24, 0x03	; 3
     fd8:	0e 94 7f 07 	call	0xefe	; 0xefe <Lcd_Cmd>
	Lcd_Cmd(2);
     fdc:	82 e0       	ldi	r24, 0x02	; 2
     fde:	0e 94 7f 07 	call	0xefe	; 0xefe <Lcd_Cmd>
	Lcd_Cmd(_LCD_4BIT_MODE);
     fe2:	88 e2       	ldi	r24, 0x28	; 40
     fe4:	0e 94 7f 07 	call	0xefe	; 0xefe <Lcd_Cmd>
     fe8:	ee 24       	eor	r14, r14
     fea:	ff 24       	eor	r15, r15
     fec:	cc 24       	eor	r12, r12
     fee:	dd 24       	eor	r13, r13
     ff0:	68 94       	set
     ff2:	c6 f8       	bld	r12, 6
{
	u8 loc_ByteIndex=0;
	u8 loc_CharIndx=0;
	for (loc_CharIndx=0;loc_CharIndx<NO_CSTOM_CHAR;loc_CharIndx++)
	{
		Lcd_Cmd(_LCD_CGRAM_START_ADDRESS +(loc_CharIndx*8));
     ff4:	0f 2e       	mov	r0, r31
     ff6:	f8 e6       	ldi	r31, 0x68	; 104
     ff8:	af 2e       	mov	r10, r31
     ffa:	f1 e0       	ldi	r31, 0x01	; 1
     ffc:	bf 2e       	mov	r11, r31
     ffe:	f0 2d       	mov	r31, r0
    1000:	00 e0       	ldi	r16, 0x00	; 0
    1002:	8c 2d       	mov	r24, r12
    1004:	0e 94 7f 07 	call	0xefe	; 0xefe <Lcd_Cmd>
    1008:	97 01       	movw	r18, r14
    100a:	22 0f       	add	r18, r18
    100c:	33 1f       	adc	r19, r19
    100e:	22 0f       	add	r18, r18
    1010:	33 1f       	adc	r19, r19
    1012:	22 0f       	add	r18, r18
    1014:	33 1f       	adc	r19, r19
    1016:	e5 01       	movw	r28, r10
    1018:	c2 0f       	add	r28, r18
    101a:	d3 1f       	adc	r29, r19
    101c:	10 2f       	mov	r17, r16
			for (loc_ByteIndex =0; loc_ByteIndex<NO_CSTOM_CHAR_BYTES;loc_ByteIndex++)
			{
				Lcd_DisplayChr(customChar[loc_CharIndx][loc_ByteIndex]);
    101e:	89 91       	ld	r24, Y+
    1020:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <Lcd_DisplayChr>
	u8 loc_ByteIndex=0;
	u8 loc_CharIndx=0;
	for (loc_CharIndx=0;loc_CharIndx<NO_CSTOM_CHAR;loc_CharIndx++)
	{
		Lcd_Cmd(_LCD_CGRAM_START_ADDRESS +(loc_CharIndx*8));
			for (loc_ByteIndex =0; loc_ByteIndex<NO_CSTOM_CHAR_BYTES;loc_ByteIndex++)
    1024:	1f 5f       	subi	r17, 0xFF	; 255
    1026:	18 30       	cpi	r17, 0x08	; 8
    1028:	d1 f7       	brne	.-12     	; 0x101e <Lcd_Init+0xd0>
    102a:	08 94       	sec
    102c:	e1 1c       	adc	r14, r1
    102e:	f1 1c       	adc	r15, r1
    1030:	88 e0       	ldi	r24, 0x08	; 8
    1032:	90 e0       	ldi	r25, 0x00	; 0
    1034:	c8 0e       	add	r12, r24
    1036:	d9 1e       	adc	r13, r25
extern u8 customChar[8][8];
static void Lcd_WriteCustom(void)
{
	u8 loc_ByteIndex=0;
	u8 loc_CharIndx=0;
	for (loc_CharIndx=0;loc_CharIndx<NO_CSTOM_CHAR;loc_CharIndx++)
    1038:	98 e0       	ldi	r25, 0x08	; 8
    103a:	e9 16       	cp	r14, r25
    103c:	f1 04       	cpc	r15, r1
    103e:	09 f7       	brne	.-62     	; 0x1002 <Lcd_Init+0xb4>
	_delay_us(100);
	Lcd_Cmd(3);
	Lcd_Cmd(2);
	Lcd_Cmd(_LCD_4BIT_MODE);
	Lcd_WriteCustom();
	Lcd_Goto_Row_Column(0,0);
    1040:	80 e0       	ldi	r24, 0x00	; 0
    1042:	60 e0       	ldi	r22, 0x00	; 0
    1044:	0e 94 98 07 	call	0xf30	; 0xf30 <Lcd_Goto_Row_Column>
	Lcd_Cmd(_LCD_CURSOR_OFF);
    1048:	8c e0       	ldi	r24, 0x0C	; 12
    104a:	0e 94 7f 07 	call	0xefe	; 0xefe <Lcd_Cmd>
}
    104e:	df 91       	pop	r29
    1050:	cf 91       	pop	r28
    1052:	1f 91       	pop	r17
    1054:	0f 91       	pop	r16
    1056:	ff 90       	pop	r15
    1058:	ef 90       	pop	r14
    105a:	df 90       	pop	r13
    105c:	cf 90       	pop	r12
    105e:	bf 90       	pop	r11
    1060:	af 90       	pop	r10
    1062:	08 95       	ret

00001064 <Buzzer_Toggle>:
	Dio_WriteChannel(BUZZER_PORT,BUZZER_PIN,STD_LOW);
}

void Buzzer_Toggle()
{
	Dio_TogglChannel(BUZZER_PORT,BUZZER_PIN);
    1064:	80 e0       	ldi	r24, 0x00	; 0
    1066:	63 e0       	ldi	r22, 0x03	; 3
    1068:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <Dio_TogglChannel>
}
    106c:	08 95       	ret

0000106e <Buzzer_OFF>:
	Dio_WriteChannel(BUZZER_PORT,BUZZER_PIN,STD_HIGH);
}

void Buzzer_OFF()
{
	Dio_WriteChannel(BUZZER_PORT,BUZZER_PIN,STD_LOW);
    106e:	80 e0       	ldi	r24, 0x00	; 0
    1070:	63 e0       	ldi	r22, 0x03	; 3
    1072:	40 e0       	ldi	r20, 0x00	; 0
    1074:	0e 94 c4 09 	call	0x1388	; 0x1388 <Dio_WriteChannel>
}
    1078:	08 95       	ret

0000107a <Buzzer_ON>:
	Dio_ConfigChannel(BUZZER_PORT,BUZZER_PIN,OUTPUT);
}

void Buzzer_ON()
{
	Dio_WriteChannel(BUZZER_PORT,BUZZER_PIN,STD_HIGH);
    107a:	80 e0       	ldi	r24, 0x00	; 0
    107c:	63 e0       	ldi	r22, 0x03	; 3
    107e:	41 e0       	ldi	r20, 0x01	; 1
    1080:	0e 94 c4 09 	call	0x1388	; 0x1388 <Dio_WriteChannel>
}
    1084:	08 95       	ret

00001086 <Buzzer_Init>:
 */
#include "Buzzer.h"

void Buzzer_Init()
{
	Dio_ConfigChannel(BUZZER_PORT,BUZZER_PIN,OUTPUT);
    1086:	80 e0       	ldi	r24, 0x00	; 0
    1088:	63 e0       	ldi	r22, 0x03	; 3
    108a:	41 e0       	ldi	r20, 0x01	; 1
    108c:	0e 94 45 09 	call	0x128a	; 0x128a <Dio_ConfigChannel>
}
    1090:	08 95       	ret

00001092 <Button_GetStatus>:
	Dio_ConfigChannel(BUTTON2_PORT,BUTTON2_PIN,INPUT);
}
button_type Button_GetStatus(buttonID_type button)
{
	button_type status = RELEASED;
	switch (button)
    1092:	81 30       	cpi	r24, 0x01	; 1
    1094:	79 f0       	breq	.+30     	; 0x10b4 <Button_GetStatus+0x22>
    1096:	81 30       	cpi	r24, 0x01	; 1
    1098:	20 f0       	brcs	.+8      	; 0x10a2 <Button_GetStatus+0x10>
    109a:	82 30       	cpi	r24, 0x02	; 2
    109c:	a1 f0       	breq	.+40     	; 0x10c6 <Button_GetStatus+0x34>
    109e:	90 e0       	ldi	r25, 0x00	; 0
    10a0:	1a c0       	rjmp	.+52     	; 0x10d6 <Button_GetStatus+0x44>
	{
	case BUTTON0:
		if (Dio_ReadChannel(BUTTON0_PORT,BUTTON0_PIN) == STD_HIGH)
    10a2:	81 e0       	ldi	r24, 0x01	; 1
    10a4:	60 e0       	ldi	r22, 0x00	; 0
    10a6:	0e 94 af 0a 	call	0x155e	; 0x155e <Dio_ReadChannel>
    10aa:	90 e0       	ldi	r25, 0x00	; 0
    10ac:	81 30       	cpi	r24, 0x01	; 1
    10ae:	99 f4       	brne	.+38     	; 0x10d6 <Button_GetStatus+0x44>
    10b0:	91 e0       	ldi	r25, 0x01	; 1
    10b2:	11 c0       	rjmp	.+34     	; 0x10d6 <Button_GetStatus+0x44>
			status = RELEASED;
		}
		break;

	case BUTTON1:
		if (Dio_ReadChannel(BUTTON1_PORT,BUTTON1_PIN) == STD_HIGH)
    10b4:	81 e0       	ldi	r24, 0x01	; 1
    10b6:	64 e0       	ldi	r22, 0x04	; 4
    10b8:	0e 94 af 0a 	call	0x155e	; 0x155e <Dio_ReadChannel>
    10bc:	90 e0       	ldi	r25, 0x00	; 0
    10be:	81 30       	cpi	r24, 0x01	; 1
    10c0:	51 f4       	brne	.+20     	; 0x10d6 <Button_GetStatus+0x44>
    10c2:	91 e0       	ldi	r25, 0x01	; 1
    10c4:	08 c0       	rjmp	.+16     	; 0x10d6 <Button_GetStatus+0x44>
			status = RELEASED;
		}
		break;

	case BUTTON2:
		if (Dio_ReadChannel(BUTTON2_PORT,BUTTON2_PIN) == STD_HIGH)
    10c6:	83 e0       	ldi	r24, 0x03	; 3
    10c8:	62 e0       	ldi	r22, 0x02	; 2
    10ca:	0e 94 af 0a 	call	0x155e	; 0x155e <Dio_ReadChannel>
    10ce:	90 e0       	ldi	r25, 0x00	; 0
    10d0:	81 30       	cpi	r24, 0x01	; 1
    10d2:	09 f4       	brne	.+2      	; 0x10d6 <Button_GetStatus+0x44>
    10d4:	91 e0       	ldi	r25, 0x01	; 1
			status = RELEASED;
		}
		break;
	}
	return status;
}
    10d6:	89 2f       	mov	r24, r25
    10d8:	08 95       	ret

000010da <Button_Init>:
 */
#include "Button.h"

void Button_Init(void)
{
	Dio_ConfigChannel(BUTTON0_PORT,BUTTON0_PIN,INPUT);
    10da:	81 e0       	ldi	r24, 0x01	; 1
    10dc:	60 e0       	ldi	r22, 0x00	; 0
    10de:	40 e0       	ldi	r20, 0x00	; 0
    10e0:	0e 94 45 09 	call	0x128a	; 0x128a <Dio_ConfigChannel>
	Dio_ConfigChannel(BUTTON1_PORT,BUTTON1_PIN,INPUT);
    10e4:	81 e0       	ldi	r24, 0x01	; 1
    10e6:	64 e0       	ldi	r22, 0x04	; 4
    10e8:	40 e0       	ldi	r20, 0x00	; 0
    10ea:	0e 94 45 09 	call	0x128a	; 0x128a <Dio_ConfigChannel>
	Dio_ConfigChannel(BUTTON2_PORT,BUTTON2_PIN,INPUT);
    10ee:	83 e0       	ldi	r24, 0x03	; 3
    10f0:	62 e0       	ldi	r22, 0x02	; 2
    10f2:	40 e0       	ldi	r20, 0x00	; 0
    10f4:	0e 94 45 09 	call	0x128a	; 0x128a <Dio_ConfigChannel>
}
    10f8:	08 95       	ret

000010fa <WDG_ON>:
 *****************************************/
#include <Wdg.h>
void WDG_ON(void)
{
	/*	Set Watchdog Timer Window to 2.1 Sec	*/
	WDG_WDTCR_REG |= WDG_WINDOW_5V_2POINT1_SEC;
    10fa:	e1 e4       	ldi	r30, 0x41	; 65
    10fc:	f0 e0       	ldi	r31, 0x00	; 0
    10fe:	80 81       	ld	r24, Z
    1100:	87 60       	ori	r24, 0x07	; 7
    1102:	80 83       	st	Z, r24
	/*	Enable Watchdog Timer	*/
	SET_BIT(WDG_WDTCR_REG,WDG_ENABLE_BIT);
    1104:	80 81       	ld	r24, Z
    1106:	88 60       	ori	r24, 0x08	; 8
    1108:	80 83       	st	Z, r24
}
    110a:	08 95       	ret

0000110c <WDG_OFF>:
void WDG_OFF(void)
{
	WDG_WDTCR_REG =(WDG_ENABLE)|(WDG_TURN_OFF_ENABLE);
    110c:	e1 e4       	ldi	r30, 0x41	; 65
    110e:	f0 e0       	ldi	r31, 0x00	; 0
    1110:	88 e1       	ldi	r24, 0x18	; 24
    1112:	80 83       	st	Z, r24
	CLR_BIT(WDG_WDTCR_REG,WDG_ENABLE_BIT);
    1114:	80 81       	ld	r24, Z
    1116:	87 7f       	andi	r24, 0xF7	; 247
    1118:	80 83       	st	Z, r24
}
    111a:	08 95       	ret

0000111c <WDG_Refresh>:
void WDG_Refresh(void)
{
	asm("WDR");
    111c:	a8 95       	wdr
}
    111e:	08 95       	ret

00001120 <UART_Init>:
#include <Uart.h>

void UART_Init(u16 baudRate)
{
	/* Set baud rate */
	UART_UBRRH_REG = (u8)(baudRate>>8);
    1120:	a0 e4       	ldi	r26, 0x40	; 64
    1122:	b0 e0       	ldi	r27, 0x00	; 0
    1124:	9c 93       	st	X, r25
	UART_UBRRL_REG = (u8)baudRate;
    1126:	89 b9       	out	0x09, r24	; 9
	/* Enable receiver and transmitter */
	SET_BIT(UART_UCSRB_REG,RXEN_BIT_NO);  /* Enable Receiver*/
    1128:	ea e2       	ldi	r30, 0x2A	; 42
    112a:	f0 e0       	ldi	r31, 0x00	; 0
    112c:	80 81       	ld	r24, Z
    112e:	80 61       	ori	r24, 0x10	; 16
    1130:	80 83       	st	Z, r24
	SET_BIT(UART_UCSRB_REG,TXEN_BIT_NO);  /* Enable Transmitter */
    1132:	80 81       	ld	r24, Z
    1134:	88 60       	ori	r24, 0x08	; 8
    1136:	80 83       	st	Z, r24
	/* Set frame format: 8data, 1stop bit, Even Parity */
	UART_UCSRC_REG |= (1 << URSEL_BIT_NO)|UART_8_BIT_DATA | UART_EVEN_PARITY;
    1138:	8c 91       	ld	r24, X
    113a:	86 6a       	ori	r24, 0xA6	; 166
    113c:	8c 93       	st	X, r24
}
    113e:	08 95       	ret

00001140 <UART_TransmitChr>:

void UART_TransmitChr(u8 data)
{
    1140:	98 2f       	mov	r25, r24
	/* Wait for empty transmit buffer */
	while (!(CHK_BIT(UART_UCSRA_REG,UDRE_BIT_NO)))
    1142:	eb e2       	ldi	r30, 0x2B	; 43
    1144:	f0 e0       	ldi	r31, 0x00	; 0
    1146:	80 81       	ld	r24, Z
    1148:	85 ff       	sbrs	r24, 5
    114a:	fd cf       	rjmp	.-6      	; 0x1146 <UART_TransmitChr+0x6>
			;
	/* Put data into buffer, sends the data */
	UART_UDR_REG = data;
    114c:	9c b9       	out	0x0c, r25	; 12
}
    114e:	08 95       	ret

00001150 <UART_TransmitStr>:

void UART_TransmitStr(u8 *str)
{
    1150:	cf 93       	push	r28
    1152:	df 93       	push	r29
    1154:	ec 01       	movw	r28, r24
	/* Wait for empty transmit buffer */
	while (*str != '\0')
    1156:	88 81       	ld	r24, Y
    1158:	88 23       	and	r24, r24
    115a:	31 f0       	breq	.+12     	; 0x1168 <UART_TransmitStr+0x18>
	{
		UART_TransmitChr(*str);
    115c:	0e 94 a0 08 	call	0x1140	; 0x1140 <UART_TransmitChr>
		str++;
    1160:	21 96       	adiw	r28, 0x01	; 1
}

void UART_TransmitStr(u8 *str)
{
	/* Wait for empty transmit buffer */
	while (*str != '\0')
    1162:	88 81       	ld	r24, Y
    1164:	88 23       	and	r24, r24
    1166:	d1 f7       	brne	.-12     	; 0x115c <UART_TransmitStr+0xc>
	{
		UART_TransmitChr(*str);
		str++;
	}
}
    1168:	df 91       	pop	r29
    116a:	cf 91       	pop	r28
    116c:	08 95       	ret

0000116e <UART_ReceiveChr>:

u8 UART_ReceiveChr(void)
{
	/* Wait for data to be received */
	while (!(CHK_BIT(UART_UCSRA_REG,RXC_BIT_NO)))
    116e:	eb e2       	ldi	r30, 0x2B	; 43
    1170:	f0 e0       	ldi	r31, 0x00	; 0
    1172:	80 81       	ld	r24, Z
    1174:	88 23       	and	r24, r24
    1176:	ec f7       	brge	.-6      	; 0x1172 <UART_ReceiveChr+0x4>
			;
	/* Get and return received data from buffer */
	return UART_UDR_REG;
    1178:	8c b1       	in	r24, 0x0c	; 12
}
    117a:	08 95       	ret

0000117c <TIMER0_Init>:
 ********************************/
#include "Timer0.h"
void TIMER0_Init(void)
{
	#if (TIMER_OPERATION_MODE == TIMER0_MODE_INTERVAL)
		TIMER0_TCCR0_REG|= TIMER0_INTERVAL_MODE;
    117c:	e3 e5       	ldi	r30, 0x53	; 83
    117e:	f0 e0       	ldi	r31, 0x00	; 0
    1180:	80 81       	ld	r24, Z
    1182:	80 83       	st	Z, r24
	#elif (TIMER_OPERATION_MODE == TIMER0_MODE_PWM_PHASE_CORRECT)
		TIMER0_TCCR0_REG|= TIMER0_PWM_PHASE_CORRECT;
	#else
	#error "You Shall Define Timer Operation Mode In Timer0_Cfg.h"
	#endif
}
    1184:	08 95       	ret

00001186 <TIMER0_Start>:
#if ((TIMER_OPERATION_MODE == TIMER0_MODE_INTERVAL) || (TIMER_OPERATION_MODE == TIMER0_MODE_CTC))
void TIMER0_Start(u8 prescaler)
{
	TIMER0_TCCR0_REG |=prescaler;
    1186:	e3 e5       	ldi	r30, 0x53	; 83
    1188:	f0 e0       	ldi	r31, 0x00	; 0
    118a:	90 81       	ld	r25, Z
    118c:	89 2b       	or	r24, r25
    118e:	80 83       	st	Z, r24
}
    1190:	08 95       	ret

00001192 <TIMER0_Stop>:

void TIMER0_Stop(void)
{
	TIMER0_TCCR0_REG &=0xFC;
    1192:	e3 e5       	ldi	r30, 0x53	; 83
    1194:	f0 e0       	ldi	r31, 0x00	; 0
    1196:	80 81       	ld	r24, Z
    1198:	8c 7f       	andi	r24, 0xFC	; 252
    119a:	80 83       	st	Z, r24
}
    119c:	08 95       	ret

0000119e <TIMER0_SetPreload>:

void TIMER0_SetPreload(u8 preLoadValue)
{
	TIMER0_TCNT0_REG = preLoadValue;
    119e:	82 bf       	out	0x32, r24	; 50
}
    11a0:	08 95       	ret

000011a2 <TIMER0_GetPreload>:
u8 TIMER0_GetPreload()
{
	return TIMER0_TCNT0_REG;
    11a2:	82 b7       	in	r24, 0x32	; 50
}
    11a4:	08 95       	ret

000011a6 <TIMER0_EnableInterrupt>:
void TIMER0_EnableInterrupt(void)
{
#if (TIMER_OPERATION_MODE == TIMER0_MODE_INTERVAL)
	SET_BIT(TIMER0_TIMSK_REG,TIMER0_INTERVAL_INT_ENABLE_BIT_NO);
    11a6:	e9 e5       	ldi	r30, 0x59	; 89
    11a8:	f0 e0       	ldi	r31, 0x00	; 0
    11aa:	80 81       	ld	r24, Z
    11ac:	81 60       	ori	r24, 0x01	; 1
    11ae:	80 83       	st	Z, r24
#elif (TIMER_OPERATION_MODE == TIMER0_MODE_CTC)
	SET_BIT(TIMER0_TIMSK_REG,TIMER0_CTC_INT_ENABLE_BIT_NO);
#endif
}
    11b0:	08 95       	ret

000011b2 <TIMER0_DisableInterrupt>:
void TIMER0_DisableInterrupt(void)
{
#if (TIMER_OPERATION_MODE == TIMER0_MODE_INTERVAL)
	CLR_BIT(TIMER0_TIMSK_REG,TIMER0_INTERVAL_INT_ENABLE_BIT_NO);
    11b2:	e9 e5       	ldi	r30, 0x59	; 89
    11b4:	f0 e0       	ldi	r31, 0x00	; 0
    11b6:	80 81       	ld	r24, Z
    11b8:	8e 7f       	andi	r24, 0xFE	; 254
    11ba:	80 83       	st	Z, r24
#elif (TIMER_OPERATION_MODE == TIMER0_MODE_CTC)
	CLR_BIT(TIMER0_TIMSK_REG,TIMER0_CTC_INT_ENABLE_BIT_NO);
#endif
}
    11bc:	08 95       	ret

000011be <TIMER0_SetCompareValue>:
void TIMER0_SetCompareValue(u8 compareValue)
{
	TIMER0_OCR0_REG = compareValue;
    11be:	8c bf       	out	0x3c, r24	; 60
}
    11c0:	08 95       	ret

000011c2 <Glbl_Interrupt_Enable>:

#include "Glbl_INT.h"

void Glbl_Interrupt_Enable()
{
	SET_BIT(GLBL_SREG_REG,7);
    11c2:	ef e5       	ldi	r30, 0x5F	; 95
    11c4:	f0 e0       	ldi	r31, 0x00	; 0
    11c6:	80 81       	ld	r24, Z
    11c8:	80 68       	ori	r24, 0x80	; 128
    11ca:	80 83       	st	Z, r24
}
    11cc:	08 95       	ret

000011ce <Glbl_Interrupt_Disable>:
void Glbl_Interrupt_Disable()
{
	CLR_BIT(GLBL_SREG_REG,7);
    11ce:	ef e5       	ldi	r30, 0x5F	; 95
    11d0:	f0 e0       	ldi	r31, 0x00	; 0
    11d2:	80 81       	ld	r24, Z
    11d4:	8f 77       	andi	r24, 0x7F	; 127
    11d6:	80 83       	st	Z, r24
}
    11d8:	08 95       	ret

000011da <Ext_Interrupt_Enable>:
#include "Ext_INT.h"


void Ext_Interrupt_Enable(ext_Int_t intID)
{
	switch (intID)
    11da:	81 30       	cpi	r24, 0x01	; 1
    11dc:	59 f0       	breq	.+22     	; 0x11f4 <Ext_Interrupt_Enable+0x1a>
    11de:	81 30       	cpi	r24, 0x01	; 1
    11e0:	18 f0       	brcs	.+6      	; 0x11e8 <Ext_Interrupt_Enable+0xe>
    11e2:	82 30       	cpi	r24, 0x02	; 2
    11e4:	91 f4       	brne	.+36     	; 0x120a <Ext_Interrupt_Enable+0x30>
    11e6:	0c c0       	rjmp	.+24     	; 0x1200 <Ext_Interrupt_Enable+0x26>
	{
	case EXT_INT0:
			SET_BIT(EXT_INT_GICR_REG,6);
    11e8:	eb e5       	ldi	r30, 0x5B	; 91
    11ea:	f0 e0       	ldi	r31, 0x00	; 0
    11ec:	80 81       	ld	r24, Z
    11ee:	80 64       	ori	r24, 0x40	; 64
    11f0:	80 83       	st	Z, r24
    11f2:	08 95       	ret
			break;

	case EXT_INT1:
			SET_BIT(EXT_INT_GICR_REG,7);
    11f4:	eb e5       	ldi	r30, 0x5B	; 91
    11f6:	f0 e0       	ldi	r31, 0x00	; 0
    11f8:	80 81       	ld	r24, Z
    11fa:	80 68       	ori	r24, 0x80	; 128
    11fc:	80 83       	st	Z, r24
    11fe:	08 95       	ret
			break;

	case EXT_INT2:
			SET_BIT(EXT_INT_GICR_REG,5);
    1200:	eb e5       	ldi	r30, 0x5B	; 91
    1202:	f0 e0       	ldi	r31, 0x00	; 0
    1204:	80 81       	ld	r24, Z
    1206:	80 62       	ori	r24, 0x20	; 32
    1208:	80 83       	st	Z, r24
    120a:	08 95       	ret

0000120c <Ext_Interrupt_Disable>:
			break;
	}
}
void Ext_Interrupt_Disable(ext_Int_t intID)
{
	switch (intID)
    120c:	81 30       	cpi	r24, 0x01	; 1
    120e:	59 f0       	breq	.+22     	; 0x1226 <Ext_Interrupt_Disable+0x1a>
    1210:	81 30       	cpi	r24, 0x01	; 1
    1212:	18 f0       	brcs	.+6      	; 0x121a <Ext_Interrupt_Disable+0xe>
    1214:	82 30       	cpi	r24, 0x02	; 2
    1216:	91 f4       	brne	.+36     	; 0x123c <Ext_Interrupt_Disable+0x30>
    1218:	0c c0       	rjmp	.+24     	; 0x1232 <Ext_Interrupt_Disable+0x26>
	{
	case EXT_INT0:
			CLR_BIT(EXT_INT_GICR_REG,6);
    121a:	eb e5       	ldi	r30, 0x5B	; 91
    121c:	f0 e0       	ldi	r31, 0x00	; 0
    121e:	80 81       	ld	r24, Z
    1220:	8f 7b       	andi	r24, 0xBF	; 191
    1222:	80 83       	st	Z, r24
    1224:	08 95       	ret
			break;

	case EXT_INT1:
			CLR_BIT(EXT_INT_GICR_REG,7);
    1226:	eb e5       	ldi	r30, 0x5B	; 91
    1228:	f0 e0       	ldi	r31, 0x00	; 0
    122a:	80 81       	ld	r24, Z
    122c:	8f 77       	andi	r24, 0x7F	; 127
    122e:	80 83       	st	Z, r24
    1230:	08 95       	ret
			break;

	case EXT_INT2:
			CLR_BIT(EXT_INT_GICR_REG,5);
    1232:	eb e5       	ldi	r30, 0x5B	; 91
    1234:	f0 e0       	ldi	r31, 0x00	; 0
    1236:	80 81       	ld	r24, Z
    1238:	8f 7d       	andi	r24, 0xDF	; 223
    123a:	80 83       	st	Z, r24
    123c:	08 95       	ret

0000123e <Ext_Interrupt_SncControl>:

}

void Ext_Interrupt_SncControl(ext_Int_t intID, snc_mode_t mode)
{
	switch (intID)
    123e:	81 30       	cpi	r24, 0x01	; 1
    1240:	59 f0       	breq	.+22     	; 0x1258 <Ext_Interrupt_SncControl+0x1a>
    1242:	81 30       	cpi	r24, 0x01	; 1
    1244:	18 f0       	brcs	.+6      	; 0x124c <Ext_Interrupt_SncControl+0xe>
    1246:	82 30       	cpi	r24, 0x02	; 2
    1248:	f9 f4       	brne	.+62     	; 0x1288 <Ext_Interrupt_SncControl+0x4a>
    124a:	0f c0       	rjmp	.+30     	; 0x126a <Ext_Interrupt_SncControl+0x2c>
	{
		case EXT_INT0:
			EXT_INT_MCUCR_REG |=(mode<<0);
    124c:	e5 e5       	ldi	r30, 0x55	; 85
    124e:	f0 e0       	ldi	r31, 0x00	; 0
    1250:	80 81       	ld	r24, Z
    1252:	86 2b       	or	r24, r22
    1254:	80 83       	st	Z, r24
    1256:	08 95       	ret
			break;

		case EXT_INT1:
			EXT_INT_MCUCR_REG |=(mode<<2);
    1258:	e5 e5       	ldi	r30, 0x55	; 85
    125a:	f0 e0       	ldi	r31, 0x00	; 0
    125c:	90 81       	ld	r25, Z
    125e:	86 2f       	mov	r24, r22
    1260:	88 0f       	add	r24, r24
    1262:	88 0f       	add	r24, r24
    1264:	89 2b       	or	r24, r25
    1266:	80 83       	st	Z, r24
    1268:	08 95       	ret
			break;

		case EXT_INT2:
			if (mode == FAILING_EDGE)
    126a:	62 30       	cpi	r22, 0x02	; 2
    126c:	31 f4       	brne	.+12     	; 0x127a <Ext_Interrupt_SncControl+0x3c>
			{
				CLR_BIT(EXT_INT_MCUCSR_REG,6);
    126e:	e4 e5       	ldi	r30, 0x54	; 84
    1270:	f0 e0       	ldi	r31, 0x00	; 0
    1272:	80 81       	ld	r24, Z
    1274:	8f 7b       	andi	r24, 0xBF	; 191
    1276:	80 83       	st	Z, r24
    1278:	08 95       	ret
			}
			else if (mode == RISING_EDGE)
    127a:	63 30       	cpi	r22, 0x03	; 3
    127c:	29 f4       	brne	.+10     	; 0x1288 <Ext_Interrupt_SncControl+0x4a>
			{
				SET_BIT(EXT_INT_MCUCSR_REG,6);
    127e:	e4 e5       	ldi	r30, 0x54	; 84
    1280:	f0 e0       	ldi	r31, 0x00	; 0
    1282:	80 81       	ld	r24, Z
    1284:	80 64       	ori	r24, 0x40	; 64
    1286:	80 83       	st	Z, r24
    1288:	08 95       	ret

0000128a <Dio_ConfigChannel>:
#include "Dio.h"

/*DDRx      DDRA, DDRB, DDRC, DDRD*/
void Dio_ConfigChannel(port_type port,pin_type pin,direction_type direction)
{
	switch (port)
    128a:	81 30       	cpi	r24, 0x01	; 1
    128c:	31 f1       	breq	.+76     	; 0x12da <Dio_ConfigChannel+0x50>
    128e:	81 30       	cpi	r24, 0x01	; 1
    1290:	38 f0       	brcs	.+14     	; 0x12a0 <Dio_ConfigChannel+0x16>
    1292:	82 30       	cpi	r24, 0x02	; 2
    1294:	09 f4       	brne	.+2      	; 0x1298 <Dio_ConfigChannel+0xe>
    1296:	3e c0       	rjmp	.+124    	; 0x1314 <Dio_ConfigChannel+0x8a>
    1298:	83 30       	cpi	r24, 0x03	; 3
    129a:	09 f0       	breq	.+2      	; 0x129e <Dio_ConfigChannel+0x14>
    129c:	74 c0       	rjmp	.+232    	; 0x1386 <Dio_ConfigChannel+0xfc>
    129e:	57 c0       	rjmp	.+174    	; 0x134e <Dio_ConfigChannel+0xc4>
	{
	case DIO_PORTA:
		if (direction == INPUT)
    12a0:	44 23       	and	r20, r20
    12a2:	71 f4       	brne	.+28     	; 0x12c0 <Dio_ConfigChannel+0x36>
		{
			CLR_BIT(DIO_DDRA_REG,pin);
    12a4:	ea e3       	ldi	r30, 0x3A	; 58
    12a6:	f0 e0       	ldi	r31, 0x00	; 0
    12a8:	20 81       	ld	r18, Z
    12aa:	81 e0       	ldi	r24, 0x01	; 1
    12ac:	90 e0       	ldi	r25, 0x00	; 0
    12ae:	02 c0       	rjmp	.+4      	; 0x12b4 <Dio_ConfigChannel+0x2a>
    12b0:	88 0f       	add	r24, r24
    12b2:	99 1f       	adc	r25, r25
    12b4:	6a 95       	dec	r22
    12b6:	e2 f7       	brpl	.-8      	; 0x12b0 <Dio_ConfigChannel+0x26>
    12b8:	80 95       	com	r24
    12ba:	82 23       	and	r24, r18
    12bc:	80 83       	st	Z, r24
    12be:	08 95       	ret
		}
		else
		{
			SET_BIT(DIO_DDRA_REG,pin);
    12c0:	ea e3       	ldi	r30, 0x3A	; 58
    12c2:	f0 e0       	ldi	r31, 0x00	; 0
    12c4:	20 81       	ld	r18, Z
    12c6:	81 e0       	ldi	r24, 0x01	; 1
    12c8:	90 e0       	ldi	r25, 0x00	; 0
    12ca:	02 c0       	rjmp	.+4      	; 0x12d0 <Dio_ConfigChannel+0x46>
    12cc:	88 0f       	add	r24, r24
    12ce:	99 1f       	adc	r25, r25
    12d0:	6a 95       	dec	r22
    12d2:	e2 f7       	brpl	.-8      	; 0x12cc <Dio_ConfigChannel+0x42>
    12d4:	28 2b       	or	r18, r24
    12d6:	20 83       	st	Z, r18
    12d8:	08 95       	ret
		}
		break;

	case DIO_PORTB:
		if (direction == INPUT)
    12da:	44 23       	and	r20, r20
    12dc:	71 f4       	brne	.+28     	; 0x12fa <Dio_ConfigChannel+0x70>
		{
			CLR_BIT(DIO_DDRB_REG,pin);
    12de:	e7 e3       	ldi	r30, 0x37	; 55
    12e0:	f0 e0       	ldi	r31, 0x00	; 0
    12e2:	20 81       	ld	r18, Z
    12e4:	81 e0       	ldi	r24, 0x01	; 1
    12e6:	90 e0       	ldi	r25, 0x00	; 0
    12e8:	02 c0       	rjmp	.+4      	; 0x12ee <Dio_ConfigChannel+0x64>
    12ea:	88 0f       	add	r24, r24
    12ec:	99 1f       	adc	r25, r25
    12ee:	6a 95       	dec	r22
    12f0:	e2 f7       	brpl	.-8      	; 0x12ea <Dio_ConfigChannel+0x60>
    12f2:	80 95       	com	r24
    12f4:	82 23       	and	r24, r18
    12f6:	80 83       	st	Z, r24
    12f8:	08 95       	ret
		}
		else
		{
			SET_BIT(DIO_DDRB_REG,pin);
    12fa:	e7 e3       	ldi	r30, 0x37	; 55
    12fc:	f0 e0       	ldi	r31, 0x00	; 0
    12fe:	20 81       	ld	r18, Z
    1300:	81 e0       	ldi	r24, 0x01	; 1
    1302:	90 e0       	ldi	r25, 0x00	; 0
    1304:	02 c0       	rjmp	.+4      	; 0x130a <Dio_ConfigChannel+0x80>
    1306:	88 0f       	add	r24, r24
    1308:	99 1f       	adc	r25, r25
    130a:	6a 95       	dec	r22
    130c:	e2 f7       	brpl	.-8      	; 0x1306 <Dio_ConfigChannel+0x7c>
    130e:	28 2b       	or	r18, r24
    1310:	20 83       	st	Z, r18
    1312:	08 95       	ret
		}
		break;

	case DIO_PORTC:
		if (direction == INPUT)
    1314:	44 23       	and	r20, r20
    1316:	71 f4       	brne	.+28     	; 0x1334 <Dio_ConfigChannel+0xaa>
		{
			CLR_BIT(DIO_DDRC_REG,pin);
    1318:	e4 e3       	ldi	r30, 0x34	; 52
    131a:	f0 e0       	ldi	r31, 0x00	; 0
    131c:	20 81       	ld	r18, Z
    131e:	81 e0       	ldi	r24, 0x01	; 1
    1320:	90 e0       	ldi	r25, 0x00	; 0
    1322:	02 c0       	rjmp	.+4      	; 0x1328 <Dio_ConfigChannel+0x9e>
    1324:	88 0f       	add	r24, r24
    1326:	99 1f       	adc	r25, r25
    1328:	6a 95       	dec	r22
    132a:	e2 f7       	brpl	.-8      	; 0x1324 <Dio_ConfigChannel+0x9a>
    132c:	80 95       	com	r24
    132e:	82 23       	and	r24, r18
    1330:	80 83       	st	Z, r24
    1332:	08 95       	ret
		}
		else
		{
			SET_BIT(DIO_DDRC_REG,pin);
    1334:	e4 e3       	ldi	r30, 0x34	; 52
    1336:	f0 e0       	ldi	r31, 0x00	; 0
    1338:	20 81       	ld	r18, Z
    133a:	81 e0       	ldi	r24, 0x01	; 1
    133c:	90 e0       	ldi	r25, 0x00	; 0
    133e:	02 c0       	rjmp	.+4      	; 0x1344 <Dio_ConfigChannel+0xba>
    1340:	88 0f       	add	r24, r24
    1342:	99 1f       	adc	r25, r25
    1344:	6a 95       	dec	r22
    1346:	e2 f7       	brpl	.-8      	; 0x1340 <Dio_ConfigChannel+0xb6>
    1348:	28 2b       	or	r18, r24
    134a:	20 83       	st	Z, r18
    134c:	08 95       	ret
		}
		break;

	case DIO_PORTD:
		if (direction == INPUT)
    134e:	44 23       	and	r20, r20
    1350:	71 f4       	brne	.+28     	; 0x136e <Dio_ConfigChannel+0xe4>
		{
			CLR_BIT(DIO_DDRD_REG,pin);
    1352:	e1 e3       	ldi	r30, 0x31	; 49
    1354:	f0 e0       	ldi	r31, 0x00	; 0
    1356:	20 81       	ld	r18, Z
    1358:	81 e0       	ldi	r24, 0x01	; 1
    135a:	90 e0       	ldi	r25, 0x00	; 0
    135c:	02 c0       	rjmp	.+4      	; 0x1362 <Dio_ConfigChannel+0xd8>
    135e:	88 0f       	add	r24, r24
    1360:	99 1f       	adc	r25, r25
    1362:	6a 95       	dec	r22
    1364:	e2 f7       	brpl	.-8      	; 0x135e <Dio_ConfigChannel+0xd4>
    1366:	80 95       	com	r24
    1368:	82 23       	and	r24, r18
    136a:	80 83       	st	Z, r24
    136c:	08 95       	ret
		}
		else
		{
			SET_BIT(DIO_DDRD_REG,pin);
    136e:	e1 e3       	ldi	r30, 0x31	; 49
    1370:	f0 e0       	ldi	r31, 0x00	; 0
    1372:	20 81       	ld	r18, Z
    1374:	81 e0       	ldi	r24, 0x01	; 1
    1376:	90 e0       	ldi	r25, 0x00	; 0
    1378:	02 c0       	rjmp	.+4      	; 0x137e <Dio_ConfigChannel+0xf4>
    137a:	88 0f       	add	r24, r24
    137c:	99 1f       	adc	r25, r25
    137e:	6a 95       	dec	r22
    1380:	e2 f7       	brpl	.-8      	; 0x137a <Dio_ConfigChannel+0xf0>
    1382:	28 2b       	or	r18, r24
    1384:	20 83       	st	Z, r18
    1386:	08 95       	ret

00001388 <Dio_WriteChannel>:
		break;
	}
}
void Dio_WriteChannel(port_type port,pin_type pin,level_type level)
{
	switch (port)
    1388:	81 30       	cpi	r24, 0x01	; 1
    138a:	31 f1       	breq	.+76     	; 0x13d8 <Dio_WriteChannel+0x50>
    138c:	81 30       	cpi	r24, 0x01	; 1
    138e:	38 f0       	brcs	.+14     	; 0x139e <Dio_WriteChannel+0x16>
    1390:	82 30       	cpi	r24, 0x02	; 2
    1392:	09 f4       	brne	.+2      	; 0x1396 <Dio_WriteChannel+0xe>
    1394:	3e c0       	rjmp	.+124    	; 0x1412 <Dio_WriteChannel+0x8a>
    1396:	83 30       	cpi	r24, 0x03	; 3
    1398:	09 f0       	breq	.+2      	; 0x139c <Dio_WriteChannel+0x14>
    139a:	74 c0       	rjmp	.+232    	; 0x1484 <Dio_WriteChannel+0xfc>
    139c:	57 c0       	rjmp	.+174    	; 0x144c <Dio_WriteChannel+0xc4>
	{
	case DIO_PORTA:
		if (level == STD_HIGH)
    139e:	41 30       	cpi	r20, 0x01	; 1
    13a0:	69 f4       	brne	.+26     	; 0x13bc <Dio_WriteChannel+0x34>
		{
			SET_BIT(DIO_PORTA_REG,pin);
    13a2:	eb e3       	ldi	r30, 0x3B	; 59
    13a4:	f0 e0       	ldi	r31, 0x00	; 0
    13a6:	20 81       	ld	r18, Z
    13a8:	81 e0       	ldi	r24, 0x01	; 1
    13aa:	90 e0       	ldi	r25, 0x00	; 0
    13ac:	02 c0       	rjmp	.+4      	; 0x13b2 <Dio_WriteChannel+0x2a>
    13ae:	88 0f       	add	r24, r24
    13b0:	99 1f       	adc	r25, r25
    13b2:	6a 95       	dec	r22
    13b4:	e2 f7       	brpl	.-8      	; 0x13ae <Dio_WriteChannel+0x26>
    13b6:	28 2b       	or	r18, r24
    13b8:	20 83       	st	Z, r18
    13ba:	08 95       	ret
		}
		else
		{
			CLR_BIT(DIO_PORTA_REG,pin);
    13bc:	eb e3       	ldi	r30, 0x3B	; 59
    13be:	f0 e0       	ldi	r31, 0x00	; 0
    13c0:	20 81       	ld	r18, Z
    13c2:	81 e0       	ldi	r24, 0x01	; 1
    13c4:	90 e0       	ldi	r25, 0x00	; 0
    13c6:	02 c0       	rjmp	.+4      	; 0x13cc <Dio_WriteChannel+0x44>
    13c8:	88 0f       	add	r24, r24
    13ca:	99 1f       	adc	r25, r25
    13cc:	6a 95       	dec	r22
    13ce:	e2 f7       	brpl	.-8      	; 0x13c8 <Dio_WriteChannel+0x40>
    13d0:	80 95       	com	r24
    13d2:	82 23       	and	r24, r18
    13d4:	80 83       	st	Z, r24
    13d6:	08 95       	ret
		}
		break;

	case DIO_PORTB:
		if (level == STD_HIGH)
    13d8:	41 30       	cpi	r20, 0x01	; 1
    13da:	69 f4       	brne	.+26     	; 0x13f6 <Dio_WriteChannel+0x6e>
		{
			SET_BIT(DIO_PORTB_REG,pin);
    13dc:	e8 e3       	ldi	r30, 0x38	; 56
    13de:	f0 e0       	ldi	r31, 0x00	; 0
    13e0:	20 81       	ld	r18, Z
    13e2:	81 e0       	ldi	r24, 0x01	; 1
    13e4:	90 e0       	ldi	r25, 0x00	; 0
    13e6:	02 c0       	rjmp	.+4      	; 0x13ec <Dio_WriteChannel+0x64>
    13e8:	88 0f       	add	r24, r24
    13ea:	99 1f       	adc	r25, r25
    13ec:	6a 95       	dec	r22
    13ee:	e2 f7       	brpl	.-8      	; 0x13e8 <Dio_WriteChannel+0x60>
    13f0:	28 2b       	or	r18, r24
    13f2:	20 83       	st	Z, r18
    13f4:	08 95       	ret
		}
		else
		{
			CLR_BIT(DIO_PORTB_REG,pin);
    13f6:	e8 e3       	ldi	r30, 0x38	; 56
    13f8:	f0 e0       	ldi	r31, 0x00	; 0
    13fa:	20 81       	ld	r18, Z
    13fc:	81 e0       	ldi	r24, 0x01	; 1
    13fe:	90 e0       	ldi	r25, 0x00	; 0
    1400:	02 c0       	rjmp	.+4      	; 0x1406 <Dio_WriteChannel+0x7e>
    1402:	88 0f       	add	r24, r24
    1404:	99 1f       	adc	r25, r25
    1406:	6a 95       	dec	r22
    1408:	e2 f7       	brpl	.-8      	; 0x1402 <Dio_WriteChannel+0x7a>
    140a:	80 95       	com	r24
    140c:	82 23       	and	r24, r18
    140e:	80 83       	st	Z, r24
    1410:	08 95       	ret
		}
		break;

	case DIO_PORTC:
		if (level == STD_HIGH)
    1412:	41 30       	cpi	r20, 0x01	; 1
    1414:	69 f4       	brne	.+26     	; 0x1430 <Dio_WriteChannel+0xa8>
		{
			SET_BIT(DIO_PORTC_REG,pin);
    1416:	e5 e3       	ldi	r30, 0x35	; 53
    1418:	f0 e0       	ldi	r31, 0x00	; 0
    141a:	20 81       	ld	r18, Z
    141c:	81 e0       	ldi	r24, 0x01	; 1
    141e:	90 e0       	ldi	r25, 0x00	; 0
    1420:	02 c0       	rjmp	.+4      	; 0x1426 <Dio_WriteChannel+0x9e>
    1422:	88 0f       	add	r24, r24
    1424:	99 1f       	adc	r25, r25
    1426:	6a 95       	dec	r22
    1428:	e2 f7       	brpl	.-8      	; 0x1422 <Dio_WriteChannel+0x9a>
    142a:	28 2b       	or	r18, r24
    142c:	20 83       	st	Z, r18
    142e:	08 95       	ret
		}
		else
		{
			CLR_BIT(DIO_PORTC_REG,pin);
    1430:	e5 e3       	ldi	r30, 0x35	; 53
    1432:	f0 e0       	ldi	r31, 0x00	; 0
    1434:	20 81       	ld	r18, Z
    1436:	81 e0       	ldi	r24, 0x01	; 1
    1438:	90 e0       	ldi	r25, 0x00	; 0
    143a:	02 c0       	rjmp	.+4      	; 0x1440 <Dio_WriteChannel+0xb8>
    143c:	88 0f       	add	r24, r24
    143e:	99 1f       	adc	r25, r25
    1440:	6a 95       	dec	r22
    1442:	e2 f7       	brpl	.-8      	; 0x143c <Dio_WriteChannel+0xb4>
    1444:	80 95       	com	r24
    1446:	82 23       	and	r24, r18
    1448:	80 83       	st	Z, r24
    144a:	08 95       	ret
		}
		break;

	case DIO_PORTD:
		if (level == STD_HIGH)
    144c:	41 30       	cpi	r20, 0x01	; 1
    144e:	69 f4       	brne	.+26     	; 0x146a <Dio_WriteChannel+0xe2>
		{
			SET_BIT(DIO_PORTD_REG,pin);
    1450:	e2 e3       	ldi	r30, 0x32	; 50
    1452:	f0 e0       	ldi	r31, 0x00	; 0
    1454:	20 81       	ld	r18, Z
    1456:	81 e0       	ldi	r24, 0x01	; 1
    1458:	90 e0       	ldi	r25, 0x00	; 0
    145a:	02 c0       	rjmp	.+4      	; 0x1460 <Dio_WriteChannel+0xd8>
    145c:	88 0f       	add	r24, r24
    145e:	99 1f       	adc	r25, r25
    1460:	6a 95       	dec	r22
    1462:	e2 f7       	brpl	.-8      	; 0x145c <Dio_WriteChannel+0xd4>
    1464:	28 2b       	or	r18, r24
    1466:	20 83       	st	Z, r18
    1468:	08 95       	ret
		}
		else
		{
			CLR_BIT(DIO_PORTD_REG,pin);
    146a:	e2 e3       	ldi	r30, 0x32	; 50
    146c:	f0 e0       	ldi	r31, 0x00	; 0
    146e:	20 81       	ld	r18, Z
    1470:	81 e0       	ldi	r24, 0x01	; 1
    1472:	90 e0       	ldi	r25, 0x00	; 0
    1474:	02 c0       	rjmp	.+4      	; 0x147a <Dio_WriteChannel+0xf2>
    1476:	88 0f       	add	r24, r24
    1478:	99 1f       	adc	r25, r25
    147a:	6a 95       	dec	r22
    147c:	e2 f7       	brpl	.-8      	; 0x1476 <Dio_WriteChannel+0xee>
    147e:	80 95       	com	r24
    1480:	82 23       	and	r24, r18
    1482:	80 83       	st	Z, r24
    1484:	08 95       	ret

00001486 <Dio_WriteGroup>:
		break;
	}
}
void Dio_WriteGroup(port_type port,u8 mask,u8 data)
{
	switch(port)
    1486:	81 30       	cpi	r24, 0x01	; 1
    1488:	91 f0       	breq	.+36     	; 0x14ae <Dio_WriteGroup+0x28>
    148a:	81 30       	cpi	r24, 0x01	; 1
    148c:	28 f0       	brcs	.+10     	; 0x1498 <Dio_WriteGroup+0x12>
    148e:	82 30       	cpi	r24, 0x02	; 2
    1490:	b9 f0       	breq	.+46     	; 0x14c0 <Dio_WriteGroup+0x3a>
    1492:	83 30       	cpi	r24, 0x03	; 3
    1494:	31 f5       	brne	.+76     	; 0x14e2 <Dio_WriteGroup+0x5c>
    1496:	1d c0       	rjmp	.+58     	; 0x14d2 <Dio_WriteGroup+0x4c>
	{
	case DIO_PORTA:
		DIO_PORTA_REG = (DIO_PORTA_REG&~mask)|(data & mask);
    1498:	eb e3       	ldi	r30, 0x3B	; 59
    149a:	f0 e0       	ldi	r31, 0x00	; 0
    149c:	20 81       	ld	r18, Z
    149e:	94 2f       	mov	r25, r20
    14a0:	96 23       	and	r25, r22
    14a2:	86 2f       	mov	r24, r22
    14a4:	80 95       	com	r24
    14a6:	82 23       	and	r24, r18
    14a8:	98 2b       	or	r25, r24
    14aa:	90 83       	st	Z, r25
    14ac:	08 95       	ret
		break;

	case DIO_PORTB:
		DIO_PORTB_REG = (DIO_PORTA_REG&~mask)|(data & mask);
    14ae:	2b b3       	in	r18, 0x1b	; 27
    14b0:	94 2f       	mov	r25, r20
    14b2:	96 23       	and	r25, r22
    14b4:	86 2f       	mov	r24, r22
    14b6:	80 95       	com	r24
    14b8:	82 23       	and	r24, r18
    14ba:	98 2b       	or	r25, r24
    14bc:	98 bb       	out	0x18, r25	; 24
    14be:	08 95       	ret
		break;

	case DIO_PORTC:
		DIO_PORTC_REG = (DIO_PORTA_REG&~mask)|(data & mask);
    14c0:	2b b3       	in	r18, 0x1b	; 27
    14c2:	94 2f       	mov	r25, r20
    14c4:	96 23       	and	r25, r22
    14c6:	86 2f       	mov	r24, r22
    14c8:	80 95       	com	r24
    14ca:	82 23       	and	r24, r18
    14cc:	98 2b       	or	r25, r24
    14ce:	95 bb       	out	0x15, r25	; 21
    14d0:	08 95       	ret
		break;

	case DIO_PORTD:
		DIO_PORTD_REG = (DIO_PORTA_REG&~mask)|(data & mask);
    14d2:	2b b3       	in	r18, 0x1b	; 27
    14d4:	94 2f       	mov	r25, r20
    14d6:	96 23       	and	r25, r22
    14d8:	86 2f       	mov	r24, r22
    14da:	80 95       	com	r24
    14dc:	82 23       	and	r24, r18
    14de:	98 2b       	or	r25, r24
    14e0:	92 bb       	out	0x12, r25	; 18
    14e2:	08 95       	ret

000014e4 <Dio_TogglChannel>:
		break;
	}
}
void Dio_TogglChannel(port_type port,pin_type pin)
{
	switch (port)
    14e4:	81 30       	cpi	r24, 0x01	; 1
    14e6:	a1 f0       	breq	.+40     	; 0x1510 <Dio_TogglChannel+0x2c>
    14e8:	81 30       	cpi	r24, 0x01	; 1
    14ea:	28 f0       	brcs	.+10     	; 0x14f6 <Dio_TogglChannel+0x12>
    14ec:	82 30       	cpi	r24, 0x02	; 2
    14ee:	e9 f0       	breq	.+58     	; 0x152a <Dio_TogglChannel+0x46>
    14f0:	83 30       	cpi	r24, 0x03	; 3
    14f2:	a1 f5       	brne	.+104    	; 0x155c <Dio_TogglChannel+0x78>
    14f4:	27 c0       	rjmp	.+78     	; 0x1544 <Dio_TogglChannel+0x60>
	{
	case DIO_PORTA:
		TOGGLE_BIT(DIO_PORTA_REG,pin);
    14f6:	eb e3       	ldi	r30, 0x3B	; 59
    14f8:	f0 e0       	ldi	r31, 0x00	; 0
    14fa:	20 81       	ld	r18, Z
    14fc:	81 e0       	ldi	r24, 0x01	; 1
    14fe:	90 e0       	ldi	r25, 0x00	; 0
    1500:	02 c0       	rjmp	.+4      	; 0x1506 <Dio_TogglChannel+0x22>
    1502:	88 0f       	add	r24, r24
    1504:	99 1f       	adc	r25, r25
    1506:	6a 95       	dec	r22
    1508:	e2 f7       	brpl	.-8      	; 0x1502 <Dio_TogglChannel+0x1e>
    150a:	28 27       	eor	r18, r24
    150c:	20 83       	st	Z, r18
    150e:	08 95       	ret
		break;

	case DIO_PORTB:
		TOGGLE_BIT(DIO_PORTB_REG,pin);
    1510:	e8 e3       	ldi	r30, 0x38	; 56
    1512:	f0 e0       	ldi	r31, 0x00	; 0
    1514:	20 81       	ld	r18, Z
    1516:	81 e0       	ldi	r24, 0x01	; 1
    1518:	90 e0       	ldi	r25, 0x00	; 0
    151a:	02 c0       	rjmp	.+4      	; 0x1520 <Dio_TogglChannel+0x3c>
    151c:	88 0f       	add	r24, r24
    151e:	99 1f       	adc	r25, r25
    1520:	6a 95       	dec	r22
    1522:	e2 f7       	brpl	.-8      	; 0x151c <Dio_TogglChannel+0x38>
    1524:	28 27       	eor	r18, r24
    1526:	20 83       	st	Z, r18
    1528:	08 95       	ret
		break;

	case DIO_PORTC:
		TOGGLE_BIT(DIO_PORTC_REG,pin);
    152a:	e5 e3       	ldi	r30, 0x35	; 53
    152c:	f0 e0       	ldi	r31, 0x00	; 0
    152e:	20 81       	ld	r18, Z
    1530:	81 e0       	ldi	r24, 0x01	; 1
    1532:	90 e0       	ldi	r25, 0x00	; 0
    1534:	02 c0       	rjmp	.+4      	; 0x153a <Dio_TogglChannel+0x56>
    1536:	88 0f       	add	r24, r24
    1538:	99 1f       	adc	r25, r25
    153a:	6a 95       	dec	r22
    153c:	e2 f7       	brpl	.-8      	; 0x1536 <Dio_TogglChannel+0x52>
    153e:	28 27       	eor	r18, r24
    1540:	20 83       	st	Z, r18
    1542:	08 95       	ret
		break;

	case DIO_PORTD:
		TOGGLE_BIT(DIO_PORTD_REG,pin);
    1544:	e2 e3       	ldi	r30, 0x32	; 50
    1546:	f0 e0       	ldi	r31, 0x00	; 0
    1548:	20 81       	ld	r18, Z
    154a:	81 e0       	ldi	r24, 0x01	; 1
    154c:	90 e0       	ldi	r25, 0x00	; 0
    154e:	02 c0       	rjmp	.+4      	; 0x1554 <Dio_TogglChannel+0x70>
    1550:	88 0f       	add	r24, r24
    1552:	99 1f       	adc	r25, r25
    1554:	6a 95       	dec	r22
    1556:	e2 f7       	brpl	.-8      	; 0x1550 <Dio_TogglChannel+0x6c>
    1558:	28 27       	eor	r18, r24
    155a:	20 83       	st	Z, r18
    155c:	08 95       	ret

0000155e <Dio_ReadChannel>:
	}
}
level_type Dio_ReadChannel(port_type port,pin_type pin)
{
	level_type result = STD_LOW;
	switch (port)
    155e:	81 30       	cpi	r24, 0x01	; 1
    1560:	89 f0       	breq	.+34     	; 0x1584 <Dio_ReadChannel+0x26>
    1562:	81 30       	cpi	r24, 0x01	; 1
    1564:	30 f0       	brcs	.+12     	; 0x1572 <Dio_ReadChannel+0x14>
    1566:	82 30       	cpi	r24, 0x02	; 2
    1568:	b1 f0       	breq	.+44     	; 0x1596 <Dio_ReadChannel+0x38>
    156a:	83 30       	cpi	r24, 0x03	; 3
    156c:	e9 f0       	breq	.+58     	; 0x15a8 <Dio_ReadChannel+0x4a>
    156e:	80 e0       	ldi	r24, 0x00	; 0
    1570:	08 95       	ret
	{
	case DIO_PORTA:
		if CHK_BIT(DIO_PINA_REG,pin)
    1572:	89 b3       	in	r24, 0x19	; 25
    1574:	90 e0       	ldi	r25, 0x00	; 0
    1576:	02 c0       	rjmp	.+4      	; 0x157c <Dio_ReadChannel+0x1e>
    1578:	95 95       	asr	r25
    157a:	87 95       	ror	r24
    157c:	6a 95       	dec	r22
    157e:	e2 f7       	brpl	.-8      	; 0x1578 <Dio_ReadChannel+0x1a>
    1580:	81 70       	andi	r24, 0x01	; 1
    1582:	08 95       	ret
		{
			result = STD_LOW;
		}
		break;
	case DIO_PORTB:
		if CHK_BIT(DIO_PINB_REG,pin)
    1584:	86 b3       	in	r24, 0x16	; 22
    1586:	90 e0       	ldi	r25, 0x00	; 0
    1588:	02 c0       	rjmp	.+4      	; 0x158e <Dio_ReadChannel+0x30>
    158a:	95 95       	asr	r25
    158c:	87 95       	ror	r24
    158e:	6a 95       	dec	r22
    1590:	e2 f7       	brpl	.-8      	; 0x158a <Dio_ReadChannel+0x2c>
    1592:	81 70       	andi	r24, 0x01	; 1
    1594:	08 95       	ret
		{
			result = STD_LOW;
		}
		break;
	case DIO_PORTC:
		if CHK_BIT(DIO_PINC_REG,pin)
    1596:	83 b3       	in	r24, 0x13	; 19
    1598:	90 e0       	ldi	r25, 0x00	; 0
    159a:	02 c0       	rjmp	.+4      	; 0x15a0 <Dio_ReadChannel+0x42>
    159c:	95 95       	asr	r25
    159e:	87 95       	ror	r24
    15a0:	6a 95       	dec	r22
    15a2:	e2 f7       	brpl	.-8      	; 0x159c <Dio_ReadChannel+0x3e>
    15a4:	81 70       	andi	r24, 0x01	; 1
    15a6:	08 95       	ret
		{
			result = STD_LOW;
		}
		break;
	case DIO_PORTD:
		if CHK_BIT(DIO_PIND_REG,pin)
    15a8:	80 b3       	in	r24, 0x10	; 16
    15aa:	90 e0       	ldi	r25, 0x00	; 0
    15ac:	02 c0       	rjmp	.+4      	; 0x15b2 <Dio_ReadChannel+0x54>
    15ae:	95 95       	asr	r25
    15b0:	87 95       	ror	r24
    15b2:	6a 95       	dec	r22
    15b4:	e2 f7       	brpl	.-8      	; 0x15ae <Dio_ReadChannel+0x50>
    15b6:	81 70       	andi	r24, 0x01	; 1
			result = STD_LOW;
		}
		break;
	}
	return result;
}
    15b8:	08 95       	ret

000015ba <adcInit>:
 ********************************/
#include "Adc.h"

void adcInit(void)
{
	ADC_ADMUX_REG|=(AVCC5V_REF<<6);  /*	AVCC aas Vref	*/
    15ba:	e7 e2       	ldi	r30, 0x27	; 39
    15bc:	f0 e0       	ldi	r31, 0x00	; 0
    15be:	80 81       	ld	r24, Z
    15c0:	80 64       	ori	r24, 0x40	; 64
    15c2:	80 83       	st	Z, r24
	ADC_ADCSRA_REG=(ADC_ENABLE)|(ADCPS_128);
    15c4:	87 e8       	ldi	r24, 0x87	; 135
    15c6:	86 b9       	out	0x06, r24	; 6
}
    15c8:	08 95       	ret

000015ca <adcRead>:
u16 adcRead(u8 chnlNo)
{
    u16 result;
    ADC_ADMUX_REG = (ADC_ADMUX_REG & 0xF8)|(chnlNo);
    15ca:	e7 e2       	ldi	r30, 0x27	; 39
    15cc:	f0 e0       	ldi	r31, 0x00	; 0
    15ce:	90 81       	ld	r25, Z
    15d0:	98 7f       	andi	r25, 0xF8	; 248
    15d2:	89 2b       	or	r24, r25
    15d4:	80 83       	st	Z, r24
    ADC_ADCSRA_REG|=(ADC_START_CONVERSION);
    15d6:	e6 e2       	ldi	r30, 0x26	; 38
    15d8:	f0 e0       	ldi	r31, 0x00	; 0
    15da:	80 81       	ld	r24, Z
    15dc:	80 64       	ori	r24, 0x40	; 64
    15de:	80 83       	st	Z, r24
 	while(!(CHK_BIT(ADC_ADCSRA_REG,ADIF_BIT_NO)))
    15e0:	80 81       	ld	r24, Z
    15e2:	84 ff       	sbrs	r24, 4
    15e4:	fd cf       	rjmp	.-6      	; 0x15e0 <adcRead+0x16>
 		  {
 		  	  /*	Do Nothing	*/
 		  	  	  ;
 		  }
 	/*	Clear Interrupt Flag To Be Ready For Another Conversion	*/
 	 ADC_ADCSRA_REG|=(1<<ADIF_BIT_NO);
    15e6:	e6 e2       	ldi	r30, 0x26	; 38
    15e8:	f0 e0       	ldi	r31, 0x00	; 0
    15ea:	80 81       	ld	r24, Z
    15ec:	80 61       	ori	r24, 0x10	; 16
    15ee:	80 83       	st	Z, r24
    result=(ADC_ADCL_REG|(ADC_ADCH_REG<<8));
    15f0:	84 b1       	in	r24, 0x04	; 4
    15f2:	45 b1       	in	r20, 0x05	; 5
    15f4:	34 2f       	mov	r19, r20
    15f6:	20 e0       	ldi	r18, 0x00	; 0
    15f8:	90 e0       	ldi	r25, 0x00	; 0
    15fa:	28 2b       	or	r18, r24
    15fc:	39 2b       	or	r19, r25
 	return result;
}
    15fe:	82 2f       	mov	r24, r18
    1600:	93 2f       	mov	r25, r19
    1602:	08 95       	ret

00001604 <__udivmodqi4>:
    1604:	99 1b       	sub	r25, r25
    1606:	79 e0       	ldi	r23, 0x09	; 9
    1608:	04 c0       	rjmp	.+8      	; 0x1612 <__udivmodqi4_ep>

0000160a <__udivmodqi4_loop>:
    160a:	99 1f       	adc	r25, r25
    160c:	96 17       	cp	r25, r22
    160e:	08 f0       	brcs	.+2      	; 0x1612 <__udivmodqi4_ep>
    1610:	96 1b       	sub	r25, r22

00001612 <__udivmodqi4_ep>:
    1612:	88 1f       	adc	r24, r24
    1614:	7a 95       	dec	r23
    1616:	c9 f7       	brne	.-14     	; 0x160a <__udivmodqi4_loop>
    1618:	80 95       	com	r24
    161a:	08 95       	ret

0000161c <__udivmodhi4>:
    161c:	aa 1b       	sub	r26, r26
    161e:	bb 1b       	sub	r27, r27
    1620:	51 e1       	ldi	r21, 0x11	; 17
    1622:	07 c0       	rjmp	.+14     	; 0x1632 <__udivmodhi4_ep>

00001624 <__udivmodhi4_loop>:
    1624:	aa 1f       	adc	r26, r26
    1626:	bb 1f       	adc	r27, r27
    1628:	a6 17       	cp	r26, r22
    162a:	b7 07       	cpc	r27, r23
    162c:	10 f0       	brcs	.+4      	; 0x1632 <__udivmodhi4_ep>
    162e:	a6 1b       	sub	r26, r22
    1630:	b7 0b       	sbc	r27, r23

00001632 <__udivmodhi4_ep>:
    1632:	88 1f       	adc	r24, r24
    1634:	99 1f       	adc	r25, r25
    1636:	5a 95       	dec	r21
    1638:	a9 f7       	brne	.-22     	; 0x1624 <__udivmodhi4_loop>
    163a:	80 95       	com	r24
    163c:	90 95       	com	r25
    163e:	bc 01       	movw	r22, r24
    1640:	cd 01       	movw	r24, r26
    1642:	08 95       	ret

00001644 <__prologue_saves__>:
    1644:	2f 92       	push	r2
    1646:	3f 92       	push	r3
    1648:	4f 92       	push	r4
    164a:	5f 92       	push	r5
    164c:	6f 92       	push	r6
    164e:	7f 92       	push	r7
    1650:	8f 92       	push	r8
    1652:	9f 92       	push	r9
    1654:	af 92       	push	r10
    1656:	bf 92       	push	r11
    1658:	cf 92       	push	r12
    165a:	df 92       	push	r13
    165c:	ef 92       	push	r14
    165e:	ff 92       	push	r15
    1660:	0f 93       	push	r16
    1662:	1f 93       	push	r17
    1664:	cf 93       	push	r28
    1666:	df 93       	push	r29
    1668:	cd b7       	in	r28, 0x3d	; 61
    166a:	de b7       	in	r29, 0x3e	; 62
    166c:	ca 1b       	sub	r28, r26
    166e:	db 0b       	sbc	r29, r27
    1670:	0f b6       	in	r0, 0x3f	; 63
    1672:	f8 94       	cli
    1674:	de bf       	out	0x3e, r29	; 62
    1676:	0f be       	out	0x3f, r0	; 63
    1678:	cd bf       	out	0x3d, r28	; 61
    167a:	09 94       	ijmp

0000167c <__epilogue_restores__>:
    167c:	2a 88       	ldd	r2, Y+18	; 0x12
    167e:	39 88       	ldd	r3, Y+17	; 0x11
    1680:	48 88       	ldd	r4, Y+16	; 0x10
    1682:	5f 84       	ldd	r5, Y+15	; 0x0f
    1684:	6e 84       	ldd	r6, Y+14	; 0x0e
    1686:	7d 84       	ldd	r7, Y+13	; 0x0d
    1688:	8c 84       	ldd	r8, Y+12	; 0x0c
    168a:	9b 84       	ldd	r9, Y+11	; 0x0b
    168c:	aa 84       	ldd	r10, Y+10	; 0x0a
    168e:	b9 84       	ldd	r11, Y+9	; 0x09
    1690:	c8 84       	ldd	r12, Y+8	; 0x08
    1692:	df 80       	ldd	r13, Y+7	; 0x07
    1694:	ee 80       	ldd	r14, Y+6	; 0x06
    1696:	fd 80       	ldd	r15, Y+5	; 0x05
    1698:	0c 81       	ldd	r16, Y+4	; 0x04
    169a:	1b 81       	ldd	r17, Y+3	; 0x03
    169c:	aa 81       	ldd	r26, Y+2	; 0x02
    169e:	b9 81       	ldd	r27, Y+1	; 0x01
    16a0:	ce 0f       	add	r28, r30
    16a2:	d1 1d       	adc	r29, r1
    16a4:	0f b6       	in	r0, 0x3f	; 63
    16a6:	f8 94       	cli
    16a8:	de bf       	out	0x3e, r29	; 62
    16aa:	0f be       	out	0x3f, r0	; 63
    16ac:	cd bf       	out	0x3d, r28	; 61
    16ae:	ed 01       	movw	r28, r26
    16b0:	08 95       	ret

000016b2 <_exit>:
    16b2:	f8 94       	cli

000016b4 <__stop_program>:
    16b4:	ff cf       	rjmp	.-2      	; 0x16b4 <__stop_program>
