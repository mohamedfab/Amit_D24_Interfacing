
Amit_D24_Interfacing.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002fd0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000174  00800060  00002fd0  00003064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001c  008001d4  008001d4  000031d8  2**0
                  ALLOC
  3 .stab         00003dd4  00000000  00000000  000031d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002045  00000000  00000000  00006fac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00008ff1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  00009191  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  00009383  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000b78e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000cb14  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000dcec  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000deac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000e1a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000eb10  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 35 10 	jmp	0x206a	; 0x206a <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 ed       	ldi	r30, 0xD0	; 208
      68:	ff e2       	ldi	r31, 0x2F	; 47
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 3d       	cpi	r26, 0xD4	; 212
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a4 ed       	ldi	r26, 0xD4	; 212
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 3f       	cpi	r26, 0xF0	; 240
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 17 07 	call	0xe2e	; 0xe2e <main>
      8a:	0c 94 e6 17 	jmp	0x2fcc	; 0x2fcc <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 af 17 	jmp	0x2f5e	; 0x2f5e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ac e8       	ldi	r26, 0x8C	; 140
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 cb 17 	jmp	0x2f96	; 0x2f96 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 bb 17 	jmp	0x2f76	; 0x2f76 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 d7 17 	jmp	0x2fae	; 0x2fae <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 bb 17 	jmp	0x2f76	; 0x2f76 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 d7 17 	jmp	0x2fae	; 0x2fae <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 af 17 	jmp	0x2f5e	; 0x2f5e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8c e8       	ldi	r24, 0x8C	; 140
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 cb 17 	jmp	0x2f96	; 0x2f96 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 b7 17 	jmp	0x2f6e	; 0x2f6e <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6c e8       	ldi	r22, 0x8C	; 140
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 d3 17 	jmp	0x2fa6	; 0x2fa6 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 bb 17 	jmp	0x2f76	; 0x2f76 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 d7 17 	jmp	0x2fae	; 0x2fae <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 bb 17 	jmp	0x2f76	; 0x2f76 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 d7 17 	jmp	0x2fae	; 0x2fae <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 bb 17 	jmp	0x2f76	; 0x2f76 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 d7 17 	jmp	0x2fae	; 0x2fae <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 bf 17 	jmp	0x2f7e	; 0x2f7e <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 db 17 	jmp	0x2fb6	; 0x2fb6 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 b7 17 	jmp	0x2f6e	; 0x2f6e <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 d3 17 	jmp	0x2fa6	; 0x2fa6 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	ec 56       	subi	r30, 0x6C	; 108
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <main>:
#include "Uart.h"
#include <string.h>
#include "Eeprom24C16.h"
#include "Eeprom.h"
int main ()
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
     e36:	2f 97       	sbiw	r28, 0x0f	; 15
     e38:	0f b6       	in	r0, 0x3f	; 63
     e3a:	f8 94       	cli
     e3c:	de bf       	out	0x3e, r29	; 62
     e3e:	0f be       	out	0x3f, r0	; 63
     e40:	cd bf       	out	0x3d, r28	; 61
	u8 Num = 0;
     e42:	1f 86       	std	Y+15, r1	; 0x0f
	Lcd_Init();
     e44:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <Lcd_Init>
Eeprom24C16_Init();
     e48:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <Eeprom24C16_Init>
     e4c:	80 e0       	ldi	r24, 0x00	; 0
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	a0 ea       	ldi	r26, 0xA0	; 160
     e52:	b1 e4       	ldi	r27, 0x41	; 65
     e54:	8b 87       	std	Y+11, r24	; 0x0b
     e56:	9c 87       	std	Y+12, r25	; 0x0c
     e58:	ad 87       	std	Y+13, r26	; 0x0d
     e5a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e5c:	6b 85       	ldd	r22, Y+11	; 0x0b
     e5e:	7c 85       	ldd	r23, Y+12	; 0x0c
     e60:	8d 85       	ldd	r24, Y+13	; 0x0d
     e62:	9e 85       	ldd	r25, Y+14	; 0x0e
     e64:	20 e0       	ldi	r18, 0x00	; 0
     e66:	30 e0       	ldi	r19, 0x00	; 0
     e68:	4a e7       	ldi	r20, 0x7A	; 122
     e6a:	55 e4       	ldi	r21, 0x45	; 69
     e6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e70:	dc 01       	movw	r26, r24
     e72:	cb 01       	movw	r24, r22
     e74:	8f 83       	std	Y+7, r24	; 0x07
     e76:	98 87       	std	Y+8, r25	; 0x08
     e78:	a9 87       	std	Y+9, r26	; 0x09
     e7a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e7c:	6f 81       	ldd	r22, Y+7	; 0x07
     e7e:	78 85       	ldd	r23, Y+8	; 0x08
     e80:	89 85       	ldd	r24, Y+9	; 0x09
     e82:	9a 85       	ldd	r25, Y+10	; 0x0a
     e84:	20 e0       	ldi	r18, 0x00	; 0
     e86:	30 e0       	ldi	r19, 0x00	; 0
     e88:	40 e8       	ldi	r20, 0x80	; 128
     e8a:	5f e3       	ldi	r21, 0x3F	; 63
     e8c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     e90:	88 23       	and	r24, r24
     e92:	2c f4       	brge	.+10     	; 0xe9e <main+0x70>
		__ticks = 1;
     e94:	81 e0       	ldi	r24, 0x01	; 1
     e96:	90 e0       	ldi	r25, 0x00	; 0
     e98:	9e 83       	std	Y+6, r25	; 0x06
     e9a:	8d 83       	std	Y+5, r24	; 0x05
     e9c:	3f c0       	rjmp	.+126    	; 0xf1c <main+0xee>
	else if (__tmp > 65535)
     e9e:	6f 81       	ldd	r22, Y+7	; 0x07
     ea0:	78 85       	ldd	r23, Y+8	; 0x08
     ea2:	89 85       	ldd	r24, Y+9	; 0x09
     ea4:	9a 85       	ldd	r25, Y+10	; 0x0a
     ea6:	20 e0       	ldi	r18, 0x00	; 0
     ea8:	3f ef       	ldi	r19, 0xFF	; 255
     eaa:	4f e7       	ldi	r20, 0x7F	; 127
     eac:	57 e4       	ldi	r21, 0x47	; 71
     eae:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     eb2:	18 16       	cp	r1, r24
     eb4:	4c f5       	brge	.+82     	; 0xf08 <main+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     eb6:	6b 85       	ldd	r22, Y+11	; 0x0b
     eb8:	7c 85       	ldd	r23, Y+12	; 0x0c
     eba:	8d 85       	ldd	r24, Y+13	; 0x0d
     ebc:	9e 85       	ldd	r25, Y+14	; 0x0e
     ebe:	20 e0       	ldi	r18, 0x00	; 0
     ec0:	30 e0       	ldi	r19, 0x00	; 0
     ec2:	40 e2       	ldi	r20, 0x20	; 32
     ec4:	51 e4       	ldi	r21, 0x41	; 65
     ec6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     eca:	dc 01       	movw	r26, r24
     ecc:	cb 01       	movw	r24, r22
     ece:	bc 01       	movw	r22, r24
     ed0:	cd 01       	movw	r24, r26
     ed2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ed6:	dc 01       	movw	r26, r24
     ed8:	cb 01       	movw	r24, r22
     eda:	9e 83       	std	Y+6, r25	; 0x06
     edc:	8d 83       	std	Y+5, r24	; 0x05
     ede:	0f c0       	rjmp	.+30     	; 0xefe <main+0xd0>
     ee0:	80 e9       	ldi	r24, 0x90	; 144
     ee2:	91 e0       	ldi	r25, 0x01	; 1
     ee4:	9c 83       	std	Y+4, r25	; 0x04
     ee6:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     ee8:	8b 81       	ldd	r24, Y+3	; 0x03
     eea:	9c 81       	ldd	r25, Y+4	; 0x04
     eec:	01 97       	sbiw	r24, 0x01	; 1
     eee:	f1 f7       	brne	.-4      	; 0xeec <main+0xbe>
     ef0:	9c 83       	std	Y+4, r25	; 0x04
     ef2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ef4:	8d 81       	ldd	r24, Y+5	; 0x05
     ef6:	9e 81       	ldd	r25, Y+6	; 0x06
     ef8:	01 97       	sbiw	r24, 0x01	; 1
     efa:	9e 83       	std	Y+6, r25	; 0x06
     efc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     efe:	8d 81       	ldd	r24, Y+5	; 0x05
     f00:	9e 81       	ldd	r25, Y+6	; 0x06
     f02:	00 97       	sbiw	r24, 0x00	; 0
     f04:	69 f7       	brne	.-38     	; 0xee0 <main+0xb2>
     f06:	14 c0       	rjmp	.+40     	; 0xf30 <main+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f08:	6f 81       	ldd	r22, Y+7	; 0x07
     f0a:	78 85       	ldd	r23, Y+8	; 0x08
     f0c:	89 85       	ldd	r24, Y+9	; 0x09
     f0e:	9a 85       	ldd	r25, Y+10	; 0x0a
     f10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f14:	dc 01       	movw	r26, r24
     f16:	cb 01       	movw	r24, r22
     f18:	9e 83       	std	Y+6, r25	; 0x06
     f1a:	8d 83       	std	Y+5, r24	; 0x05
     f1c:	8d 81       	ldd	r24, Y+5	; 0x05
     f1e:	9e 81       	ldd	r25, Y+6	; 0x06
     f20:	9a 83       	std	Y+2, r25	; 0x02
     f22:	89 83       	std	Y+1, r24	; 0x01
     f24:	89 81       	ldd	r24, Y+1	; 0x01
     f26:	9a 81       	ldd	r25, Y+2	; 0x02
     f28:	01 97       	sbiw	r24, 0x01	; 1
     f2a:	f1 f7       	brne	.-4      	; 0xf28 <main+0xfa>
     f2c:	9a 83       	std	Y+2, r25	; 0x02
     f2e:	89 83       	std	Y+1, r24	; 0x01
//Eeprom24C16_WriteByte(0, 'C');
_delay_ms(20);
Num = Eeprom24C16_ReadByte(0);
     f30:	80 e0       	ldi	r24, 0x00	; 0
     f32:	90 e0       	ldi	r25, 0x00	; 0
     f34:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <Eeprom24C16_ReadByte>
     f38:	8f 87       	std	Y+15, r24	; 0x0f
	Lcd_DisplayChr(Num);
     f3a:	8f 85       	ldd	r24, Y+15	; 0x0f
     f3c:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <Lcd_DisplayChr>
     f40:	ff cf       	rjmp	.-2      	; 0xf40 <main+0x112>

00000f42 <SSD_Init>:
 *  Created on: Nov 20, 2021
 *      Author: Eng_Fawzi
 */
#include "SSD.h"
void SSD_Init(void)
{
     f42:	df 93       	push	r29
     f44:	cf 93       	push	r28
     f46:	cd b7       	in	r28, 0x3d	; 61
     f48:	de b7       	in	r29, 0x3e	; 62
	/*	Configure Data Lines As Output	*/
	Dio_ConfigChannel(DIO_PORTA,DIO_PIN4,OUTPUT);
     f4a:	80 e0       	ldi	r24, 0x00	; 0
     f4c:	64 e0       	ldi	r22, 0x04	; 4
     f4e:	41 e0       	ldi	r20, 0x01	; 1
     f50:	0e 94 f5 13 	call	0x27ea	; 0x27ea <Dio_ConfigChannel>
	Dio_ConfigChannel(DIO_PORTA,DIO_PIN5,OUTPUT);
     f54:	80 e0       	ldi	r24, 0x00	; 0
     f56:	65 e0       	ldi	r22, 0x05	; 5
     f58:	41 e0       	ldi	r20, 0x01	; 1
     f5a:	0e 94 f5 13 	call	0x27ea	; 0x27ea <Dio_ConfigChannel>
	Dio_ConfigChannel(DIO_PORTA,DIO_PIN6,OUTPUT);
     f5e:	80 e0       	ldi	r24, 0x00	; 0
     f60:	66 e0       	ldi	r22, 0x06	; 6
     f62:	41 e0       	ldi	r20, 0x01	; 1
     f64:	0e 94 f5 13 	call	0x27ea	; 0x27ea <Dio_ConfigChannel>
	Dio_ConfigChannel(DIO_PORTA,DIO_PIN7,OUTPUT);
     f68:	80 e0       	ldi	r24, 0x00	; 0
     f6a:	67 e0       	ldi	r22, 0x07	; 7
     f6c:	41 e0       	ldi	r20, 0x01	; 1
     f6e:	0e 94 f5 13 	call	0x27ea	; 0x27ea <Dio_ConfigChannel>

	/*	Configure Control Lines As Output	*/
	Dio_ConfigChannel(DIO_PORTB,DIO_PIN1,OUTPUT);
     f72:	81 e0       	ldi	r24, 0x01	; 1
     f74:	61 e0       	ldi	r22, 0x01	; 1
     f76:	41 e0       	ldi	r20, 0x01	; 1
     f78:	0e 94 f5 13 	call	0x27ea	; 0x27ea <Dio_ConfigChannel>
	Dio_ConfigChannel(DIO_PORTB,DIO_PIN2,OUTPUT);
     f7c:	81 e0       	ldi	r24, 0x01	; 1
     f7e:	62 e0       	ldi	r22, 0x02	; 2
     f80:	41 e0       	ldi	r20, 0x01	; 1
     f82:	0e 94 f5 13 	call	0x27ea	; 0x27ea <Dio_ConfigChannel>
}
     f86:	cf 91       	pop	r28
     f88:	df 91       	pop	r29
     f8a:	08 95       	ret

00000f8c <SSD_DisplayNumber>:
void SSD_DisplayNumber(u8 num)
{
     f8c:	df 93       	push	r29
     f8e:	cf 93       	push	r28
     f90:	cd b7       	in	r28, 0x3d	; 61
     f92:	de b7       	in	r29, 0x3e	; 62
     f94:	6f 97       	sbiw	r28, 0x1f	; 31
     f96:	0f b6       	in	r0, 0x3f	; 63
     f98:	f8 94       	cli
     f9a:	de bf       	out	0x3e, r29	; 62
     f9c:	0f be       	out	0x3f, r0	; 63
     f9e:	cd bf       	out	0x3d, r28	; 61
     fa0:	8f 8f       	std	Y+31, r24	; 0x1f
	u8 loc_FirstDigit = (num/10)<<4;
     fa2:	8f 8d       	ldd	r24, Y+31	; 0x1f
     fa4:	9a e0       	ldi	r25, 0x0A	; 10
     fa6:	69 2f       	mov	r22, r25
     fa8:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <__udivmodqi4>
     fac:	82 95       	swap	r24
     fae:	80 7f       	andi	r24, 0xF0	; 240
     fb0:	8e 8f       	std	Y+30, r24	; 0x1e
	u8 loc_Second_Digit = (num%10)<<4;
     fb2:	8f 8d       	ldd	r24, Y+31	; 0x1f
     fb4:	9a e0       	ldi	r25, 0x0A	; 10
     fb6:	69 2f       	mov	r22, r25
     fb8:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <__udivmodqi4>
     fbc:	89 2f       	mov	r24, r25
     fbe:	82 95       	swap	r24
     fc0:	80 7f       	andi	r24, 0xF0	; 240
     fc2:	8d 8f       	std	Y+29, r24	; 0x1d

	/*	Enable SSD1	*/
	Dio_WriteChannel(DIO_PORTB, DIO_PIN2, STD_HIGH);
     fc4:	81 e0       	ldi	r24, 0x01	; 1
     fc6:	62 e0       	ldi	r22, 0x02	; 2
     fc8:	41 e0       	ldi	r20, 0x01	; 1
     fca:	0e 94 d8 14 	call	0x29b0	; 0x29b0 <Dio_WriteChannel>
	/*	Disable SSD2	*/
	Dio_WriteChannel(DIO_PORTB, DIO_PIN1, STD_LOW);
     fce:	81 e0       	ldi	r24, 0x01	; 1
     fd0:	61 e0       	ldi	r22, 0x01	; 1
     fd2:	40 e0       	ldi	r20, 0x00	; 0
     fd4:	0e 94 d8 14 	call	0x29b0	; 0x29b0 <Dio_WriteChannel>
	/*	Write Number To SSD	*/
	Dio_WriteGroup(DIO_PORTA,SSD_MASK,loc_FirstDigit);
     fd8:	80 e0       	ldi	r24, 0x00	; 0
     fda:	60 ef       	ldi	r22, 0xF0	; 240
     fdc:	4e 8d       	ldd	r20, Y+30	; 0x1e
     fde:	0e 94 bb 15 	call	0x2b76	; 0x2b76 <Dio_WriteGroup>
     fe2:	80 e0       	ldi	r24, 0x00	; 0
     fe4:	90 e0       	ldi	r25, 0x00	; 0
     fe6:	a0 e8       	ldi	r26, 0x80	; 128
     fe8:	bf e3       	ldi	r27, 0x3F	; 63
     fea:	89 8f       	std	Y+25, r24	; 0x19
     fec:	9a 8f       	std	Y+26, r25	; 0x1a
     fee:	ab 8f       	std	Y+27, r26	; 0x1b
     ff0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ff2:	69 8d       	ldd	r22, Y+25	; 0x19
     ff4:	7a 8d       	ldd	r23, Y+26	; 0x1a
     ff6:	8b 8d       	ldd	r24, Y+27	; 0x1b
     ff8:	9c 8d       	ldd	r25, Y+28	; 0x1c
     ffa:	20 e0       	ldi	r18, 0x00	; 0
     ffc:	30 e0       	ldi	r19, 0x00	; 0
     ffe:	4a e7       	ldi	r20, 0x7A	; 122
    1000:	55 e4       	ldi	r21, 0x45	; 69
    1002:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1006:	dc 01       	movw	r26, r24
    1008:	cb 01       	movw	r24, r22
    100a:	8d 8b       	std	Y+21, r24	; 0x15
    100c:	9e 8b       	std	Y+22, r25	; 0x16
    100e:	af 8b       	std	Y+23, r26	; 0x17
    1010:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1012:	6d 89       	ldd	r22, Y+21	; 0x15
    1014:	7e 89       	ldd	r23, Y+22	; 0x16
    1016:	8f 89       	ldd	r24, Y+23	; 0x17
    1018:	98 8d       	ldd	r25, Y+24	; 0x18
    101a:	20 e0       	ldi	r18, 0x00	; 0
    101c:	30 e0       	ldi	r19, 0x00	; 0
    101e:	40 e8       	ldi	r20, 0x80	; 128
    1020:	5f e3       	ldi	r21, 0x3F	; 63
    1022:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1026:	88 23       	and	r24, r24
    1028:	2c f4       	brge	.+10     	; 0x1034 <SSD_DisplayNumber+0xa8>
		__ticks = 1;
    102a:	81 e0       	ldi	r24, 0x01	; 1
    102c:	90 e0       	ldi	r25, 0x00	; 0
    102e:	9c 8b       	std	Y+20, r25	; 0x14
    1030:	8b 8b       	std	Y+19, r24	; 0x13
    1032:	3f c0       	rjmp	.+126    	; 0x10b2 <SSD_DisplayNumber+0x126>
	else if (__tmp > 65535)
    1034:	6d 89       	ldd	r22, Y+21	; 0x15
    1036:	7e 89       	ldd	r23, Y+22	; 0x16
    1038:	8f 89       	ldd	r24, Y+23	; 0x17
    103a:	98 8d       	ldd	r25, Y+24	; 0x18
    103c:	20 e0       	ldi	r18, 0x00	; 0
    103e:	3f ef       	ldi	r19, 0xFF	; 255
    1040:	4f e7       	ldi	r20, 0x7F	; 127
    1042:	57 e4       	ldi	r21, 0x47	; 71
    1044:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1048:	18 16       	cp	r1, r24
    104a:	4c f5       	brge	.+82     	; 0x109e <SSD_DisplayNumber+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    104c:	69 8d       	ldd	r22, Y+25	; 0x19
    104e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1050:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1052:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1054:	20 e0       	ldi	r18, 0x00	; 0
    1056:	30 e0       	ldi	r19, 0x00	; 0
    1058:	40 e2       	ldi	r20, 0x20	; 32
    105a:	51 e4       	ldi	r21, 0x41	; 65
    105c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1060:	dc 01       	movw	r26, r24
    1062:	cb 01       	movw	r24, r22
    1064:	bc 01       	movw	r22, r24
    1066:	cd 01       	movw	r24, r26
    1068:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    106c:	dc 01       	movw	r26, r24
    106e:	cb 01       	movw	r24, r22
    1070:	9c 8b       	std	Y+20, r25	; 0x14
    1072:	8b 8b       	std	Y+19, r24	; 0x13
    1074:	0f c0       	rjmp	.+30     	; 0x1094 <SSD_DisplayNumber+0x108>
    1076:	80 e9       	ldi	r24, 0x90	; 144
    1078:	91 e0       	ldi	r25, 0x01	; 1
    107a:	9a 8b       	std	Y+18, r25	; 0x12
    107c:	89 8b       	std	Y+17, r24	; 0x11
    107e:	89 89       	ldd	r24, Y+17	; 0x11
    1080:	9a 89       	ldd	r25, Y+18	; 0x12
    1082:	01 97       	sbiw	r24, 0x01	; 1
    1084:	f1 f7       	brne	.-4      	; 0x1082 <SSD_DisplayNumber+0xf6>
    1086:	9a 8b       	std	Y+18, r25	; 0x12
    1088:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    108a:	8b 89       	ldd	r24, Y+19	; 0x13
    108c:	9c 89       	ldd	r25, Y+20	; 0x14
    108e:	01 97       	sbiw	r24, 0x01	; 1
    1090:	9c 8b       	std	Y+20, r25	; 0x14
    1092:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1094:	8b 89       	ldd	r24, Y+19	; 0x13
    1096:	9c 89       	ldd	r25, Y+20	; 0x14
    1098:	00 97       	sbiw	r24, 0x00	; 0
    109a:	69 f7       	brne	.-38     	; 0x1076 <SSD_DisplayNumber+0xea>
    109c:	14 c0       	rjmp	.+40     	; 0x10c6 <SSD_DisplayNumber+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    109e:	6d 89       	ldd	r22, Y+21	; 0x15
    10a0:	7e 89       	ldd	r23, Y+22	; 0x16
    10a2:	8f 89       	ldd	r24, Y+23	; 0x17
    10a4:	98 8d       	ldd	r25, Y+24	; 0x18
    10a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10aa:	dc 01       	movw	r26, r24
    10ac:	cb 01       	movw	r24, r22
    10ae:	9c 8b       	std	Y+20, r25	; 0x14
    10b0:	8b 8b       	std	Y+19, r24	; 0x13
    10b2:	8b 89       	ldd	r24, Y+19	; 0x13
    10b4:	9c 89       	ldd	r25, Y+20	; 0x14
    10b6:	98 8b       	std	Y+16, r25	; 0x10
    10b8:	8f 87       	std	Y+15, r24	; 0x0f
    10ba:	8f 85       	ldd	r24, Y+15	; 0x0f
    10bc:	98 89       	ldd	r25, Y+16	; 0x10
    10be:	01 97       	sbiw	r24, 0x01	; 1
    10c0:	f1 f7       	brne	.-4      	; 0x10be <SSD_DisplayNumber+0x132>
    10c2:	98 8b       	std	Y+16, r25	; 0x10
    10c4:	8f 87       	std	Y+15, r24	; 0x0f
	/*	wait(1m)	*/
	_delay_ms(1);

	/*	Disable SSD1	*/
	Dio_WriteChannel(DIO_PORTB, DIO_PIN2, STD_LOW);
    10c6:	81 e0       	ldi	r24, 0x01	; 1
    10c8:	62 e0       	ldi	r22, 0x02	; 2
    10ca:	40 e0       	ldi	r20, 0x00	; 0
    10cc:	0e 94 d8 14 	call	0x29b0	; 0x29b0 <Dio_WriteChannel>
	/*	Enable SSD2	*/
	Dio_WriteChannel(DIO_PORTB, DIO_PIN1, STD_HIGH);
    10d0:	81 e0       	ldi	r24, 0x01	; 1
    10d2:	61 e0       	ldi	r22, 0x01	; 1
    10d4:	41 e0       	ldi	r20, 0x01	; 1
    10d6:	0e 94 d8 14 	call	0x29b0	; 0x29b0 <Dio_WriteChannel>
	/*	Write Number To SSD	*/
	Dio_WriteGroup(DIO_PORTA,SSD_MASK,loc_Second_Digit);
    10da:	80 e0       	ldi	r24, 0x00	; 0
    10dc:	60 ef       	ldi	r22, 0xF0	; 240
    10de:	4d 8d       	ldd	r20, Y+29	; 0x1d
    10e0:	0e 94 bb 15 	call	0x2b76	; 0x2b76 <Dio_WriteGroup>
    10e4:	80 e0       	ldi	r24, 0x00	; 0
    10e6:	90 e0       	ldi	r25, 0x00	; 0
    10e8:	a0 e8       	ldi	r26, 0x80	; 128
    10ea:	bf e3       	ldi	r27, 0x3F	; 63
    10ec:	8b 87       	std	Y+11, r24	; 0x0b
    10ee:	9c 87       	std	Y+12, r25	; 0x0c
    10f0:	ad 87       	std	Y+13, r26	; 0x0d
    10f2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10f4:	6b 85       	ldd	r22, Y+11	; 0x0b
    10f6:	7c 85       	ldd	r23, Y+12	; 0x0c
    10f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    10fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    10fc:	20 e0       	ldi	r18, 0x00	; 0
    10fe:	30 e0       	ldi	r19, 0x00	; 0
    1100:	4a e7       	ldi	r20, 0x7A	; 122
    1102:	55 e4       	ldi	r21, 0x45	; 69
    1104:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1108:	dc 01       	movw	r26, r24
    110a:	cb 01       	movw	r24, r22
    110c:	8f 83       	std	Y+7, r24	; 0x07
    110e:	98 87       	std	Y+8, r25	; 0x08
    1110:	a9 87       	std	Y+9, r26	; 0x09
    1112:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1114:	6f 81       	ldd	r22, Y+7	; 0x07
    1116:	78 85       	ldd	r23, Y+8	; 0x08
    1118:	89 85       	ldd	r24, Y+9	; 0x09
    111a:	9a 85       	ldd	r25, Y+10	; 0x0a
    111c:	20 e0       	ldi	r18, 0x00	; 0
    111e:	30 e0       	ldi	r19, 0x00	; 0
    1120:	40 e8       	ldi	r20, 0x80	; 128
    1122:	5f e3       	ldi	r21, 0x3F	; 63
    1124:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1128:	88 23       	and	r24, r24
    112a:	2c f4       	brge	.+10     	; 0x1136 <SSD_DisplayNumber+0x1aa>
		__ticks = 1;
    112c:	81 e0       	ldi	r24, 0x01	; 1
    112e:	90 e0       	ldi	r25, 0x00	; 0
    1130:	9e 83       	std	Y+6, r25	; 0x06
    1132:	8d 83       	std	Y+5, r24	; 0x05
    1134:	3f c0       	rjmp	.+126    	; 0x11b4 <SSD_DisplayNumber+0x228>
	else if (__tmp > 65535)
    1136:	6f 81       	ldd	r22, Y+7	; 0x07
    1138:	78 85       	ldd	r23, Y+8	; 0x08
    113a:	89 85       	ldd	r24, Y+9	; 0x09
    113c:	9a 85       	ldd	r25, Y+10	; 0x0a
    113e:	20 e0       	ldi	r18, 0x00	; 0
    1140:	3f ef       	ldi	r19, 0xFF	; 255
    1142:	4f e7       	ldi	r20, 0x7F	; 127
    1144:	57 e4       	ldi	r21, 0x47	; 71
    1146:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    114a:	18 16       	cp	r1, r24
    114c:	4c f5       	brge	.+82     	; 0x11a0 <SSD_DisplayNumber+0x214>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    114e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1150:	7c 85       	ldd	r23, Y+12	; 0x0c
    1152:	8d 85       	ldd	r24, Y+13	; 0x0d
    1154:	9e 85       	ldd	r25, Y+14	; 0x0e
    1156:	20 e0       	ldi	r18, 0x00	; 0
    1158:	30 e0       	ldi	r19, 0x00	; 0
    115a:	40 e2       	ldi	r20, 0x20	; 32
    115c:	51 e4       	ldi	r21, 0x41	; 65
    115e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1162:	dc 01       	movw	r26, r24
    1164:	cb 01       	movw	r24, r22
    1166:	bc 01       	movw	r22, r24
    1168:	cd 01       	movw	r24, r26
    116a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    116e:	dc 01       	movw	r26, r24
    1170:	cb 01       	movw	r24, r22
    1172:	9e 83       	std	Y+6, r25	; 0x06
    1174:	8d 83       	std	Y+5, r24	; 0x05
    1176:	0f c0       	rjmp	.+30     	; 0x1196 <SSD_DisplayNumber+0x20a>
    1178:	80 e9       	ldi	r24, 0x90	; 144
    117a:	91 e0       	ldi	r25, 0x01	; 1
    117c:	9c 83       	std	Y+4, r25	; 0x04
    117e:	8b 83       	std	Y+3, r24	; 0x03
    1180:	8b 81       	ldd	r24, Y+3	; 0x03
    1182:	9c 81       	ldd	r25, Y+4	; 0x04
    1184:	01 97       	sbiw	r24, 0x01	; 1
    1186:	f1 f7       	brne	.-4      	; 0x1184 <SSD_DisplayNumber+0x1f8>
    1188:	9c 83       	std	Y+4, r25	; 0x04
    118a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    118c:	8d 81       	ldd	r24, Y+5	; 0x05
    118e:	9e 81       	ldd	r25, Y+6	; 0x06
    1190:	01 97       	sbiw	r24, 0x01	; 1
    1192:	9e 83       	std	Y+6, r25	; 0x06
    1194:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1196:	8d 81       	ldd	r24, Y+5	; 0x05
    1198:	9e 81       	ldd	r25, Y+6	; 0x06
    119a:	00 97       	sbiw	r24, 0x00	; 0
    119c:	69 f7       	brne	.-38     	; 0x1178 <SSD_DisplayNumber+0x1ec>
    119e:	14 c0       	rjmp	.+40     	; 0x11c8 <SSD_DisplayNumber+0x23c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11a0:	6f 81       	ldd	r22, Y+7	; 0x07
    11a2:	78 85       	ldd	r23, Y+8	; 0x08
    11a4:	89 85       	ldd	r24, Y+9	; 0x09
    11a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    11a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11ac:	dc 01       	movw	r26, r24
    11ae:	cb 01       	movw	r24, r22
    11b0:	9e 83       	std	Y+6, r25	; 0x06
    11b2:	8d 83       	std	Y+5, r24	; 0x05
    11b4:	8d 81       	ldd	r24, Y+5	; 0x05
    11b6:	9e 81       	ldd	r25, Y+6	; 0x06
    11b8:	9a 83       	std	Y+2, r25	; 0x02
    11ba:	89 83       	std	Y+1, r24	; 0x01
    11bc:	89 81       	ldd	r24, Y+1	; 0x01
    11be:	9a 81       	ldd	r25, Y+2	; 0x02
    11c0:	01 97       	sbiw	r24, 0x01	; 1
    11c2:	f1 f7       	brne	.-4      	; 0x11c0 <SSD_DisplayNumber+0x234>
    11c4:	9a 83       	std	Y+2, r25	; 0x02
    11c6:	89 83       	std	Y+1, r24	; 0x01
	/*	wait(1m)	*/
	_delay_ms(1);
}
    11c8:	6f 96       	adiw	r28, 0x1f	; 31
    11ca:	0f b6       	in	r0, 0x3f	; 63
    11cc:	f8 94       	cli
    11ce:	de bf       	out	0x3e, r29	; 62
    11d0:	0f be       	out	0x3f, r0	; 63
    11d2:	cd bf       	out	0x3d, r28	; 61
    11d4:	cf 91       	pop	r28
    11d6:	df 91       	pop	r29
    11d8:	08 95       	ret

000011da <LED_Init>:
 */

#include "Led.h"

void LED_Init(void)
{
    11da:	df 93       	push	r29
    11dc:	cf 93       	push	r28
    11de:	cd b7       	in	r28, 0x3d	; 61
    11e0:	de b7       	in	r29, 0x3e	; 62
	Dio_ConfigChannel(LED0_PORT,LED0_PIN,OUTPUT);
    11e2:	82 e0       	ldi	r24, 0x02	; 2
    11e4:	62 e0       	ldi	r22, 0x02	; 2
    11e6:	41 e0       	ldi	r20, 0x01	; 1
    11e8:	0e 94 f5 13 	call	0x27ea	; 0x27ea <Dio_ConfigChannel>
	Dio_ConfigChannel(LED1_PORT,LED1_PIN,OUTPUT);
    11ec:	82 e0       	ldi	r24, 0x02	; 2
    11ee:	67 e0       	ldi	r22, 0x07	; 7
    11f0:	41 e0       	ldi	r20, 0x01	; 1
    11f2:	0e 94 f5 13 	call	0x27ea	; 0x27ea <Dio_ConfigChannel>
	Dio_ConfigChannel(LED2_PORT,LED2_PIN,OUTPUT);
    11f6:	83 e0       	ldi	r24, 0x03	; 3
    11f8:	63 e0       	ldi	r22, 0x03	; 3
    11fa:	41 e0       	ldi	r20, 0x01	; 1
    11fc:	0e 94 f5 13 	call	0x27ea	; 0x27ea <Dio_ConfigChannel>
}
    1200:	cf 91       	pop	r28
    1202:	df 91       	pop	r29
    1204:	08 95       	ret

00001206 <LED_ON>:

void LED_ON(led_type ledId)
{
    1206:	df 93       	push	r29
    1208:	cf 93       	push	r28
    120a:	00 d0       	rcall	.+0      	; 0x120c <LED_ON+0x6>
    120c:	0f 92       	push	r0
    120e:	cd b7       	in	r28, 0x3d	; 61
    1210:	de b7       	in	r29, 0x3e	; 62
    1212:	89 83       	std	Y+1, r24	; 0x01
	switch (ledId)
    1214:	89 81       	ldd	r24, Y+1	; 0x01
    1216:	28 2f       	mov	r18, r24
    1218:	30 e0       	ldi	r19, 0x00	; 0
    121a:	3b 83       	std	Y+3, r19	; 0x03
    121c:	2a 83       	std	Y+2, r18	; 0x02
    121e:	8a 81       	ldd	r24, Y+2	; 0x02
    1220:	9b 81       	ldd	r25, Y+3	; 0x03
    1222:	81 30       	cpi	r24, 0x01	; 1
    1224:	91 05       	cpc	r25, r1
    1226:	79 f0       	breq	.+30     	; 0x1246 <LED_ON+0x40>
    1228:	2a 81       	ldd	r18, Y+2	; 0x02
    122a:	3b 81       	ldd	r19, Y+3	; 0x03
    122c:	22 30       	cpi	r18, 0x02	; 2
    122e:	31 05       	cpc	r19, r1
    1230:	81 f0       	breq	.+32     	; 0x1252 <LED_ON+0x4c>
    1232:	8a 81       	ldd	r24, Y+2	; 0x02
    1234:	9b 81       	ldd	r25, Y+3	; 0x03
    1236:	00 97       	sbiw	r24, 0x00	; 0
    1238:	89 f4       	brne	.+34     	; 0x125c <LED_ON+0x56>
	{
	case LED0:
		Dio_WriteChannel(LED0_PORT,LED0_PIN,STD_HIGH);
    123a:	82 e0       	ldi	r24, 0x02	; 2
    123c:	62 e0       	ldi	r22, 0x02	; 2
    123e:	41 e0       	ldi	r20, 0x01	; 1
    1240:	0e 94 d8 14 	call	0x29b0	; 0x29b0 <Dio_WriteChannel>
    1244:	0b c0       	rjmp	.+22     	; 0x125c <LED_ON+0x56>
		break;

	case LED1:
		Dio_WriteChannel(LED1_PORT,LED1_PIN,STD_HIGH);
    1246:	82 e0       	ldi	r24, 0x02	; 2
    1248:	67 e0       	ldi	r22, 0x07	; 7
    124a:	41 e0       	ldi	r20, 0x01	; 1
    124c:	0e 94 d8 14 	call	0x29b0	; 0x29b0 <Dio_WriteChannel>
    1250:	05 c0       	rjmp	.+10     	; 0x125c <LED_ON+0x56>
		break;

	case LED2:
		Dio_WriteChannel(LED2_PORT,LED2_PIN,STD_HIGH);
    1252:	83 e0       	ldi	r24, 0x03	; 3
    1254:	63 e0       	ldi	r22, 0x03	; 3
    1256:	41 e0       	ldi	r20, 0x01	; 1
    1258:	0e 94 d8 14 	call	0x29b0	; 0x29b0 <Dio_WriteChannel>
		break;
	}
}
    125c:	0f 90       	pop	r0
    125e:	0f 90       	pop	r0
    1260:	0f 90       	pop	r0
    1262:	cf 91       	pop	r28
    1264:	df 91       	pop	r29
    1266:	08 95       	ret

00001268 <LED_OFF>:

void LED_OFF(led_type ledId)
{
    1268:	df 93       	push	r29
    126a:	cf 93       	push	r28
    126c:	00 d0       	rcall	.+0      	; 0x126e <LED_OFF+0x6>
    126e:	0f 92       	push	r0
    1270:	cd b7       	in	r28, 0x3d	; 61
    1272:	de b7       	in	r29, 0x3e	; 62
    1274:	89 83       	std	Y+1, r24	; 0x01
	switch (ledId)
    1276:	89 81       	ldd	r24, Y+1	; 0x01
    1278:	28 2f       	mov	r18, r24
    127a:	30 e0       	ldi	r19, 0x00	; 0
    127c:	3b 83       	std	Y+3, r19	; 0x03
    127e:	2a 83       	std	Y+2, r18	; 0x02
    1280:	8a 81       	ldd	r24, Y+2	; 0x02
    1282:	9b 81       	ldd	r25, Y+3	; 0x03
    1284:	81 30       	cpi	r24, 0x01	; 1
    1286:	91 05       	cpc	r25, r1
    1288:	79 f0       	breq	.+30     	; 0x12a8 <LED_OFF+0x40>
    128a:	2a 81       	ldd	r18, Y+2	; 0x02
    128c:	3b 81       	ldd	r19, Y+3	; 0x03
    128e:	22 30       	cpi	r18, 0x02	; 2
    1290:	31 05       	cpc	r19, r1
    1292:	81 f0       	breq	.+32     	; 0x12b4 <LED_OFF+0x4c>
    1294:	8a 81       	ldd	r24, Y+2	; 0x02
    1296:	9b 81       	ldd	r25, Y+3	; 0x03
    1298:	00 97       	sbiw	r24, 0x00	; 0
    129a:	89 f4       	brne	.+34     	; 0x12be <LED_OFF+0x56>
	{
	case LED0:
		Dio_WriteChannel(LED0_PORT,LED0_PIN,STD_LOW);
    129c:	82 e0       	ldi	r24, 0x02	; 2
    129e:	62 e0       	ldi	r22, 0x02	; 2
    12a0:	40 e0       	ldi	r20, 0x00	; 0
    12a2:	0e 94 d8 14 	call	0x29b0	; 0x29b0 <Dio_WriteChannel>
    12a6:	0b c0       	rjmp	.+22     	; 0x12be <LED_OFF+0x56>
		break;

	case LED1:
		Dio_WriteChannel(LED1_PORT,LED1_PIN,STD_LOW);
    12a8:	82 e0       	ldi	r24, 0x02	; 2
    12aa:	67 e0       	ldi	r22, 0x07	; 7
    12ac:	40 e0       	ldi	r20, 0x00	; 0
    12ae:	0e 94 d8 14 	call	0x29b0	; 0x29b0 <Dio_WriteChannel>
    12b2:	05 c0       	rjmp	.+10     	; 0x12be <LED_OFF+0x56>
		break;

	case LED2:
		Dio_WriteChannel(LED2_PORT,LED2_PIN,STD_LOW);
    12b4:	83 e0       	ldi	r24, 0x03	; 3
    12b6:	63 e0       	ldi	r22, 0x03	; 3
    12b8:	40 e0       	ldi	r20, 0x00	; 0
    12ba:	0e 94 d8 14 	call	0x29b0	; 0x29b0 <Dio_WriteChannel>
		break;
	}
}
    12be:	0f 90       	pop	r0
    12c0:	0f 90       	pop	r0
    12c2:	0f 90       	pop	r0
    12c4:	cf 91       	pop	r28
    12c6:	df 91       	pop	r29
    12c8:	08 95       	ret

000012ca <LED_TOGGLE>:
void LED_TOGGLE(led_type ledId)
{
    12ca:	df 93       	push	r29
    12cc:	cf 93       	push	r28
    12ce:	00 d0       	rcall	.+0      	; 0x12d0 <LED_TOGGLE+0x6>
    12d0:	0f 92       	push	r0
    12d2:	cd b7       	in	r28, 0x3d	; 61
    12d4:	de b7       	in	r29, 0x3e	; 62
    12d6:	89 83       	std	Y+1, r24	; 0x01
	switch (ledId)
    12d8:	89 81       	ldd	r24, Y+1	; 0x01
    12da:	28 2f       	mov	r18, r24
    12dc:	30 e0       	ldi	r19, 0x00	; 0
    12de:	3b 83       	std	Y+3, r19	; 0x03
    12e0:	2a 83       	std	Y+2, r18	; 0x02
    12e2:	8a 81       	ldd	r24, Y+2	; 0x02
    12e4:	9b 81       	ldd	r25, Y+3	; 0x03
    12e6:	81 30       	cpi	r24, 0x01	; 1
    12e8:	91 05       	cpc	r25, r1
    12ea:	71 f0       	breq	.+28     	; 0x1308 <LED_TOGGLE+0x3e>
    12ec:	2a 81       	ldd	r18, Y+2	; 0x02
    12ee:	3b 81       	ldd	r19, Y+3	; 0x03
    12f0:	22 30       	cpi	r18, 0x02	; 2
    12f2:	31 05       	cpc	r19, r1
    12f4:	71 f0       	breq	.+28     	; 0x1312 <LED_TOGGLE+0x48>
    12f6:	8a 81       	ldd	r24, Y+2	; 0x02
    12f8:	9b 81       	ldd	r25, Y+3	; 0x03
    12fa:	00 97       	sbiw	r24, 0x00	; 0
    12fc:	71 f4       	brne	.+28     	; 0x131a <LED_TOGGLE+0x50>
	{
	case LED0:
		Dio_TogglChannel(LED0_PORT,LED0_PIN);
    12fe:	82 e0       	ldi	r24, 0x02	; 2
    1300:	62 e0       	ldi	r22, 0x02	; 2
    1302:	0e 94 2b 16 	call	0x2c56	; 0x2c56 <Dio_TogglChannel>
    1306:	09 c0       	rjmp	.+18     	; 0x131a <LED_TOGGLE+0x50>
		break;

	case LED1:
		Dio_TogglChannel(LED1_PORT,LED1_PIN);
    1308:	82 e0       	ldi	r24, 0x02	; 2
    130a:	67 e0       	ldi	r22, 0x07	; 7
    130c:	0e 94 2b 16 	call	0x2c56	; 0x2c56 <Dio_TogglChannel>
    1310:	04 c0       	rjmp	.+8      	; 0x131a <LED_TOGGLE+0x50>
		break;

	case LED2:
		Dio_TogglChannel(LED2_PORT,LED2_PIN);
    1312:	83 e0       	ldi	r24, 0x03	; 3
    1314:	63 e0       	ldi	r22, 0x03	; 3
    1316:	0e 94 2b 16 	call	0x2c56	; 0x2c56 <Dio_TogglChannel>
		break;
	}
}
    131a:	0f 90       	pop	r0
    131c:	0f 90       	pop	r0
    131e:	0f 90       	pop	r0
    1320:	cf 91       	pop	r28
    1322:	df 91       	pop	r29
    1324:	08 95       	ret

00001326 <Lcd_WriteCustom>:
 * 			PA6
 * 			PA7
 * */
extern u8 customChar[8][8];
static void Lcd_WriteCustom(void)
{
    1326:	df 93       	push	r29
    1328:	cf 93       	push	r28
    132a:	00 d0       	rcall	.+0      	; 0x132c <Lcd_WriteCustom+0x6>
    132c:	cd b7       	in	r28, 0x3d	; 61
    132e:	de b7       	in	r29, 0x3e	; 62
	u8 loc_ByteIndex=0;
    1330:	1a 82       	std	Y+2, r1	; 0x02
	u8 loc_CharIndx=0;
    1332:	19 82       	std	Y+1, r1	; 0x01
	for (loc_CharIndx=0;loc_CharIndx<NO_CSTOM_CHAR;loc_CharIndx++)
    1334:	19 82       	std	Y+1, r1	; 0x01
    1336:	2c c0       	rjmp	.+88     	; 0x1390 <Lcd_WriteCustom+0x6a>
	{
		Lcd_Cmd(_LCD_CGRAM_START_ADDRESS +(loc_CharIndx*8));
    1338:	89 81       	ldd	r24, Y+1	; 0x01
    133a:	88 2f       	mov	r24, r24
    133c:	90 e0       	ldi	r25, 0x00	; 0
    133e:	08 96       	adiw	r24, 0x08	; 8
    1340:	88 0f       	add	r24, r24
    1342:	99 1f       	adc	r25, r25
    1344:	88 0f       	add	r24, r24
    1346:	99 1f       	adc	r25, r25
    1348:	88 0f       	add	r24, r24
    134a:	99 1f       	adc	r25, r25
    134c:	0e 94 38 0d 	call	0x1a70	; 0x1a70 <Lcd_Cmd>
			for (loc_ByteIndex =0; loc_ByteIndex<NO_CSTOM_CHAR_BYTES;loc_ByteIndex++)
    1350:	1a 82       	std	Y+2, r1	; 0x02
    1352:	18 c0       	rjmp	.+48     	; 0x1384 <Lcd_WriteCustom+0x5e>
			{
				Lcd_DisplayChr(customChar[loc_CharIndx][loc_ByteIndex]);
    1354:	89 81       	ldd	r24, Y+1	; 0x01
    1356:	48 2f       	mov	r20, r24
    1358:	50 e0       	ldi	r21, 0x00	; 0
    135a:	8a 81       	ldd	r24, Y+2	; 0x02
    135c:	28 2f       	mov	r18, r24
    135e:	30 e0       	ldi	r19, 0x00	; 0
    1360:	ca 01       	movw	r24, r20
    1362:	88 0f       	add	r24, r24
    1364:	99 1f       	adc	r25, r25
    1366:	88 0f       	add	r24, r24
    1368:	99 1f       	adc	r25, r25
    136a:	88 0f       	add	r24, r24
    136c:	99 1f       	adc	r25, r25
    136e:	82 0f       	add	r24, r18
    1370:	93 1f       	adc	r25, r19
    1372:	fc 01       	movw	r30, r24
    1374:	ec 56       	subi	r30, 0x6C	; 108
    1376:	fe 4f       	sbci	r31, 0xFE	; 254
    1378:	80 81       	ld	r24, Z
    137a:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <Lcd_DisplayChr>
	u8 loc_ByteIndex=0;
	u8 loc_CharIndx=0;
	for (loc_CharIndx=0;loc_CharIndx<NO_CSTOM_CHAR;loc_CharIndx++)
	{
		Lcd_Cmd(_LCD_CGRAM_START_ADDRESS +(loc_CharIndx*8));
			for (loc_ByteIndex =0; loc_ByteIndex<NO_CSTOM_CHAR_BYTES;loc_ByteIndex++)
    137e:	8a 81       	ldd	r24, Y+2	; 0x02
    1380:	8f 5f       	subi	r24, 0xFF	; 255
    1382:	8a 83       	std	Y+2, r24	; 0x02
    1384:	8a 81       	ldd	r24, Y+2	; 0x02
    1386:	88 30       	cpi	r24, 0x08	; 8
    1388:	28 f3       	brcs	.-54     	; 0x1354 <Lcd_WriteCustom+0x2e>
extern u8 customChar[8][8];
static void Lcd_WriteCustom(void)
{
	u8 loc_ByteIndex=0;
	u8 loc_CharIndx=0;
	for (loc_CharIndx=0;loc_CharIndx<NO_CSTOM_CHAR;loc_CharIndx++)
    138a:	89 81       	ldd	r24, Y+1	; 0x01
    138c:	8f 5f       	subi	r24, 0xFF	; 255
    138e:	89 83       	std	Y+1, r24	; 0x01
    1390:	89 81       	ldd	r24, Y+1	; 0x01
    1392:	88 30       	cpi	r24, 0x08	; 8
    1394:	88 f2       	brcs	.-94     	; 0x1338 <Lcd_WriteCustom+0x12>
			for (loc_ByteIndex =0; loc_ByteIndex<NO_CSTOM_CHAR_BYTES;loc_ByteIndex++)
			{
				Lcd_DisplayChr(customChar[loc_CharIndx][loc_ByteIndex]);
			}
	}
}
    1396:	0f 90       	pop	r0
    1398:	0f 90       	pop	r0
    139a:	cf 91       	pop	r28
    139c:	df 91       	pop	r29
    139e:	08 95       	ret

000013a0 <Lcd_Init>:

void Lcd_Init(void)
{
    13a0:	df 93       	push	r29
    13a2:	cf 93       	push	r28
    13a4:	cd b7       	in	r28, 0x3d	; 61
    13a6:	de b7       	in	r29, 0x3e	; 62
    13a8:	e4 97       	sbiw	r28, 0x34	; 52
    13aa:	0f b6       	in	r0, 0x3f	; 63
    13ac:	f8 94       	cli
    13ae:	de bf       	out	0x3e, r29	; 62
    13b0:	0f be       	out	0x3f, r0	; 63
    13b2:	cd bf       	out	0x3d, r28	; 61
	/*	Configure Data Lines As Output	*/
	Dio_ConfigChannel(DIO_PORTA,DIO_PIN4,OUTPUT);
    13b4:	80 e0       	ldi	r24, 0x00	; 0
    13b6:	64 e0       	ldi	r22, 0x04	; 4
    13b8:	41 e0       	ldi	r20, 0x01	; 1
    13ba:	0e 94 f5 13 	call	0x27ea	; 0x27ea <Dio_ConfigChannel>
	Dio_ConfigChannel(DIO_PORTA,DIO_PIN5,OUTPUT);
    13be:	80 e0       	ldi	r24, 0x00	; 0
    13c0:	65 e0       	ldi	r22, 0x05	; 5
    13c2:	41 e0       	ldi	r20, 0x01	; 1
    13c4:	0e 94 f5 13 	call	0x27ea	; 0x27ea <Dio_ConfigChannel>
	Dio_ConfigChannel(DIO_PORTA,DIO_PIN6,OUTPUT);
    13c8:	80 e0       	ldi	r24, 0x00	; 0
    13ca:	66 e0       	ldi	r22, 0x06	; 6
    13cc:	41 e0       	ldi	r20, 0x01	; 1
    13ce:	0e 94 f5 13 	call	0x27ea	; 0x27ea <Dio_ConfigChannel>
	Dio_ConfigChannel(DIO_PORTA,DIO_PIN7,OUTPUT);
    13d2:	80 e0       	ldi	r24, 0x00	; 0
    13d4:	67 e0       	ldi	r22, 0x07	; 7
    13d6:	41 e0       	ldi	r20, 0x01	; 1
    13d8:	0e 94 f5 13 	call	0x27ea	; 0x27ea <Dio_ConfigChannel>

	/*	Configure Control Lines As Output	*/
	Dio_ConfigChannel(DIO_PORTB,DIO_PIN1,OUTPUT);   /*	RS	*/
    13dc:	81 e0       	ldi	r24, 0x01	; 1
    13de:	61 e0       	ldi	r22, 0x01	; 1
    13e0:	41 e0       	ldi	r20, 0x01	; 1
    13e2:	0e 94 f5 13 	call	0x27ea	; 0x27ea <Dio_ConfigChannel>
	Dio_ConfigChannel(DIO_PORTB,DIO_PIN2,OUTPUT);	/*	RW	*/
    13e6:	81 e0       	ldi	r24, 0x01	; 1
    13e8:	62 e0       	ldi	r22, 0x02	; 2
    13ea:	41 e0       	ldi	r20, 0x01	; 1
    13ec:	0e 94 f5 13 	call	0x27ea	; 0x27ea <Dio_ConfigChannel>
	Dio_ConfigChannel(DIO_PORTB,DIO_PIN3,OUTPUT);	/*	En	*/
    13f0:	81 e0       	ldi	r24, 0x01	; 1
    13f2:	63 e0       	ldi	r22, 0x03	; 3
    13f4:	41 e0       	ldi	r20, 0x01	; 1
    13f6:	0e 94 f5 13 	call	0x27ea	; 0x27ea <Dio_ConfigChannel>

	Dio_WriteChannel(DIO_PORTB, DIO_PIN2, STD_LOW);
    13fa:	81 e0       	ldi	r24, 0x01	; 1
    13fc:	62 e0       	ldi	r22, 0x02	; 2
    13fe:	40 e0       	ldi	r20, 0x00	; 0
    1400:	0e 94 d8 14 	call	0x29b0	; 0x29b0 <Dio_WriteChannel>
    1404:	80 e0       	ldi	r24, 0x00	; 0
    1406:	90 e0       	ldi	r25, 0x00	; 0
    1408:	a0 e7       	ldi	r26, 0x70	; 112
    140a:	b1 e4       	ldi	r27, 0x41	; 65
    140c:	89 ab       	std	Y+49, r24	; 0x31
    140e:	9a ab       	std	Y+50, r25	; 0x32
    1410:	ab ab       	std	Y+51, r26	; 0x33
    1412:	bc ab       	std	Y+52, r27	; 0x34
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1414:	69 a9       	ldd	r22, Y+49	; 0x31
    1416:	7a a9       	ldd	r23, Y+50	; 0x32
    1418:	8b a9       	ldd	r24, Y+51	; 0x33
    141a:	9c a9       	ldd	r25, Y+52	; 0x34
    141c:	20 e0       	ldi	r18, 0x00	; 0
    141e:	30 e0       	ldi	r19, 0x00	; 0
    1420:	4a e7       	ldi	r20, 0x7A	; 122
    1422:	55 e4       	ldi	r21, 0x45	; 69
    1424:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1428:	dc 01       	movw	r26, r24
    142a:	cb 01       	movw	r24, r22
    142c:	8d a7       	std	Y+45, r24	; 0x2d
    142e:	9e a7       	std	Y+46, r25	; 0x2e
    1430:	af a7       	std	Y+47, r26	; 0x2f
    1432:	b8 ab       	std	Y+48, r27	; 0x30
	if (__tmp < 1.0)
    1434:	6d a5       	ldd	r22, Y+45	; 0x2d
    1436:	7e a5       	ldd	r23, Y+46	; 0x2e
    1438:	8f a5       	ldd	r24, Y+47	; 0x2f
    143a:	98 a9       	ldd	r25, Y+48	; 0x30
    143c:	20 e0       	ldi	r18, 0x00	; 0
    143e:	30 e0       	ldi	r19, 0x00	; 0
    1440:	40 e8       	ldi	r20, 0x80	; 128
    1442:	5f e3       	ldi	r21, 0x3F	; 63
    1444:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1448:	88 23       	and	r24, r24
    144a:	2c f4       	brge	.+10     	; 0x1456 <Lcd_Init+0xb6>
		__ticks = 1;
    144c:	81 e0       	ldi	r24, 0x01	; 1
    144e:	90 e0       	ldi	r25, 0x00	; 0
    1450:	9c a7       	std	Y+44, r25	; 0x2c
    1452:	8b a7       	std	Y+43, r24	; 0x2b
    1454:	3f c0       	rjmp	.+126    	; 0x14d4 <Lcd_Init+0x134>
	else if (__tmp > 65535)
    1456:	6d a5       	ldd	r22, Y+45	; 0x2d
    1458:	7e a5       	ldd	r23, Y+46	; 0x2e
    145a:	8f a5       	ldd	r24, Y+47	; 0x2f
    145c:	98 a9       	ldd	r25, Y+48	; 0x30
    145e:	20 e0       	ldi	r18, 0x00	; 0
    1460:	3f ef       	ldi	r19, 0xFF	; 255
    1462:	4f e7       	ldi	r20, 0x7F	; 127
    1464:	57 e4       	ldi	r21, 0x47	; 71
    1466:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    146a:	18 16       	cp	r1, r24
    146c:	4c f5       	brge	.+82     	; 0x14c0 <Lcd_Init+0x120>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    146e:	69 a9       	ldd	r22, Y+49	; 0x31
    1470:	7a a9       	ldd	r23, Y+50	; 0x32
    1472:	8b a9       	ldd	r24, Y+51	; 0x33
    1474:	9c a9       	ldd	r25, Y+52	; 0x34
    1476:	20 e0       	ldi	r18, 0x00	; 0
    1478:	30 e0       	ldi	r19, 0x00	; 0
    147a:	40 e2       	ldi	r20, 0x20	; 32
    147c:	51 e4       	ldi	r21, 0x41	; 65
    147e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1482:	dc 01       	movw	r26, r24
    1484:	cb 01       	movw	r24, r22
    1486:	bc 01       	movw	r22, r24
    1488:	cd 01       	movw	r24, r26
    148a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    148e:	dc 01       	movw	r26, r24
    1490:	cb 01       	movw	r24, r22
    1492:	9c a7       	std	Y+44, r25	; 0x2c
    1494:	8b a7       	std	Y+43, r24	; 0x2b
    1496:	0f c0       	rjmp	.+30     	; 0x14b6 <Lcd_Init+0x116>
    1498:	80 e9       	ldi	r24, 0x90	; 144
    149a:	91 e0       	ldi	r25, 0x01	; 1
    149c:	9a a7       	std	Y+42, r25	; 0x2a
    149e:	89 a7       	std	Y+41, r24	; 0x29
    14a0:	89 a5       	ldd	r24, Y+41	; 0x29
    14a2:	9a a5       	ldd	r25, Y+42	; 0x2a
    14a4:	01 97       	sbiw	r24, 0x01	; 1
    14a6:	f1 f7       	brne	.-4      	; 0x14a4 <Lcd_Init+0x104>
    14a8:	9a a7       	std	Y+42, r25	; 0x2a
    14aa:	89 a7       	std	Y+41, r24	; 0x29
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14ac:	8b a5       	ldd	r24, Y+43	; 0x2b
    14ae:	9c a5       	ldd	r25, Y+44	; 0x2c
    14b0:	01 97       	sbiw	r24, 0x01	; 1
    14b2:	9c a7       	std	Y+44, r25	; 0x2c
    14b4:	8b a7       	std	Y+43, r24	; 0x2b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14b6:	8b a5       	ldd	r24, Y+43	; 0x2b
    14b8:	9c a5       	ldd	r25, Y+44	; 0x2c
    14ba:	00 97       	sbiw	r24, 0x00	; 0
    14bc:	69 f7       	brne	.-38     	; 0x1498 <Lcd_Init+0xf8>
    14be:	14 c0       	rjmp	.+40     	; 0x14e8 <Lcd_Init+0x148>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14c0:	6d a5       	ldd	r22, Y+45	; 0x2d
    14c2:	7e a5       	ldd	r23, Y+46	; 0x2e
    14c4:	8f a5       	ldd	r24, Y+47	; 0x2f
    14c6:	98 a9       	ldd	r25, Y+48	; 0x30
    14c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14cc:	dc 01       	movw	r26, r24
    14ce:	cb 01       	movw	r24, r22
    14d0:	9c a7       	std	Y+44, r25	; 0x2c
    14d2:	8b a7       	std	Y+43, r24	; 0x2b
    14d4:	8b a5       	ldd	r24, Y+43	; 0x2b
    14d6:	9c a5       	ldd	r25, Y+44	; 0x2c
    14d8:	98 a7       	std	Y+40, r25	; 0x28
    14da:	8f a3       	std	Y+39, r24	; 0x27
    14dc:	8f a1       	ldd	r24, Y+39	; 0x27
    14de:	98 a5       	ldd	r25, Y+40	; 0x28
    14e0:	01 97       	sbiw	r24, 0x01	; 1
    14e2:	f1 f7       	brne	.-4      	; 0x14e0 <Lcd_Init+0x140>
    14e4:	98 a7       	std	Y+40, r25	; 0x28
    14e6:	8f a3       	std	Y+39, r24	; 0x27

	_delay_ms(15);

	Lcd_Cmd(3);
    14e8:	83 e0       	ldi	r24, 0x03	; 3
    14ea:	0e 94 38 0d 	call	0x1a70	; 0x1a70 <Lcd_Cmd>
    14ee:	80 e0       	ldi	r24, 0x00	; 0
    14f0:	90 e0       	ldi	r25, 0x00	; 0
    14f2:	a0 ea       	ldi	r26, 0xA0	; 160
    14f4:	b0 e4       	ldi	r27, 0x40	; 64
    14f6:	8b a3       	std	Y+35, r24	; 0x23
    14f8:	9c a3       	std	Y+36, r25	; 0x24
    14fa:	ad a3       	std	Y+37, r26	; 0x25
    14fc:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14fe:	6b a1       	ldd	r22, Y+35	; 0x23
    1500:	7c a1       	ldd	r23, Y+36	; 0x24
    1502:	8d a1       	ldd	r24, Y+37	; 0x25
    1504:	9e a1       	ldd	r25, Y+38	; 0x26
    1506:	20 e0       	ldi	r18, 0x00	; 0
    1508:	30 e0       	ldi	r19, 0x00	; 0
    150a:	4a e7       	ldi	r20, 0x7A	; 122
    150c:	55 e4       	ldi	r21, 0x45	; 69
    150e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1512:	dc 01       	movw	r26, r24
    1514:	cb 01       	movw	r24, r22
    1516:	8f 8f       	std	Y+31, r24	; 0x1f
    1518:	98 a3       	std	Y+32, r25	; 0x20
    151a:	a9 a3       	std	Y+33, r26	; 0x21
    151c:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    151e:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1520:	78 a1       	ldd	r23, Y+32	; 0x20
    1522:	89 a1       	ldd	r24, Y+33	; 0x21
    1524:	9a a1       	ldd	r25, Y+34	; 0x22
    1526:	20 e0       	ldi	r18, 0x00	; 0
    1528:	30 e0       	ldi	r19, 0x00	; 0
    152a:	40 e8       	ldi	r20, 0x80	; 128
    152c:	5f e3       	ldi	r21, 0x3F	; 63
    152e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1532:	88 23       	and	r24, r24
    1534:	2c f4       	brge	.+10     	; 0x1540 <Lcd_Init+0x1a0>
		__ticks = 1;
    1536:	81 e0       	ldi	r24, 0x01	; 1
    1538:	90 e0       	ldi	r25, 0x00	; 0
    153a:	9e 8f       	std	Y+30, r25	; 0x1e
    153c:	8d 8f       	std	Y+29, r24	; 0x1d
    153e:	3f c0       	rjmp	.+126    	; 0x15be <Lcd_Init+0x21e>
	else if (__tmp > 65535)
    1540:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1542:	78 a1       	ldd	r23, Y+32	; 0x20
    1544:	89 a1       	ldd	r24, Y+33	; 0x21
    1546:	9a a1       	ldd	r25, Y+34	; 0x22
    1548:	20 e0       	ldi	r18, 0x00	; 0
    154a:	3f ef       	ldi	r19, 0xFF	; 255
    154c:	4f e7       	ldi	r20, 0x7F	; 127
    154e:	57 e4       	ldi	r21, 0x47	; 71
    1550:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1554:	18 16       	cp	r1, r24
    1556:	4c f5       	brge	.+82     	; 0x15aa <Lcd_Init+0x20a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1558:	6b a1       	ldd	r22, Y+35	; 0x23
    155a:	7c a1       	ldd	r23, Y+36	; 0x24
    155c:	8d a1       	ldd	r24, Y+37	; 0x25
    155e:	9e a1       	ldd	r25, Y+38	; 0x26
    1560:	20 e0       	ldi	r18, 0x00	; 0
    1562:	30 e0       	ldi	r19, 0x00	; 0
    1564:	40 e2       	ldi	r20, 0x20	; 32
    1566:	51 e4       	ldi	r21, 0x41	; 65
    1568:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    156c:	dc 01       	movw	r26, r24
    156e:	cb 01       	movw	r24, r22
    1570:	bc 01       	movw	r22, r24
    1572:	cd 01       	movw	r24, r26
    1574:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1578:	dc 01       	movw	r26, r24
    157a:	cb 01       	movw	r24, r22
    157c:	9e 8f       	std	Y+30, r25	; 0x1e
    157e:	8d 8f       	std	Y+29, r24	; 0x1d
    1580:	0f c0       	rjmp	.+30     	; 0x15a0 <Lcd_Init+0x200>
    1582:	80 e9       	ldi	r24, 0x90	; 144
    1584:	91 e0       	ldi	r25, 0x01	; 1
    1586:	9c 8f       	std	Y+28, r25	; 0x1c
    1588:	8b 8f       	std	Y+27, r24	; 0x1b
    158a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    158c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    158e:	01 97       	sbiw	r24, 0x01	; 1
    1590:	f1 f7       	brne	.-4      	; 0x158e <Lcd_Init+0x1ee>
    1592:	9c 8f       	std	Y+28, r25	; 0x1c
    1594:	8b 8f       	std	Y+27, r24	; 0x1b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1596:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1598:	9e 8d       	ldd	r25, Y+30	; 0x1e
    159a:	01 97       	sbiw	r24, 0x01	; 1
    159c:	9e 8f       	std	Y+30, r25	; 0x1e
    159e:	8d 8f       	std	Y+29, r24	; 0x1d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15a0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    15a2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    15a4:	00 97       	sbiw	r24, 0x00	; 0
    15a6:	69 f7       	brne	.-38     	; 0x1582 <Lcd_Init+0x1e2>
    15a8:	14 c0       	rjmp	.+40     	; 0x15d2 <Lcd_Init+0x232>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15aa:	6f 8d       	ldd	r22, Y+31	; 0x1f
    15ac:	78 a1       	ldd	r23, Y+32	; 0x20
    15ae:	89 a1       	ldd	r24, Y+33	; 0x21
    15b0:	9a a1       	ldd	r25, Y+34	; 0x22
    15b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15b6:	dc 01       	movw	r26, r24
    15b8:	cb 01       	movw	r24, r22
    15ba:	9e 8f       	std	Y+30, r25	; 0x1e
    15bc:	8d 8f       	std	Y+29, r24	; 0x1d
    15be:	8d 8d       	ldd	r24, Y+29	; 0x1d
    15c0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    15c2:	9a 8f       	std	Y+26, r25	; 0x1a
    15c4:	89 8f       	std	Y+25, r24	; 0x19
    15c6:	89 8d       	ldd	r24, Y+25	; 0x19
    15c8:	9a 8d       	ldd	r25, Y+26	; 0x1a
    15ca:	01 97       	sbiw	r24, 0x01	; 1
    15cc:	f1 f7       	brne	.-4      	; 0x15ca <Lcd_Init+0x22a>
    15ce:	9a 8f       	std	Y+26, r25	; 0x1a
    15d0:	89 8f       	std	Y+25, r24	; 0x19
	_delay_ms(5);
	Lcd_Cmd(3);
    15d2:	83 e0       	ldi	r24, 0x03	; 3
    15d4:	0e 94 38 0d 	call	0x1a70	; 0x1a70 <Lcd_Cmd>
    15d8:	80 e0       	ldi	r24, 0x00	; 0
    15da:	90 e0       	ldi	r25, 0x00	; 0
    15dc:	a8 ec       	ldi	r26, 0xC8	; 200
    15de:	b2 e4       	ldi	r27, 0x42	; 66
    15e0:	8d 8b       	std	Y+21, r24	; 0x15
    15e2:	9e 8b       	std	Y+22, r25	; 0x16
    15e4:	af 8b       	std	Y+23, r26	; 0x17
    15e6:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    15e8:	6d 89       	ldd	r22, Y+21	; 0x15
    15ea:	7e 89       	ldd	r23, Y+22	; 0x16
    15ec:	8f 89       	ldd	r24, Y+23	; 0x17
    15ee:	98 8d       	ldd	r25, Y+24	; 0x18
    15f0:	2b ea       	ldi	r18, 0xAB	; 171
    15f2:	3a ea       	ldi	r19, 0xAA	; 170
    15f4:	4a ea       	ldi	r20, 0xAA	; 170
    15f6:	50 e4       	ldi	r21, 0x40	; 64
    15f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15fc:	dc 01       	movw	r26, r24
    15fe:	cb 01       	movw	r24, r22
    1600:	89 8b       	std	Y+17, r24	; 0x11
    1602:	9a 8b       	std	Y+18, r25	; 0x12
    1604:	ab 8b       	std	Y+19, r26	; 0x13
    1606:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1608:	69 89       	ldd	r22, Y+17	; 0x11
    160a:	7a 89       	ldd	r23, Y+18	; 0x12
    160c:	8b 89       	ldd	r24, Y+19	; 0x13
    160e:	9c 89       	ldd	r25, Y+20	; 0x14
    1610:	20 e0       	ldi	r18, 0x00	; 0
    1612:	30 e0       	ldi	r19, 0x00	; 0
    1614:	40 e8       	ldi	r20, 0x80	; 128
    1616:	5f e3       	ldi	r21, 0x3F	; 63
    1618:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    161c:	88 23       	and	r24, r24
    161e:	1c f4       	brge	.+6      	; 0x1626 <Lcd_Init+0x286>
		__ticks = 1;
    1620:	81 e0       	ldi	r24, 0x01	; 1
    1622:	88 8b       	std	Y+16, r24	; 0x10
    1624:	91 c0       	rjmp	.+290    	; 0x1748 <Lcd_Init+0x3a8>
	else if (__tmp > 255)
    1626:	69 89       	ldd	r22, Y+17	; 0x11
    1628:	7a 89       	ldd	r23, Y+18	; 0x12
    162a:	8b 89       	ldd	r24, Y+19	; 0x13
    162c:	9c 89       	ldd	r25, Y+20	; 0x14
    162e:	20 e0       	ldi	r18, 0x00	; 0
    1630:	30 e0       	ldi	r19, 0x00	; 0
    1632:	4f e7       	ldi	r20, 0x7F	; 127
    1634:	53 e4       	ldi	r21, 0x43	; 67
    1636:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    163a:	18 16       	cp	r1, r24
    163c:	0c f0       	brlt	.+2      	; 0x1640 <Lcd_Init+0x2a0>
    163e:	7b c0       	rjmp	.+246    	; 0x1736 <Lcd_Init+0x396>
	{
		_delay_ms(__us / 1000.0);
    1640:	6d 89       	ldd	r22, Y+21	; 0x15
    1642:	7e 89       	ldd	r23, Y+22	; 0x16
    1644:	8f 89       	ldd	r24, Y+23	; 0x17
    1646:	98 8d       	ldd	r25, Y+24	; 0x18
    1648:	20 e0       	ldi	r18, 0x00	; 0
    164a:	30 e0       	ldi	r19, 0x00	; 0
    164c:	4a e7       	ldi	r20, 0x7A	; 122
    164e:	54 e4       	ldi	r21, 0x44	; 68
    1650:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1654:	dc 01       	movw	r26, r24
    1656:	cb 01       	movw	r24, r22
    1658:	8c 87       	std	Y+12, r24	; 0x0c
    165a:	9d 87       	std	Y+13, r25	; 0x0d
    165c:	ae 87       	std	Y+14, r26	; 0x0e
    165e:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1660:	6c 85       	ldd	r22, Y+12	; 0x0c
    1662:	7d 85       	ldd	r23, Y+13	; 0x0d
    1664:	8e 85       	ldd	r24, Y+14	; 0x0e
    1666:	9f 85       	ldd	r25, Y+15	; 0x0f
    1668:	20 e0       	ldi	r18, 0x00	; 0
    166a:	30 e0       	ldi	r19, 0x00	; 0
    166c:	4a e7       	ldi	r20, 0x7A	; 122
    166e:	55 e4       	ldi	r21, 0x45	; 69
    1670:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1674:	dc 01       	movw	r26, r24
    1676:	cb 01       	movw	r24, r22
    1678:	88 87       	std	Y+8, r24	; 0x08
    167a:	99 87       	std	Y+9, r25	; 0x09
    167c:	aa 87       	std	Y+10, r26	; 0x0a
    167e:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1680:	68 85       	ldd	r22, Y+8	; 0x08
    1682:	79 85       	ldd	r23, Y+9	; 0x09
    1684:	8a 85       	ldd	r24, Y+10	; 0x0a
    1686:	9b 85       	ldd	r25, Y+11	; 0x0b
    1688:	20 e0       	ldi	r18, 0x00	; 0
    168a:	30 e0       	ldi	r19, 0x00	; 0
    168c:	40 e8       	ldi	r20, 0x80	; 128
    168e:	5f e3       	ldi	r21, 0x3F	; 63
    1690:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1694:	88 23       	and	r24, r24
    1696:	2c f4       	brge	.+10     	; 0x16a2 <Lcd_Init+0x302>
		__ticks = 1;
    1698:	81 e0       	ldi	r24, 0x01	; 1
    169a:	90 e0       	ldi	r25, 0x00	; 0
    169c:	9f 83       	std	Y+7, r25	; 0x07
    169e:	8e 83       	std	Y+6, r24	; 0x06
    16a0:	3f c0       	rjmp	.+126    	; 0x1720 <Lcd_Init+0x380>
	else if (__tmp > 65535)
    16a2:	68 85       	ldd	r22, Y+8	; 0x08
    16a4:	79 85       	ldd	r23, Y+9	; 0x09
    16a6:	8a 85       	ldd	r24, Y+10	; 0x0a
    16a8:	9b 85       	ldd	r25, Y+11	; 0x0b
    16aa:	20 e0       	ldi	r18, 0x00	; 0
    16ac:	3f ef       	ldi	r19, 0xFF	; 255
    16ae:	4f e7       	ldi	r20, 0x7F	; 127
    16b0:	57 e4       	ldi	r21, 0x47	; 71
    16b2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    16b6:	18 16       	cp	r1, r24
    16b8:	4c f5       	brge	.+82     	; 0x170c <Lcd_Init+0x36c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16ba:	6c 85       	ldd	r22, Y+12	; 0x0c
    16bc:	7d 85       	ldd	r23, Y+13	; 0x0d
    16be:	8e 85       	ldd	r24, Y+14	; 0x0e
    16c0:	9f 85       	ldd	r25, Y+15	; 0x0f
    16c2:	20 e0       	ldi	r18, 0x00	; 0
    16c4:	30 e0       	ldi	r19, 0x00	; 0
    16c6:	40 e2       	ldi	r20, 0x20	; 32
    16c8:	51 e4       	ldi	r21, 0x41	; 65
    16ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16ce:	dc 01       	movw	r26, r24
    16d0:	cb 01       	movw	r24, r22
    16d2:	bc 01       	movw	r22, r24
    16d4:	cd 01       	movw	r24, r26
    16d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16da:	dc 01       	movw	r26, r24
    16dc:	cb 01       	movw	r24, r22
    16de:	9f 83       	std	Y+7, r25	; 0x07
    16e0:	8e 83       	std	Y+6, r24	; 0x06
    16e2:	0f c0       	rjmp	.+30     	; 0x1702 <Lcd_Init+0x362>
    16e4:	80 e9       	ldi	r24, 0x90	; 144
    16e6:	91 e0       	ldi	r25, 0x01	; 1
    16e8:	9d 83       	std	Y+5, r25	; 0x05
    16ea:	8c 83       	std	Y+4, r24	; 0x04
    16ec:	8c 81       	ldd	r24, Y+4	; 0x04
    16ee:	9d 81       	ldd	r25, Y+5	; 0x05
    16f0:	01 97       	sbiw	r24, 0x01	; 1
    16f2:	f1 f7       	brne	.-4      	; 0x16f0 <Lcd_Init+0x350>
    16f4:	9d 83       	std	Y+5, r25	; 0x05
    16f6:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16f8:	8e 81       	ldd	r24, Y+6	; 0x06
    16fa:	9f 81       	ldd	r25, Y+7	; 0x07
    16fc:	01 97       	sbiw	r24, 0x01	; 1
    16fe:	9f 83       	std	Y+7, r25	; 0x07
    1700:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1702:	8e 81       	ldd	r24, Y+6	; 0x06
    1704:	9f 81       	ldd	r25, Y+7	; 0x07
    1706:	00 97       	sbiw	r24, 0x00	; 0
    1708:	69 f7       	brne	.-38     	; 0x16e4 <Lcd_Init+0x344>
    170a:	24 c0       	rjmp	.+72     	; 0x1754 <Lcd_Init+0x3b4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    170c:	68 85       	ldd	r22, Y+8	; 0x08
    170e:	79 85       	ldd	r23, Y+9	; 0x09
    1710:	8a 85       	ldd	r24, Y+10	; 0x0a
    1712:	9b 85       	ldd	r25, Y+11	; 0x0b
    1714:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1718:	dc 01       	movw	r26, r24
    171a:	cb 01       	movw	r24, r22
    171c:	9f 83       	std	Y+7, r25	; 0x07
    171e:	8e 83       	std	Y+6, r24	; 0x06
    1720:	8e 81       	ldd	r24, Y+6	; 0x06
    1722:	9f 81       	ldd	r25, Y+7	; 0x07
    1724:	9b 83       	std	Y+3, r25	; 0x03
    1726:	8a 83       	std	Y+2, r24	; 0x02
    1728:	8a 81       	ldd	r24, Y+2	; 0x02
    172a:	9b 81       	ldd	r25, Y+3	; 0x03
    172c:	01 97       	sbiw	r24, 0x01	; 1
    172e:	f1 f7       	brne	.-4      	; 0x172c <Lcd_Init+0x38c>
    1730:	9b 83       	std	Y+3, r25	; 0x03
    1732:	8a 83       	std	Y+2, r24	; 0x02
    1734:	0f c0       	rjmp	.+30     	; 0x1754 <Lcd_Init+0x3b4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1736:	69 89       	ldd	r22, Y+17	; 0x11
    1738:	7a 89       	ldd	r23, Y+18	; 0x12
    173a:	8b 89       	ldd	r24, Y+19	; 0x13
    173c:	9c 89       	ldd	r25, Y+20	; 0x14
    173e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1742:	dc 01       	movw	r26, r24
    1744:	cb 01       	movw	r24, r22
    1746:	88 8b       	std	Y+16, r24	; 0x10
    1748:	88 89       	ldd	r24, Y+16	; 0x10
    174a:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    174c:	89 81       	ldd	r24, Y+1	; 0x01
    174e:	8a 95       	dec	r24
    1750:	f1 f7       	brne	.-4      	; 0x174e <Lcd_Init+0x3ae>
    1752:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(100);
	Lcd_Cmd(3);
    1754:	83 e0       	ldi	r24, 0x03	; 3
    1756:	0e 94 38 0d 	call	0x1a70	; 0x1a70 <Lcd_Cmd>
	Lcd_Cmd(2);
    175a:	82 e0       	ldi	r24, 0x02	; 2
    175c:	0e 94 38 0d 	call	0x1a70	; 0x1a70 <Lcd_Cmd>
	Lcd_Cmd(_LCD_4BIT_MODE);
    1760:	88 e2       	ldi	r24, 0x28	; 40
    1762:	0e 94 38 0d 	call	0x1a70	; 0x1a70 <Lcd_Cmd>
	Lcd_WriteCustom();
    1766:	0e 94 93 09 	call	0x1326	; 0x1326 <Lcd_WriteCustom>
	Lcd_Goto_Row_Column(0,0);
    176a:	80 e0       	ldi	r24, 0x00	; 0
    176c:	60 e0       	ldi	r22, 0x00	; 0
    176e:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <Lcd_Goto_Row_Column>
	Lcd_Cmd(_LCD_CURSOR_OFF);
    1772:	8c e0       	ldi	r24, 0x0C	; 12
    1774:	0e 94 38 0d 	call	0x1a70	; 0x1a70 <Lcd_Cmd>
}
    1778:	e4 96       	adiw	r28, 0x34	; 52
    177a:	0f b6       	in	r0, 0x3f	; 63
    177c:	f8 94       	cli
    177e:	de bf       	out	0x3e, r29	; 62
    1780:	0f be       	out	0x3f, r0	; 63
    1782:	cd bf       	out	0x3d, r28	; 61
    1784:	cf 91       	pop	r28
    1786:	df 91       	pop	r29
    1788:	08 95       	ret

0000178a <Enable_Pulse>:
static void Enable_Pulse(void)
{
    178a:	df 93       	push	r29
    178c:	cf 93       	push	r28
    178e:	cd b7       	in	r28, 0x3d	; 61
    1790:	de b7       	in	r29, 0x3e	; 62
    1792:	a6 97       	sbiw	r28, 0x26	; 38
    1794:	0f b6       	in	r0, 0x3f	; 63
    1796:	f8 94       	cli
    1798:	de bf       	out	0x3e, r29	; 62
    179a:	0f be       	out	0x3f, r0	; 63
    179c:	cd bf       	out	0x3d, r28	; 61
	Dio_WriteChannel(DIO_PORTB, DIO_PIN3, STD_HIGH);
    179e:	81 e0       	ldi	r24, 0x01	; 1
    17a0:	63 e0       	ldi	r22, 0x03	; 3
    17a2:	41 e0       	ldi	r20, 0x01	; 1
    17a4:	0e 94 d8 14 	call	0x29b0	; 0x29b0 <Dio_WriteChannel>
    17a8:	80 e0       	ldi	r24, 0x00	; 0
    17aa:	90 e0       	ldi	r25, 0x00	; 0
    17ac:	a0 e8       	ldi	r26, 0x80	; 128
    17ae:	bf e3       	ldi	r27, 0x3F	; 63
    17b0:	8b a3       	std	Y+35, r24	; 0x23
    17b2:	9c a3       	std	Y+36, r25	; 0x24
    17b4:	ad a3       	std	Y+37, r26	; 0x25
    17b6:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    17b8:	6b a1       	ldd	r22, Y+35	; 0x23
    17ba:	7c a1       	ldd	r23, Y+36	; 0x24
    17bc:	8d a1       	ldd	r24, Y+37	; 0x25
    17be:	9e a1       	ldd	r25, Y+38	; 0x26
    17c0:	2b ea       	ldi	r18, 0xAB	; 171
    17c2:	3a ea       	ldi	r19, 0xAA	; 170
    17c4:	4a ea       	ldi	r20, 0xAA	; 170
    17c6:	50 e4       	ldi	r21, 0x40	; 64
    17c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17cc:	dc 01       	movw	r26, r24
    17ce:	cb 01       	movw	r24, r22
    17d0:	8f 8f       	std	Y+31, r24	; 0x1f
    17d2:	98 a3       	std	Y+32, r25	; 0x20
    17d4:	a9 a3       	std	Y+33, r26	; 0x21
    17d6:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    17d8:	6f 8d       	ldd	r22, Y+31	; 0x1f
    17da:	78 a1       	ldd	r23, Y+32	; 0x20
    17dc:	89 a1       	ldd	r24, Y+33	; 0x21
    17de:	9a a1       	ldd	r25, Y+34	; 0x22
    17e0:	20 e0       	ldi	r18, 0x00	; 0
    17e2:	30 e0       	ldi	r19, 0x00	; 0
    17e4:	40 e8       	ldi	r20, 0x80	; 128
    17e6:	5f e3       	ldi	r21, 0x3F	; 63
    17e8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    17ec:	88 23       	and	r24, r24
    17ee:	1c f4       	brge	.+6      	; 0x17f6 <Enable_Pulse+0x6c>
		__ticks = 1;
    17f0:	81 e0       	ldi	r24, 0x01	; 1
    17f2:	8e 8f       	std	Y+30, r24	; 0x1e
    17f4:	91 c0       	rjmp	.+290    	; 0x1918 <Enable_Pulse+0x18e>
	else if (__tmp > 255)
    17f6:	6f 8d       	ldd	r22, Y+31	; 0x1f
    17f8:	78 a1       	ldd	r23, Y+32	; 0x20
    17fa:	89 a1       	ldd	r24, Y+33	; 0x21
    17fc:	9a a1       	ldd	r25, Y+34	; 0x22
    17fe:	20 e0       	ldi	r18, 0x00	; 0
    1800:	30 e0       	ldi	r19, 0x00	; 0
    1802:	4f e7       	ldi	r20, 0x7F	; 127
    1804:	53 e4       	ldi	r21, 0x43	; 67
    1806:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    180a:	18 16       	cp	r1, r24
    180c:	0c f0       	brlt	.+2      	; 0x1810 <Enable_Pulse+0x86>
    180e:	7b c0       	rjmp	.+246    	; 0x1906 <Enable_Pulse+0x17c>
	{
		_delay_ms(__us / 1000.0);
    1810:	6b a1       	ldd	r22, Y+35	; 0x23
    1812:	7c a1       	ldd	r23, Y+36	; 0x24
    1814:	8d a1       	ldd	r24, Y+37	; 0x25
    1816:	9e a1       	ldd	r25, Y+38	; 0x26
    1818:	20 e0       	ldi	r18, 0x00	; 0
    181a:	30 e0       	ldi	r19, 0x00	; 0
    181c:	4a e7       	ldi	r20, 0x7A	; 122
    181e:	54 e4       	ldi	r21, 0x44	; 68
    1820:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1824:	dc 01       	movw	r26, r24
    1826:	cb 01       	movw	r24, r22
    1828:	8a 8f       	std	Y+26, r24	; 0x1a
    182a:	9b 8f       	std	Y+27, r25	; 0x1b
    182c:	ac 8f       	std	Y+28, r26	; 0x1c
    182e:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1830:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1832:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1834:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1836:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1838:	20 e0       	ldi	r18, 0x00	; 0
    183a:	30 e0       	ldi	r19, 0x00	; 0
    183c:	4a e7       	ldi	r20, 0x7A	; 122
    183e:	55 e4       	ldi	r21, 0x45	; 69
    1840:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1844:	dc 01       	movw	r26, r24
    1846:	cb 01       	movw	r24, r22
    1848:	8e 8b       	std	Y+22, r24	; 0x16
    184a:	9f 8b       	std	Y+23, r25	; 0x17
    184c:	a8 8f       	std	Y+24, r26	; 0x18
    184e:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    1850:	6e 89       	ldd	r22, Y+22	; 0x16
    1852:	7f 89       	ldd	r23, Y+23	; 0x17
    1854:	88 8d       	ldd	r24, Y+24	; 0x18
    1856:	99 8d       	ldd	r25, Y+25	; 0x19
    1858:	20 e0       	ldi	r18, 0x00	; 0
    185a:	30 e0       	ldi	r19, 0x00	; 0
    185c:	40 e8       	ldi	r20, 0x80	; 128
    185e:	5f e3       	ldi	r21, 0x3F	; 63
    1860:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1864:	88 23       	and	r24, r24
    1866:	2c f4       	brge	.+10     	; 0x1872 <Enable_Pulse+0xe8>
		__ticks = 1;
    1868:	81 e0       	ldi	r24, 0x01	; 1
    186a:	90 e0       	ldi	r25, 0x00	; 0
    186c:	9d 8b       	std	Y+21, r25	; 0x15
    186e:	8c 8b       	std	Y+20, r24	; 0x14
    1870:	3f c0       	rjmp	.+126    	; 0x18f0 <Enable_Pulse+0x166>
	else if (__tmp > 65535)
    1872:	6e 89       	ldd	r22, Y+22	; 0x16
    1874:	7f 89       	ldd	r23, Y+23	; 0x17
    1876:	88 8d       	ldd	r24, Y+24	; 0x18
    1878:	99 8d       	ldd	r25, Y+25	; 0x19
    187a:	20 e0       	ldi	r18, 0x00	; 0
    187c:	3f ef       	ldi	r19, 0xFF	; 255
    187e:	4f e7       	ldi	r20, 0x7F	; 127
    1880:	57 e4       	ldi	r21, 0x47	; 71
    1882:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1886:	18 16       	cp	r1, r24
    1888:	4c f5       	brge	.+82     	; 0x18dc <Enable_Pulse+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    188a:	6a 8d       	ldd	r22, Y+26	; 0x1a
    188c:	7b 8d       	ldd	r23, Y+27	; 0x1b
    188e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1890:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1892:	20 e0       	ldi	r18, 0x00	; 0
    1894:	30 e0       	ldi	r19, 0x00	; 0
    1896:	40 e2       	ldi	r20, 0x20	; 32
    1898:	51 e4       	ldi	r21, 0x41	; 65
    189a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    189e:	dc 01       	movw	r26, r24
    18a0:	cb 01       	movw	r24, r22
    18a2:	bc 01       	movw	r22, r24
    18a4:	cd 01       	movw	r24, r26
    18a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18aa:	dc 01       	movw	r26, r24
    18ac:	cb 01       	movw	r24, r22
    18ae:	9d 8b       	std	Y+21, r25	; 0x15
    18b0:	8c 8b       	std	Y+20, r24	; 0x14
    18b2:	0f c0       	rjmp	.+30     	; 0x18d2 <Enable_Pulse+0x148>
    18b4:	80 e9       	ldi	r24, 0x90	; 144
    18b6:	91 e0       	ldi	r25, 0x01	; 1
    18b8:	9b 8b       	std	Y+19, r25	; 0x13
    18ba:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    18bc:	8a 89       	ldd	r24, Y+18	; 0x12
    18be:	9b 89       	ldd	r25, Y+19	; 0x13
    18c0:	01 97       	sbiw	r24, 0x01	; 1
    18c2:	f1 f7       	brne	.-4      	; 0x18c0 <Enable_Pulse+0x136>
    18c4:	9b 8b       	std	Y+19, r25	; 0x13
    18c6:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18c8:	8c 89       	ldd	r24, Y+20	; 0x14
    18ca:	9d 89       	ldd	r25, Y+21	; 0x15
    18cc:	01 97       	sbiw	r24, 0x01	; 1
    18ce:	9d 8b       	std	Y+21, r25	; 0x15
    18d0:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18d2:	8c 89       	ldd	r24, Y+20	; 0x14
    18d4:	9d 89       	ldd	r25, Y+21	; 0x15
    18d6:	00 97       	sbiw	r24, 0x00	; 0
    18d8:	69 f7       	brne	.-38     	; 0x18b4 <Enable_Pulse+0x12a>
    18da:	24 c0       	rjmp	.+72     	; 0x1924 <Enable_Pulse+0x19a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18dc:	6e 89       	ldd	r22, Y+22	; 0x16
    18de:	7f 89       	ldd	r23, Y+23	; 0x17
    18e0:	88 8d       	ldd	r24, Y+24	; 0x18
    18e2:	99 8d       	ldd	r25, Y+25	; 0x19
    18e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18e8:	dc 01       	movw	r26, r24
    18ea:	cb 01       	movw	r24, r22
    18ec:	9d 8b       	std	Y+21, r25	; 0x15
    18ee:	8c 8b       	std	Y+20, r24	; 0x14
    18f0:	8c 89       	ldd	r24, Y+20	; 0x14
    18f2:	9d 89       	ldd	r25, Y+21	; 0x15
    18f4:	99 8b       	std	Y+17, r25	; 0x11
    18f6:	88 8b       	std	Y+16, r24	; 0x10
    18f8:	88 89       	ldd	r24, Y+16	; 0x10
    18fa:	99 89       	ldd	r25, Y+17	; 0x11
    18fc:	01 97       	sbiw	r24, 0x01	; 1
    18fe:	f1 f7       	brne	.-4      	; 0x18fc <Enable_Pulse+0x172>
    1900:	99 8b       	std	Y+17, r25	; 0x11
    1902:	88 8b       	std	Y+16, r24	; 0x10
    1904:	0f c0       	rjmp	.+30     	; 0x1924 <Enable_Pulse+0x19a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1906:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1908:	78 a1       	ldd	r23, Y+32	; 0x20
    190a:	89 a1       	ldd	r24, Y+33	; 0x21
    190c:	9a a1       	ldd	r25, Y+34	; 0x22
    190e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1912:	dc 01       	movw	r26, r24
    1914:	cb 01       	movw	r24, r22
    1916:	8e 8f       	std	Y+30, r24	; 0x1e
    1918:	8e 8d       	ldd	r24, Y+30	; 0x1e
    191a:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    191c:	8f 85       	ldd	r24, Y+15	; 0x0f
    191e:	8a 95       	dec	r24
    1920:	f1 f7       	brne	.-4      	; 0x191e <Enable_Pulse+0x194>
    1922:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(1);
	Dio_WriteChannel(DIO_PORTB, DIO_PIN3, STD_LOW);
    1924:	81 e0       	ldi	r24, 0x01	; 1
    1926:	63 e0       	ldi	r22, 0x03	; 3
    1928:	40 e0       	ldi	r20, 0x00	; 0
    192a:	0e 94 d8 14 	call	0x29b0	; 0x29b0 <Dio_WriteChannel>
    192e:	80 e0       	ldi	r24, 0x00	; 0
    1930:	90 e0       	ldi	r25, 0x00	; 0
    1932:	a0 e0       	ldi	r26, 0x00	; 0
    1934:	b0 e4       	ldi	r27, 0x40	; 64
    1936:	8b 87       	std	Y+11, r24	; 0x0b
    1938:	9c 87       	std	Y+12, r25	; 0x0c
    193a:	ad 87       	std	Y+13, r26	; 0x0d
    193c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    193e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1940:	7c 85       	ldd	r23, Y+12	; 0x0c
    1942:	8d 85       	ldd	r24, Y+13	; 0x0d
    1944:	9e 85       	ldd	r25, Y+14	; 0x0e
    1946:	20 e0       	ldi	r18, 0x00	; 0
    1948:	30 e0       	ldi	r19, 0x00	; 0
    194a:	4a e7       	ldi	r20, 0x7A	; 122
    194c:	55 e4       	ldi	r21, 0x45	; 69
    194e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1952:	dc 01       	movw	r26, r24
    1954:	cb 01       	movw	r24, r22
    1956:	8f 83       	std	Y+7, r24	; 0x07
    1958:	98 87       	std	Y+8, r25	; 0x08
    195a:	a9 87       	std	Y+9, r26	; 0x09
    195c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    195e:	6f 81       	ldd	r22, Y+7	; 0x07
    1960:	78 85       	ldd	r23, Y+8	; 0x08
    1962:	89 85       	ldd	r24, Y+9	; 0x09
    1964:	9a 85       	ldd	r25, Y+10	; 0x0a
    1966:	20 e0       	ldi	r18, 0x00	; 0
    1968:	30 e0       	ldi	r19, 0x00	; 0
    196a:	40 e8       	ldi	r20, 0x80	; 128
    196c:	5f e3       	ldi	r21, 0x3F	; 63
    196e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1972:	88 23       	and	r24, r24
    1974:	2c f4       	brge	.+10     	; 0x1980 <Enable_Pulse+0x1f6>
		__ticks = 1;
    1976:	81 e0       	ldi	r24, 0x01	; 1
    1978:	90 e0       	ldi	r25, 0x00	; 0
    197a:	9e 83       	std	Y+6, r25	; 0x06
    197c:	8d 83       	std	Y+5, r24	; 0x05
    197e:	3f c0       	rjmp	.+126    	; 0x19fe <Enable_Pulse+0x274>
	else if (__tmp > 65535)
    1980:	6f 81       	ldd	r22, Y+7	; 0x07
    1982:	78 85       	ldd	r23, Y+8	; 0x08
    1984:	89 85       	ldd	r24, Y+9	; 0x09
    1986:	9a 85       	ldd	r25, Y+10	; 0x0a
    1988:	20 e0       	ldi	r18, 0x00	; 0
    198a:	3f ef       	ldi	r19, 0xFF	; 255
    198c:	4f e7       	ldi	r20, 0x7F	; 127
    198e:	57 e4       	ldi	r21, 0x47	; 71
    1990:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1994:	18 16       	cp	r1, r24
    1996:	4c f5       	brge	.+82     	; 0x19ea <Enable_Pulse+0x260>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1998:	6b 85       	ldd	r22, Y+11	; 0x0b
    199a:	7c 85       	ldd	r23, Y+12	; 0x0c
    199c:	8d 85       	ldd	r24, Y+13	; 0x0d
    199e:	9e 85       	ldd	r25, Y+14	; 0x0e
    19a0:	20 e0       	ldi	r18, 0x00	; 0
    19a2:	30 e0       	ldi	r19, 0x00	; 0
    19a4:	40 e2       	ldi	r20, 0x20	; 32
    19a6:	51 e4       	ldi	r21, 0x41	; 65
    19a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19ac:	dc 01       	movw	r26, r24
    19ae:	cb 01       	movw	r24, r22
    19b0:	bc 01       	movw	r22, r24
    19b2:	cd 01       	movw	r24, r26
    19b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19b8:	dc 01       	movw	r26, r24
    19ba:	cb 01       	movw	r24, r22
    19bc:	9e 83       	std	Y+6, r25	; 0x06
    19be:	8d 83       	std	Y+5, r24	; 0x05
    19c0:	0f c0       	rjmp	.+30     	; 0x19e0 <Enable_Pulse+0x256>
    19c2:	80 e9       	ldi	r24, 0x90	; 144
    19c4:	91 e0       	ldi	r25, 0x01	; 1
    19c6:	9c 83       	std	Y+4, r25	; 0x04
    19c8:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    19ca:	8b 81       	ldd	r24, Y+3	; 0x03
    19cc:	9c 81       	ldd	r25, Y+4	; 0x04
    19ce:	01 97       	sbiw	r24, 0x01	; 1
    19d0:	f1 f7       	brne	.-4      	; 0x19ce <Enable_Pulse+0x244>
    19d2:	9c 83       	std	Y+4, r25	; 0x04
    19d4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19d6:	8d 81       	ldd	r24, Y+5	; 0x05
    19d8:	9e 81       	ldd	r25, Y+6	; 0x06
    19da:	01 97       	sbiw	r24, 0x01	; 1
    19dc:	9e 83       	std	Y+6, r25	; 0x06
    19de:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19e0:	8d 81       	ldd	r24, Y+5	; 0x05
    19e2:	9e 81       	ldd	r25, Y+6	; 0x06
    19e4:	00 97       	sbiw	r24, 0x00	; 0
    19e6:	69 f7       	brne	.-38     	; 0x19c2 <Enable_Pulse+0x238>
    19e8:	14 c0       	rjmp	.+40     	; 0x1a12 <Enable_Pulse+0x288>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19ea:	6f 81       	ldd	r22, Y+7	; 0x07
    19ec:	78 85       	ldd	r23, Y+8	; 0x08
    19ee:	89 85       	ldd	r24, Y+9	; 0x09
    19f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    19f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19f6:	dc 01       	movw	r26, r24
    19f8:	cb 01       	movw	r24, r22
    19fa:	9e 83       	std	Y+6, r25	; 0x06
    19fc:	8d 83       	std	Y+5, r24	; 0x05
    19fe:	8d 81       	ldd	r24, Y+5	; 0x05
    1a00:	9e 81       	ldd	r25, Y+6	; 0x06
    1a02:	9a 83       	std	Y+2, r25	; 0x02
    1a04:	89 83       	std	Y+1, r24	; 0x01
    1a06:	89 81       	ldd	r24, Y+1	; 0x01
    1a08:	9a 81       	ldd	r25, Y+2	; 0x02
    1a0a:	01 97       	sbiw	r24, 0x01	; 1
    1a0c:	f1 f7       	brne	.-4      	; 0x1a0a <Enable_Pulse+0x280>
    1a0e:	9a 83       	std	Y+2, r25	; 0x02
    1a10:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    1a12:	a6 96       	adiw	r28, 0x26	; 38
    1a14:	0f b6       	in	r0, 0x3f	; 63
    1a16:	f8 94       	cli
    1a18:	de bf       	out	0x3e, r29	; 62
    1a1a:	0f be       	out	0x3f, r0	; 63
    1a1c:	cd bf       	out	0x3d, r28	; 61
    1a1e:	cf 91       	pop	r28
    1a20:	df 91       	pop	r29
    1a22:	08 95       	ret

00001a24 <Lcd_Data>:

static void Lcd_Data(u8 data) /*	RS-> 1	*/
{
    1a24:	df 93       	push	r29
    1a26:	cf 93       	push	r28
    1a28:	00 d0       	rcall	.+0      	; 0x1a2a <Lcd_Data+0x6>
    1a2a:	0f 92       	push	r0
    1a2c:	cd b7       	in	r28, 0x3d	; 61
    1a2e:	de b7       	in	r29, 0x3e	; 62
    1a30:	8b 83       	std	Y+3, r24	; 0x03
	u8 High_Nibble = data;    /*	MSB	*/
    1a32:	8b 81       	ldd	r24, Y+3	; 0x03
    1a34:	8a 83       	std	Y+2, r24	; 0x02
	u8 Low_Nibble = data<<4;		/*	LSB	*/
    1a36:	8b 81       	ldd	r24, Y+3	; 0x03
    1a38:	82 95       	swap	r24
    1a3a:	80 7f       	andi	r24, 0xF0	; 240
    1a3c:	89 83       	std	Y+1, r24	; 0x01
	Dio_WriteChannel(DIO_PORTB, DIO_PIN1, STD_HIGH);   /* Data Mode */
    1a3e:	81 e0       	ldi	r24, 0x01	; 1
    1a40:	61 e0       	ldi	r22, 0x01	; 1
    1a42:	41 e0       	ldi	r20, 0x01	; 1
    1a44:	0e 94 d8 14 	call	0x29b0	; 0x29b0 <Dio_WriteChannel>
	Dio_WriteGroup(DIO_PORTA,LCD_MASK,High_Nibble);
    1a48:	80 e0       	ldi	r24, 0x00	; 0
    1a4a:	60 ef       	ldi	r22, 0xF0	; 240
    1a4c:	4a 81       	ldd	r20, Y+2	; 0x02
    1a4e:	0e 94 bb 15 	call	0x2b76	; 0x2b76 <Dio_WriteGroup>
	Enable_Pulse();
    1a52:	0e 94 c5 0b 	call	0x178a	; 0x178a <Enable_Pulse>

	Dio_WriteGroup(DIO_PORTA,LCD_MASK,Low_Nibble);
    1a56:	80 e0       	ldi	r24, 0x00	; 0
    1a58:	60 ef       	ldi	r22, 0xF0	; 240
    1a5a:	49 81       	ldd	r20, Y+1	; 0x01
    1a5c:	0e 94 bb 15 	call	0x2b76	; 0x2b76 <Dio_WriteGroup>
	Enable_Pulse();
    1a60:	0e 94 c5 0b 	call	0x178a	; 0x178a <Enable_Pulse>
}
    1a64:	0f 90       	pop	r0
    1a66:	0f 90       	pop	r0
    1a68:	0f 90       	pop	r0
    1a6a:	cf 91       	pop	r28
    1a6c:	df 91       	pop	r29
    1a6e:	08 95       	ret

00001a70 <Lcd_Cmd>:

void Lcd_Cmd(lcd_Cmd_Type cmd)/*	RS-> 0	*/
{
    1a70:	df 93       	push	r29
    1a72:	cf 93       	push	r28
    1a74:	00 d0       	rcall	.+0      	; 0x1a76 <Lcd_Cmd+0x6>
    1a76:	0f 92       	push	r0
    1a78:	cd b7       	in	r28, 0x3d	; 61
    1a7a:	de b7       	in	r29, 0x3e	; 62
    1a7c:	8b 83       	std	Y+3, r24	; 0x03
	u8 High_Nibble = cmd;    /*	MSB	*/
    1a7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a80:	8a 83       	std	Y+2, r24	; 0x02
	u8 Low_Nibble = cmd<<4;		/*	LSB	*/
    1a82:	8b 81       	ldd	r24, Y+3	; 0x03
    1a84:	82 95       	swap	r24
    1a86:	80 7f       	andi	r24, 0xF0	; 240
    1a88:	89 83       	std	Y+1, r24	; 0x01
	Dio_WriteChannel(DIO_PORTB, DIO_PIN1, STD_LOW);   /* Command Mode */
    1a8a:	81 e0       	ldi	r24, 0x01	; 1
    1a8c:	61 e0       	ldi	r22, 0x01	; 1
    1a8e:	40 e0       	ldi	r20, 0x00	; 0
    1a90:	0e 94 d8 14 	call	0x29b0	; 0x29b0 <Dio_WriteChannel>
	Dio_WriteGroup(DIO_PORTA,LCD_MASK,High_Nibble);
    1a94:	80 e0       	ldi	r24, 0x00	; 0
    1a96:	60 ef       	ldi	r22, 0xF0	; 240
    1a98:	4a 81       	ldd	r20, Y+2	; 0x02
    1a9a:	0e 94 bb 15 	call	0x2b76	; 0x2b76 <Dio_WriteGroup>
	Enable_Pulse();
    1a9e:	0e 94 c5 0b 	call	0x178a	; 0x178a <Enable_Pulse>

	Dio_WriteGroup(DIO_PORTA,LCD_MASK,Low_Nibble);
    1aa2:	80 e0       	ldi	r24, 0x00	; 0
    1aa4:	60 ef       	ldi	r22, 0xF0	; 240
    1aa6:	49 81       	ldd	r20, Y+1	; 0x01
    1aa8:	0e 94 bb 15 	call	0x2b76	; 0x2b76 <Dio_WriteGroup>
	Enable_Pulse();
    1aac:	0e 94 c5 0b 	call	0x178a	; 0x178a <Enable_Pulse>
}
    1ab0:	0f 90       	pop	r0
    1ab2:	0f 90       	pop	r0
    1ab4:	0f 90       	pop	r0
    1ab6:	cf 91       	pop	r28
    1ab8:	df 91       	pop	r29
    1aba:	08 95       	ret

00001abc <Lcd_DisplayChr>:

void Lcd_DisplayChr(u8 chr)
{
    1abc:	df 93       	push	r29
    1abe:	cf 93       	push	r28
    1ac0:	0f 92       	push	r0
    1ac2:	cd b7       	in	r28, 0x3d	; 61
    1ac4:	de b7       	in	r29, 0x3e	; 62
    1ac6:	89 83       	std	Y+1, r24	; 0x01
	Lcd_Data(chr);
    1ac8:	89 81       	ldd	r24, Y+1	; 0x01
    1aca:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <Lcd_Data>
}
    1ace:	0f 90       	pop	r0
    1ad0:	cf 91       	pop	r28
    1ad2:	df 91       	pop	r29
    1ad4:	08 95       	ret

00001ad6 <Lcd_DisplayStr>:

void Lcd_DisplayStr(u8* str)
{
    1ad6:	df 93       	push	r29
    1ad8:	cf 93       	push	r28
    1ada:	00 d0       	rcall	.+0      	; 0x1adc <Lcd_DisplayStr+0x6>
    1adc:	cd b7       	in	r28, 0x3d	; 61
    1ade:	de b7       	in	r29, 0x3e	; 62
    1ae0:	9a 83       	std	Y+2, r25	; 0x02
    1ae2:	89 83       	std	Y+1, r24	; 0x01
    1ae4:	0a c0       	rjmp	.+20     	; 0x1afa <Lcd_DisplayStr+0x24>
	while (*str != '\0')
	{
		Lcd_DisplayChr(*str);
    1ae6:	e9 81       	ldd	r30, Y+1	; 0x01
    1ae8:	fa 81       	ldd	r31, Y+2	; 0x02
    1aea:	80 81       	ld	r24, Z
    1aec:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <Lcd_DisplayChr>
		str++;
    1af0:	89 81       	ldd	r24, Y+1	; 0x01
    1af2:	9a 81       	ldd	r25, Y+2	; 0x02
    1af4:	01 96       	adiw	r24, 0x01	; 1
    1af6:	9a 83       	std	Y+2, r25	; 0x02
    1af8:	89 83       	std	Y+1, r24	; 0x01
	Lcd_Data(chr);
}

void Lcd_DisplayStr(u8* str)
{
	while (*str != '\0')
    1afa:	e9 81       	ldd	r30, Y+1	; 0x01
    1afc:	fa 81       	ldd	r31, Y+2	; 0x02
    1afe:	80 81       	ld	r24, Z
    1b00:	88 23       	and	r24, r24
    1b02:	89 f7       	brne	.-30     	; 0x1ae6 <Lcd_DisplayStr+0x10>
	{
		Lcd_DisplayChr(*str);
		str++;
	}
}
    1b04:	0f 90       	pop	r0
    1b06:	0f 90       	pop	r0
    1b08:	cf 91       	pop	r28
    1b0a:	df 91       	pop	r29
    1b0c:	08 95       	ret

00001b0e <Lcd_Goto_Row_Column>:

void Lcd_Goto_Row_Column(u8 row, u8 col)
{
    1b0e:	df 93       	push	r29
    1b10:	cf 93       	push	r28
    1b12:	00 d0       	rcall	.+0      	; 0x1b14 <Lcd_Goto_Row_Column+0x6>
    1b14:	00 d0       	rcall	.+0      	; 0x1b16 <Lcd_Goto_Row_Column+0x8>
    1b16:	cd b7       	in	r28, 0x3d	; 61
    1b18:	de b7       	in	r29, 0x3e	; 62
    1b1a:	89 83       	std	Y+1, r24	; 0x01
    1b1c:	6a 83       	std	Y+2, r22	; 0x02
	switch (row)
    1b1e:	89 81       	ldd	r24, Y+1	; 0x01
    1b20:	28 2f       	mov	r18, r24
    1b22:	30 e0       	ldi	r19, 0x00	; 0
    1b24:	3c 83       	std	Y+4, r19	; 0x04
    1b26:	2b 83       	std	Y+3, r18	; 0x03
    1b28:	8b 81       	ldd	r24, Y+3	; 0x03
    1b2a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b2c:	00 97       	sbiw	r24, 0x00	; 0
    1b2e:	31 f0       	breq	.+12     	; 0x1b3c <Lcd_Goto_Row_Column+0x2e>
    1b30:	2b 81       	ldd	r18, Y+3	; 0x03
    1b32:	3c 81       	ldd	r19, Y+4	; 0x04
    1b34:	21 30       	cpi	r18, 0x01	; 1
    1b36:	31 05       	cpc	r19, r1
    1b38:	31 f0       	breq	.+12     	; 0x1b46 <Lcd_Goto_Row_Column+0x38>
    1b3a:	09 c0       	rjmp	.+18     	; 0x1b4e <Lcd_Goto_Row_Column+0x40>
	{
	case 0:
		Lcd_Cmd(0x80+col);
    1b3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b3e:	80 58       	subi	r24, 0x80	; 128
    1b40:	0e 94 38 0d 	call	0x1a70	; 0x1a70 <Lcd_Cmd>
    1b44:	04 c0       	rjmp	.+8      	; 0x1b4e <Lcd_Goto_Row_Column+0x40>
		break;

	case 1:
		Lcd_Cmd(0xC0+col);
    1b46:	8a 81       	ldd	r24, Y+2	; 0x02
    1b48:	80 54       	subi	r24, 0x40	; 64
    1b4a:	0e 94 38 0d 	call	0x1a70	; 0x1a70 <Lcd_Cmd>
		break;
	}
}
    1b4e:	0f 90       	pop	r0
    1b50:	0f 90       	pop	r0
    1b52:	0f 90       	pop	r0
    1b54:	0f 90       	pop	r0
    1b56:	cf 91       	pop	r28
    1b58:	df 91       	pop	r29
    1b5a:	08 95       	ret

00001b5c <Lcd_DisplayNum>:
void Lcd_DisplayNum(u16 num)
{
    1b5c:	df 93       	push	r29
    1b5e:	cf 93       	push	r28
    1b60:	00 d0       	rcall	.+0      	; 0x1b62 <Lcd_DisplayNum+0x6>
    1b62:	cd b7       	in	r28, 0x3d	; 61
    1b64:	de b7       	in	r29, 0x3e	; 62
    1b66:	9a 83       	std	Y+2, r25	; 0x02
    1b68:	89 83       	std	Y+1, r24	; 0x01
	Lcd_DisplayChr(num/1000 + '0');
    1b6a:	89 81       	ldd	r24, Y+1	; 0x01
    1b6c:	9a 81       	ldd	r25, Y+2	; 0x02
    1b6e:	28 ee       	ldi	r18, 0xE8	; 232
    1b70:	33 e0       	ldi	r19, 0x03	; 3
    1b72:	b9 01       	movw	r22, r18
    1b74:	0e 94 9b 17 	call	0x2f36	; 0x2f36 <__udivmodhi4>
    1b78:	cb 01       	movw	r24, r22
    1b7a:	80 5d       	subi	r24, 0xD0	; 208
    1b7c:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <Lcd_DisplayChr>
	Lcd_DisplayChr(num%1000/100 + '0');
    1b80:	89 81       	ldd	r24, Y+1	; 0x01
    1b82:	9a 81       	ldd	r25, Y+2	; 0x02
    1b84:	28 ee       	ldi	r18, 0xE8	; 232
    1b86:	33 e0       	ldi	r19, 0x03	; 3
    1b88:	b9 01       	movw	r22, r18
    1b8a:	0e 94 9b 17 	call	0x2f36	; 0x2f36 <__udivmodhi4>
    1b8e:	24 e6       	ldi	r18, 0x64	; 100
    1b90:	30 e0       	ldi	r19, 0x00	; 0
    1b92:	b9 01       	movw	r22, r18
    1b94:	0e 94 9b 17 	call	0x2f36	; 0x2f36 <__udivmodhi4>
    1b98:	cb 01       	movw	r24, r22
    1b9a:	80 5d       	subi	r24, 0xD0	; 208
    1b9c:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <Lcd_DisplayChr>
	Lcd_DisplayChr(num%1000%100/10 + '0');
    1ba0:	89 81       	ldd	r24, Y+1	; 0x01
    1ba2:	9a 81       	ldd	r25, Y+2	; 0x02
    1ba4:	28 ee       	ldi	r18, 0xE8	; 232
    1ba6:	33 e0       	ldi	r19, 0x03	; 3
    1ba8:	b9 01       	movw	r22, r18
    1baa:	0e 94 9b 17 	call	0x2f36	; 0x2f36 <__udivmodhi4>
    1bae:	24 e6       	ldi	r18, 0x64	; 100
    1bb0:	30 e0       	ldi	r19, 0x00	; 0
    1bb2:	b9 01       	movw	r22, r18
    1bb4:	0e 94 9b 17 	call	0x2f36	; 0x2f36 <__udivmodhi4>
    1bb8:	2a e0       	ldi	r18, 0x0A	; 10
    1bba:	30 e0       	ldi	r19, 0x00	; 0
    1bbc:	b9 01       	movw	r22, r18
    1bbe:	0e 94 9b 17 	call	0x2f36	; 0x2f36 <__udivmodhi4>
    1bc2:	cb 01       	movw	r24, r22
    1bc4:	80 5d       	subi	r24, 0xD0	; 208
    1bc6:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <Lcd_DisplayChr>
	Lcd_DisplayChr(num%1000%100%10 + '0');
    1bca:	89 81       	ldd	r24, Y+1	; 0x01
    1bcc:	9a 81       	ldd	r25, Y+2	; 0x02
    1bce:	28 ee       	ldi	r18, 0xE8	; 232
    1bd0:	33 e0       	ldi	r19, 0x03	; 3
    1bd2:	b9 01       	movw	r22, r18
    1bd4:	0e 94 9b 17 	call	0x2f36	; 0x2f36 <__udivmodhi4>
    1bd8:	24 e6       	ldi	r18, 0x64	; 100
    1bda:	30 e0       	ldi	r19, 0x00	; 0
    1bdc:	b9 01       	movw	r22, r18
    1bde:	0e 94 9b 17 	call	0x2f36	; 0x2f36 <__udivmodhi4>
    1be2:	2a e0       	ldi	r18, 0x0A	; 10
    1be4:	30 e0       	ldi	r19, 0x00	; 0
    1be6:	b9 01       	movw	r22, r18
    1be8:	0e 94 9b 17 	call	0x2f36	; 0x2f36 <__udivmodhi4>
    1bec:	80 5d       	subi	r24, 0xD0	; 208
    1bee:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <Lcd_DisplayChr>
}
    1bf2:	0f 90       	pop	r0
    1bf4:	0f 90       	pop	r0
    1bf6:	cf 91       	pop	r28
    1bf8:	df 91       	pop	r29
    1bfa:	08 95       	ret

00001bfc <LcdDisplayFloat>:

void LcdDisplayFloat(f64 floatNum)
{
    1bfc:	df 93       	push	r29
    1bfe:	cf 93       	push	r28
    1c00:	cd b7       	in	r28, 0x3d	; 61
    1c02:	de b7       	in	r29, 0x3e	; 62
    1c04:	2c 97       	sbiw	r28, 0x0c	; 12
    1c06:	0f b6       	in	r0, 0x3f	; 63
    1c08:	f8 94       	cli
    1c0a:	de bf       	out	0x3e, r29	; 62
    1c0c:	0f be       	out	0x3f, r0	; 63
    1c0e:	cd bf       	out	0x3d, r28	; 61
    1c10:	69 87       	std	Y+9, r22	; 0x09
    1c12:	7a 87       	std	Y+10, r23	; 0x0a
    1c14:	8b 87       	std	Y+11, r24	; 0x0b
    1c16:	9c 87       	std	Y+12, r25	; 0x0c
	u16 intPart = 0;
    1c18:	18 86       	std	Y+8, r1	; 0x08
    1c1a:	1f 82       	std	Y+7, r1	; 0x07
	f64 fractionTemp = 0;
    1c1c:	80 e0       	ldi	r24, 0x00	; 0
    1c1e:	90 e0       	ldi	r25, 0x00	; 0
    1c20:	a0 e0       	ldi	r26, 0x00	; 0
    1c22:	b0 e0       	ldi	r27, 0x00	; 0
    1c24:	8b 83       	std	Y+3, r24	; 0x03
    1c26:	9c 83       	std	Y+4, r25	; 0x04
    1c28:	ad 83       	std	Y+5, r26	; 0x05
    1c2a:	be 83       	std	Y+6, r27	; 0x06
	u16 fractionPart = 0;
    1c2c:	1a 82       	std	Y+2, r1	; 0x02
    1c2e:	19 82       	std	Y+1, r1	; 0x01

	intPart = (u16)floatNum;
    1c30:	69 85       	ldd	r22, Y+9	; 0x09
    1c32:	7a 85       	ldd	r23, Y+10	; 0x0a
    1c34:	8b 85       	ldd	r24, Y+11	; 0x0b
    1c36:	9c 85       	ldd	r25, Y+12	; 0x0c
    1c38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c3c:	dc 01       	movw	r26, r24
    1c3e:	cb 01       	movw	r24, r22
    1c40:	98 87       	std	Y+8, r25	; 0x08
    1c42:	8f 83       	std	Y+7, r24	; 0x07
	fractionTemp = floatNum - intPart;
    1c44:	8f 81       	ldd	r24, Y+7	; 0x07
    1c46:	98 85       	ldd	r25, Y+8	; 0x08
    1c48:	cc 01       	movw	r24, r24
    1c4a:	a0 e0       	ldi	r26, 0x00	; 0
    1c4c:	b0 e0       	ldi	r27, 0x00	; 0
    1c4e:	bc 01       	movw	r22, r24
    1c50:	cd 01       	movw	r24, r26
    1c52:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    1c56:	9b 01       	movw	r18, r22
    1c58:	ac 01       	movw	r20, r24
    1c5a:	69 85       	ldd	r22, Y+9	; 0x09
    1c5c:	7a 85       	ldd	r23, Y+10	; 0x0a
    1c5e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1c60:	9c 85       	ldd	r25, Y+12	; 0x0c
    1c62:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    1c66:	dc 01       	movw	r26, r24
    1c68:	cb 01       	movw	r24, r22
    1c6a:	8b 83       	std	Y+3, r24	; 0x03
    1c6c:	9c 83       	std	Y+4, r25	; 0x04
    1c6e:	ad 83       	std	Y+5, r26	; 0x05
    1c70:	be 83       	std	Y+6, r27	; 0x06
	fractionPart = fractionTemp * 100;
    1c72:	6b 81       	ldd	r22, Y+3	; 0x03
    1c74:	7c 81       	ldd	r23, Y+4	; 0x04
    1c76:	8d 81       	ldd	r24, Y+5	; 0x05
    1c78:	9e 81       	ldd	r25, Y+6	; 0x06
    1c7a:	20 e0       	ldi	r18, 0x00	; 0
    1c7c:	30 e0       	ldi	r19, 0x00	; 0
    1c7e:	48 ec       	ldi	r20, 0xC8	; 200
    1c80:	52 e4       	ldi	r21, 0x42	; 66
    1c82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c86:	dc 01       	movw	r26, r24
    1c88:	cb 01       	movw	r24, r22
    1c8a:	bc 01       	movw	r22, r24
    1c8c:	cd 01       	movw	r24, r26
    1c8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c92:	dc 01       	movw	r26, r24
    1c94:	cb 01       	movw	r24, r22
    1c96:	9a 83       	std	Y+2, r25	; 0x02
    1c98:	89 83       	std	Y+1, r24	; 0x01

	Lcd_DisplayNum(intPart);
    1c9a:	8f 81       	ldd	r24, Y+7	; 0x07
    1c9c:	98 85       	ldd	r25, Y+8	; 0x08
    1c9e:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <Lcd_DisplayNum>
	Lcd_DisplayChr('.');
    1ca2:	8e e2       	ldi	r24, 0x2E	; 46
    1ca4:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <Lcd_DisplayChr>
	Lcd_DisplayNum(fractionPart);
    1ca8:	89 81       	ldd	r24, Y+1	; 0x01
    1caa:	9a 81       	ldd	r25, Y+2	; 0x02
    1cac:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <Lcd_DisplayNum>
}
    1cb0:	2c 96       	adiw	r28, 0x0c	; 12
    1cb2:	0f b6       	in	r0, 0x3f	; 63
    1cb4:	f8 94       	cli
    1cb6:	de bf       	out	0x3e, r29	; 62
    1cb8:	0f be       	out	0x3f, r0	; 63
    1cba:	cd bf       	out	0x3d, r28	; 61
    1cbc:	cf 91       	pop	r28
    1cbe:	df 91       	pop	r29
    1cc0:	08 95       	ret

00001cc2 <Eeprom24C16_Init>:
 *********************************************************************************************************************/

#include "Eeprom24C16.h"
#include "Lcd.h"
void Eeprom24C16_Init(void)
{
    1cc2:	df 93       	push	r29
    1cc4:	cf 93       	push	r28
    1cc6:	cd b7       	in	r28, 0x3d	; 61
    1cc8:	de b7       	in	r29, 0x3e	; 62
	I2C_MasterInit();
    1cca:	0e 94 b2 11 	call	0x2364	; 0x2364 <I2C_MasterInit>
}
    1cce:	cf 91       	pop	r28
    1cd0:	df 91       	pop	r29
    1cd2:	08 95       	ret

00001cd4 <Eeprom24C16_WriteByte>:

/*	addr = 0 to 2047	*/
void Eeprom24C16_WriteByte(u16 addr, u8 data)
{
    1cd4:	df 93       	push	r29
    1cd6:	cf 93       	push	r28
    1cd8:	00 d0       	rcall	.+0      	; 0x1cda <Eeprom24C16_WriteByte+0x6>
    1cda:	00 d0       	rcall	.+0      	; 0x1cdc <Eeprom24C16_WriteByte+0x8>
    1cdc:	0f 92       	push	r0
    1cde:	cd b7       	in	r28, 0x3d	; 61
    1ce0:	de b7       	in	r29, 0x3e	; 62
    1ce2:	9c 83       	std	Y+4, r25	; 0x04
    1ce4:	8b 83       	std	Y+3, r24	; 0x03
    1ce6:	6d 83       	std	Y+5, r22	; 0x05
	u8 loc_pageNo = (addr/256);
    1ce8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cea:	9c 81       	ldd	r25, Y+4	; 0x04
    1cec:	89 2f       	mov	r24, r25
    1cee:	99 27       	eor	r25, r25
    1cf0:	8a 83       	std	Y+2, r24	; 0x02
	u8 loc_byteNo = (addr%256);
    1cf2:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf4:	89 83       	std	Y+1, r24	; 0x01
	Lcd_Goto_Row_Column(0, 0);
    1cf6:	80 e0       	ldi	r24, 0x00	; 0
    1cf8:	60 e0       	ldi	r22, 0x00	; 0
    1cfa:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <Lcd_Goto_Row_Column>
	Lcd_DisplayNum(loc_pageNo);
    1cfe:	8a 81       	ldd	r24, Y+2	; 0x02
    1d00:	88 2f       	mov	r24, r24
    1d02:	90 e0       	ldi	r25, 0x00	; 0
    1d04:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <Lcd_DisplayNum>
	Lcd_Goto_Row_Column(0, 8);
    1d08:	80 e0       	ldi	r24, 0x00	; 0
    1d0a:	68 e0       	ldi	r22, 0x08	; 8
    1d0c:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <Lcd_Goto_Row_Column>
	Lcd_DisplayNum(loc_byteNo);
    1d10:	89 81       	ldd	r24, Y+1	; 0x01
    1d12:	88 2f       	mov	r24, r24
    1d14:	90 e0       	ldi	r25, 0x00	; 0
    1d16:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <Lcd_DisplayNum>
	I2C_StartCondition();
    1d1a:	0e 94 f3 11 	call	0x23e6	; 0x23e6 <I2C_StartCondition>
	Lcd_Goto_Row_Column(1, 0);
    1d1e:	81 e0       	ldi	r24, 0x01	; 1
    1d20:	60 e0       	ldi	r22, 0x00	; 0
    1d22:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <Lcd_Goto_Row_Column>
	Lcd_DisplayStr("Start");
    1d26:	80 e6       	ldi	r24, 0x60	; 96
    1d28:	90 e0       	ldi	r25, 0x00	; 0
    1d2a:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <Lcd_DisplayStr>
	I2C_Send_SlaveAddressWriteOperation(0x50 | ( ( addr & 0x0700 ) >> 8 ));
    1d2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d30:	9c 81       	ldd	r25, Y+4	; 0x04
    1d32:	80 70       	andi	r24, 0x00	; 0
    1d34:	97 70       	andi	r25, 0x07	; 7
    1d36:	89 2f       	mov	r24, r25
    1d38:	99 27       	eor	r25, r25
    1d3a:	80 65       	ori	r24, 0x50	; 80
    1d3c:	0e 94 59 12 	call	0x24b2	; 0x24b2 <I2C_Send_SlaveAddressWriteOperation>
	Lcd_Goto_Row_Column(1, 0);
    1d40:	81 e0       	ldi	r24, 0x01	; 1
    1d42:	60 e0       	ldi	r22, 0x00	; 0
    1d44:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <Lcd_Goto_Row_Column>
	Lcd_DisplayStr("SLA+W+A");
    1d48:	86 e6       	ldi	r24, 0x66	; 102
    1d4a:	90 e0       	ldi	r25, 0x00	; 0
    1d4c:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <Lcd_DisplayStr>
	I2C_WriteByte(loc_byteNo);
    1d50:	89 81       	ldd	r24, Y+1	; 0x01
    1d52:	0e 94 3f 12 	call	0x247e	; 0x247e <I2C_WriteByte>
	Lcd_Goto_Row_Column(1, 0);
    1d56:	81 e0       	ldi	r24, 0x01	; 1
    1d58:	60 e0       	ldi	r22, 0x00	; 0
    1d5a:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <Lcd_Goto_Row_Column>
	Lcd_DisplayStr("Write Add");
    1d5e:	8e e6       	ldi	r24, 0x6E	; 110
    1d60:	90 e0       	ldi	r25, 0x00	; 0
    1d62:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <Lcd_DisplayStr>
	I2C_WriteByte(data);
    1d66:	8d 81       	ldd	r24, Y+5	; 0x05
    1d68:	0e 94 3f 12 	call	0x247e	; 0x247e <I2C_WriteByte>
	Lcd_Goto_Row_Column(1, 0);
    1d6c:	81 e0       	ldi	r24, 0x01	; 1
    1d6e:	60 e0       	ldi	r22, 0x00	; 0
    1d70:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <Lcd_Goto_Row_Column>
	Lcd_DisplayStr("Write Data");
    1d74:	88 e7       	ldi	r24, 0x78	; 120
    1d76:	90 e0       	ldi	r25, 0x00	; 0
    1d78:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <Lcd_DisplayStr>
	I2C_StopCondition();
    1d7c:	0e 94 2c 12 	call	0x2458	; 0x2458 <I2C_StopCondition>
}
    1d80:	0f 90       	pop	r0
    1d82:	0f 90       	pop	r0
    1d84:	0f 90       	pop	r0
    1d86:	0f 90       	pop	r0
    1d88:	0f 90       	pop	r0
    1d8a:	cf 91       	pop	r28
    1d8c:	df 91       	pop	r29
    1d8e:	08 95       	ret

00001d90 <Eeprom24C16_ReadByte>:

/*	addr = 0 to 2047	*/
u8 Eeprom24C16_ReadByte(u16 addr)
{
    1d90:	df 93       	push	r29
    1d92:	cf 93       	push	r28
    1d94:	00 d0       	rcall	.+0      	; 0x1d96 <Eeprom24C16_ReadByte+0x6>
    1d96:	00 d0       	rcall	.+0      	; 0x1d98 <Eeprom24C16_ReadByte+0x8>
    1d98:	0f 92       	push	r0
    1d9a:	cd b7       	in	r28, 0x3d	; 61
    1d9c:	de b7       	in	r29, 0x3e	; 62
    1d9e:	9d 83       	std	Y+5, r25	; 0x05
    1da0:	8c 83       	std	Y+4, r24	; 0x04
	u8 loc_pageNo = (addr/256);
    1da2:	8c 81       	ldd	r24, Y+4	; 0x04
    1da4:	9d 81       	ldd	r25, Y+5	; 0x05
    1da6:	89 2f       	mov	r24, r25
    1da8:	99 27       	eor	r25, r25
    1daa:	8b 83       	std	Y+3, r24	; 0x03
	u8 loc_byteNo = (addr%256);
    1dac:	8c 81       	ldd	r24, Y+4	; 0x04
    1dae:	8a 83       	std	Y+2, r24	; 0x02
	u8 loc_dataRead=0;
    1db0:	19 82       	std	Y+1, r1	; 0x01
	I2C_StartCondition();
    1db2:	0e 94 f3 11 	call	0x23e6	; 0x23e6 <I2C_StartCondition>
	I2C_Send_SlaveAddressWriteOperation(0x50 | ( ( addr & 0x0700 ) >> 8 ) );
    1db6:	8c 81       	ldd	r24, Y+4	; 0x04
    1db8:	9d 81       	ldd	r25, Y+5	; 0x05
    1dba:	80 70       	andi	r24, 0x00	; 0
    1dbc:	97 70       	andi	r25, 0x07	; 7
    1dbe:	89 2f       	mov	r24, r25
    1dc0:	99 27       	eor	r25, r25
    1dc2:	80 65       	ori	r24, 0x50	; 80
    1dc4:	0e 94 59 12 	call	0x24b2	; 0x24b2 <I2C_Send_SlaveAddressWriteOperation>
	I2C_WriteByte(loc_byteNo);
    1dc8:	8a 81       	ldd	r24, Y+2	; 0x02
    1dca:	0e 94 3f 12 	call	0x247e	; 0x247e <I2C_WriteByte>
	I2C_RepeatedStartCondition();
    1dce:	0e 94 0e 12 	call	0x241c	; 0x241c <I2C_RepeatedStartCondition>
	I2C_Send_SlaveAddressReadOperation(0x50 | ( ( addr & 0x0700 ) >> 8 ));
    1dd2:	8c 81       	ldd	r24, Y+4	; 0x04
    1dd4:	9d 81       	ldd	r25, Y+5	; 0x05
    1dd6:	80 70       	andi	r24, 0x00	; 0
    1dd8:	97 70       	andi	r25, 0x07	; 7
    1dda:	89 2f       	mov	r24, r25
    1ddc:	99 27       	eor	r25, r25
    1dde:	80 65       	ori	r24, 0x50	; 80
    1de0:	0e 94 76 12 	call	0x24ec	; 0x24ec <I2C_Send_SlaveAddressReadOperation>
	loc_dataRead = I2C_ReadByte();
    1de4:	0e 94 97 12 	call	0x252e	; 0x252e <I2C_ReadByte>
    1de8:	89 83       	std	Y+1, r24	; 0x01
	I2C_StopCondition();
    1dea:	0e 94 2c 12 	call	0x2458	; 0x2458 <I2C_StopCondition>
	return loc_dataRead;
    1dee:	89 81       	ldd	r24, Y+1	; 0x01
}
    1df0:	0f 90       	pop	r0
    1df2:	0f 90       	pop	r0
    1df4:	0f 90       	pop	r0
    1df6:	0f 90       	pop	r0
    1df8:	0f 90       	pop	r0
    1dfa:	cf 91       	pop	r28
    1dfc:	df 91       	pop	r29
    1dfe:	08 95       	ret

00001e00 <Buzzer_Init>:
 *      Author: Eng_Fawzi
 */
#include "Buzzer.h"

void Buzzer_Init()
{
    1e00:	df 93       	push	r29
    1e02:	cf 93       	push	r28
    1e04:	cd b7       	in	r28, 0x3d	; 61
    1e06:	de b7       	in	r29, 0x3e	; 62
	Dio_ConfigChannel(BUZZER_PORT,BUZZER_PIN,OUTPUT);
    1e08:	80 e0       	ldi	r24, 0x00	; 0
    1e0a:	63 e0       	ldi	r22, 0x03	; 3
    1e0c:	41 e0       	ldi	r20, 0x01	; 1
    1e0e:	0e 94 f5 13 	call	0x27ea	; 0x27ea <Dio_ConfigChannel>
}
    1e12:	cf 91       	pop	r28
    1e14:	df 91       	pop	r29
    1e16:	08 95       	ret

00001e18 <Buzzer_ON>:

void Buzzer_ON()
{
    1e18:	df 93       	push	r29
    1e1a:	cf 93       	push	r28
    1e1c:	cd b7       	in	r28, 0x3d	; 61
    1e1e:	de b7       	in	r29, 0x3e	; 62
	Dio_WriteChannel(BUZZER_PORT,BUZZER_PIN,STD_HIGH);
    1e20:	80 e0       	ldi	r24, 0x00	; 0
    1e22:	63 e0       	ldi	r22, 0x03	; 3
    1e24:	41 e0       	ldi	r20, 0x01	; 1
    1e26:	0e 94 d8 14 	call	0x29b0	; 0x29b0 <Dio_WriteChannel>
}
    1e2a:	cf 91       	pop	r28
    1e2c:	df 91       	pop	r29
    1e2e:	08 95       	ret

00001e30 <Buzzer_OFF>:

void Buzzer_OFF()
{
    1e30:	df 93       	push	r29
    1e32:	cf 93       	push	r28
    1e34:	cd b7       	in	r28, 0x3d	; 61
    1e36:	de b7       	in	r29, 0x3e	; 62
	Dio_WriteChannel(BUZZER_PORT,BUZZER_PIN,STD_LOW);
    1e38:	80 e0       	ldi	r24, 0x00	; 0
    1e3a:	63 e0       	ldi	r22, 0x03	; 3
    1e3c:	40 e0       	ldi	r20, 0x00	; 0
    1e3e:	0e 94 d8 14 	call	0x29b0	; 0x29b0 <Dio_WriteChannel>
}
    1e42:	cf 91       	pop	r28
    1e44:	df 91       	pop	r29
    1e46:	08 95       	ret

00001e48 <Buzzer_Toggle>:

void Buzzer_Toggle()
{
    1e48:	df 93       	push	r29
    1e4a:	cf 93       	push	r28
    1e4c:	cd b7       	in	r28, 0x3d	; 61
    1e4e:	de b7       	in	r29, 0x3e	; 62
	Dio_TogglChannel(BUZZER_PORT,BUZZER_PIN);
    1e50:	80 e0       	ldi	r24, 0x00	; 0
    1e52:	63 e0       	ldi	r22, 0x03	; 3
    1e54:	0e 94 2b 16 	call	0x2c56	; 0x2c56 <Dio_TogglChannel>
}
    1e58:	cf 91       	pop	r28
    1e5a:	df 91       	pop	r29
    1e5c:	08 95       	ret

00001e5e <Button_Init>:
 *      Author: Eng_Fawzi
 */
#include "Button.h"

void Button_Init(void)
{
    1e5e:	df 93       	push	r29
    1e60:	cf 93       	push	r28
    1e62:	cd b7       	in	r28, 0x3d	; 61
    1e64:	de b7       	in	r29, 0x3e	; 62
	Dio_ConfigChannel(BUTTON0_PORT,BUTTON0_PIN,INPUT);
    1e66:	81 e0       	ldi	r24, 0x01	; 1
    1e68:	60 e0       	ldi	r22, 0x00	; 0
    1e6a:	40 e0       	ldi	r20, 0x00	; 0
    1e6c:	0e 94 f5 13 	call	0x27ea	; 0x27ea <Dio_ConfigChannel>
	Dio_ConfigChannel(BUTTON1_PORT,BUTTON1_PIN,INPUT);
    1e70:	81 e0       	ldi	r24, 0x01	; 1
    1e72:	64 e0       	ldi	r22, 0x04	; 4
    1e74:	40 e0       	ldi	r20, 0x00	; 0
    1e76:	0e 94 f5 13 	call	0x27ea	; 0x27ea <Dio_ConfigChannel>
	Dio_ConfigChannel(BUTTON2_PORT,BUTTON2_PIN,INPUT);
    1e7a:	83 e0       	ldi	r24, 0x03	; 3
    1e7c:	62 e0       	ldi	r22, 0x02	; 2
    1e7e:	40 e0       	ldi	r20, 0x00	; 0
    1e80:	0e 94 f5 13 	call	0x27ea	; 0x27ea <Dio_ConfigChannel>
}
    1e84:	cf 91       	pop	r28
    1e86:	df 91       	pop	r29
    1e88:	08 95       	ret

00001e8a <Button_GetStatus>:
button_type Button_GetStatus(buttonID_type button)
{
    1e8a:	df 93       	push	r29
    1e8c:	cf 93       	push	r28
    1e8e:	00 d0       	rcall	.+0      	; 0x1e90 <Button_GetStatus+0x6>
    1e90:	00 d0       	rcall	.+0      	; 0x1e92 <Button_GetStatus+0x8>
    1e92:	cd b7       	in	r28, 0x3d	; 61
    1e94:	de b7       	in	r29, 0x3e	; 62
    1e96:	8a 83       	std	Y+2, r24	; 0x02
	button_type status = RELEASED;
    1e98:	19 82       	std	Y+1, r1	; 0x01
	switch (button)
    1e9a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e9c:	28 2f       	mov	r18, r24
    1e9e:	30 e0       	ldi	r19, 0x00	; 0
    1ea0:	3c 83       	std	Y+4, r19	; 0x04
    1ea2:	2b 83       	std	Y+3, r18	; 0x03
    1ea4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ea6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ea8:	81 30       	cpi	r24, 0x01	; 1
    1eaa:	91 05       	cpc	r25, r1
    1eac:	a1 f0       	breq	.+40     	; 0x1ed6 <Button_GetStatus+0x4c>
    1eae:	2b 81       	ldd	r18, Y+3	; 0x03
    1eb0:	3c 81       	ldd	r19, Y+4	; 0x04
    1eb2:	22 30       	cpi	r18, 0x02	; 2
    1eb4:	31 05       	cpc	r19, r1
    1eb6:	d1 f0       	breq	.+52     	; 0x1eec <Button_GetStatus+0x62>
    1eb8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eba:	9c 81       	ldd	r25, Y+4	; 0x04
    1ebc:	00 97       	sbiw	r24, 0x00	; 0
    1ebe:	01 f5       	brne	.+64     	; 0x1f00 <Button_GetStatus+0x76>
	{
	case BUTTON0:
		if (Dio_ReadChannel(BUTTON0_PORT,BUTTON0_PIN) == STD_HIGH)
    1ec0:	81 e0       	ldi	r24, 0x01	; 1
    1ec2:	60 e0       	ldi	r22, 0x00	; 0
    1ec4:	0e 94 a8 16 	call	0x2d50	; 0x2d50 <Dio_ReadChannel>
    1ec8:	81 30       	cpi	r24, 0x01	; 1
    1eca:	19 f4       	brne	.+6      	; 0x1ed2 <Button_GetStatus+0x48>
		{
			status = PRESSED;
    1ecc:	81 e0       	ldi	r24, 0x01	; 1
    1ece:	89 83       	std	Y+1, r24	; 0x01
    1ed0:	17 c0       	rjmp	.+46     	; 0x1f00 <Button_GetStatus+0x76>
		}
		else
		{
			status = RELEASED;
    1ed2:	19 82       	std	Y+1, r1	; 0x01
    1ed4:	15 c0       	rjmp	.+42     	; 0x1f00 <Button_GetStatus+0x76>
		}
		break;

	case BUTTON1:
		if (Dio_ReadChannel(BUTTON1_PORT,BUTTON1_PIN) == STD_HIGH)
    1ed6:	81 e0       	ldi	r24, 0x01	; 1
    1ed8:	64 e0       	ldi	r22, 0x04	; 4
    1eda:	0e 94 a8 16 	call	0x2d50	; 0x2d50 <Dio_ReadChannel>
    1ede:	81 30       	cpi	r24, 0x01	; 1
    1ee0:	19 f4       	brne	.+6      	; 0x1ee8 <Button_GetStatus+0x5e>
		{
			status = PRESSED;
    1ee2:	81 e0       	ldi	r24, 0x01	; 1
    1ee4:	89 83       	std	Y+1, r24	; 0x01
    1ee6:	0c c0       	rjmp	.+24     	; 0x1f00 <Button_GetStatus+0x76>
		}
		else
		{
			status = RELEASED;
    1ee8:	19 82       	std	Y+1, r1	; 0x01
    1eea:	0a c0       	rjmp	.+20     	; 0x1f00 <Button_GetStatus+0x76>
		}
		break;

	case BUTTON2:
		if (Dio_ReadChannel(BUTTON2_PORT,BUTTON2_PIN) == STD_HIGH)
    1eec:	83 e0       	ldi	r24, 0x03	; 3
    1eee:	62 e0       	ldi	r22, 0x02	; 2
    1ef0:	0e 94 a8 16 	call	0x2d50	; 0x2d50 <Dio_ReadChannel>
    1ef4:	81 30       	cpi	r24, 0x01	; 1
    1ef6:	19 f4       	brne	.+6      	; 0x1efe <Button_GetStatus+0x74>
		{
			status = PRESSED;
    1ef8:	81 e0       	ldi	r24, 0x01	; 1
    1efa:	89 83       	std	Y+1, r24	; 0x01
    1efc:	01 c0       	rjmp	.+2      	; 0x1f00 <Button_GetStatus+0x76>
		}
		else
		{
			status = RELEASED;
    1efe:	19 82       	std	Y+1, r1	; 0x01
		}
		break;
	}
	return status;
    1f00:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f02:	0f 90       	pop	r0
    1f04:	0f 90       	pop	r0
    1f06:	0f 90       	pop	r0
    1f08:	0f 90       	pop	r0
    1f0a:	cf 91       	pop	r28
    1f0c:	df 91       	pop	r29
    1f0e:	08 95       	ret

00001f10 <WDG_ON>:
 *  Description	:
 *
 *****************************************/
#include <Wdg.h>
void WDG_ON(void)
{
    1f10:	df 93       	push	r29
    1f12:	cf 93       	push	r28
    1f14:	cd b7       	in	r28, 0x3d	; 61
    1f16:	de b7       	in	r29, 0x3e	; 62
	/*	Set Watchdog Timer Window to 2.1 Sec	*/
	WDG_WDTCR_REG |= WDG_WINDOW_5V_2POINT1_SEC;
    1f18:	a1 e4       	ldi	r26, 0x41	; 65
    1f1a:	b0 e0       	ldi	r27, 0x00	; 0
    1f1c:	e1 e4       	ldi	r30, 0x41	; 65
    1f1e:	f0 e0       	ldi	r31, 0x00	; 0
    1f20:	80 81       	ld	r24, Z
    1f22:	87 60       	ori	r24, 0x07	; 7
    1f24:	8c 93       	st	X, r24
	/*	Enable Watchdog Timer	*/
	SET_BIT(WDG_WDTCR_REG,WDG_ENABLE_BIT);
    1f26:	a1 e4       	ldi	r26, 0x41	; 65
    1f28:	b0 e0       	ldi	r27, 0x00	; 0
    1f2a:	e1 e4       	ldi	r30, 0x41	; 65
    1f2c:	f0 e0       	ldi	r31, 0x00	; 0
    1f2e:	80 81       	ld	r24, Z
    1f30:	88 60       	ori	r24, 0x08	; 8
    1f32:	8c 93       	st	X, r24
}
    1f34:	cf 91       	pop	r28
    1f36:	df 91       	pop	r29
    1f38:	08 95       	ret

00001f3a <WDG_OFF>:
void WDG_OFF(void)
{
    1f3a:	df 93       	push	r29
    1f3c:	cf 93       	push	r28
    1f3e:	cd b7       	in	r28, 0x3d	; 61
    1f40:	de b7       	in	r29, 0x3e	; 62
	WDG_WDTCR_REG =(WDG_ENABLE)|(WDG_TURN_OFF_ENABLE);
    1f42:	e1 e4       	ldi	r30, 0x41	; 65
    1f44:	f0 e0       	ldi	r31, 0x00	; 0
    1f46:	88 e1       	ldi	r24, 0x18	; 24
    1f48:	80 83       	st	Z, r24
	CLR_BIT(WDG_WDTCR_REG,WDG_ENABLE_BIT);
    1f4a:	a1 e4       	ldi	r26, 0x41	; 65
    1f4c:	b0 e0       	ldi	r27, 0x00	; 0
    1f4e:	e1 e4       	ldi	r30, 0x41	; 65
    1f50:	f0 e0       	ldi	r31, 0x00	; 0
    1f52:	80 81       	ld	r24, Z
    1f54:	87 7f       	andi	r24, 0xF7	; 247
    1f56:	8c 93       	st	X, r24
}
    1f58:	cf 91       	pop	r28
    1f5a:	df 91       	pop	r29
    1f5c:	08 95       	ret

00001f5e <WDG_Refresh>:
void WDG_Refresh(void)
{
    1f5e:	df 93       	push	r29
    1f60:	cf 93       	push	r28
    1f62:	cd b7       	in	r28, 0x3d	; 61
    1f64:	de b7       	in	r29, 0x3e	; 62
	asm("WDR");
    1f66:	a8 95       	wdr
}
    1f68:	cf 91       	pop	r28
    1f6a:	df 91       	pop	r29
    1f6c:	08 95       	ret

00001f6e <UART_Init>:
volatile u8 uartResult = 0;
volatile u8 UART_RxBuffer[RX_BUFFER_SIZE];
volatile u8 UART_RxBuffer_Index = 0;
volatile boolean Rx_Buffer_Ready = FALSE;
void UART_Init(u16 baudRate)
{
    1f6e:	df 93       	push	r29
    1f70:	cf 93       	push	r28
    1f72:	00 d0       	rcall	.+0      	; 0x1f74 <UART_Init+0x6>
    1f74:	cd b7       	in	r28, 0x3d	; 61
    1f76:	de b7       	in	r29, 0x3e	; 62
    1f78:	9a 83       	std	Y+2, r25	; 0x02
    1f7a:	89 83       	std	Y+1, r24	; 0x01
	/* Set baud rate */
	UART_UBRRH_REG = (u8)(baudRate>>8);
    1f7c:	e0 e4       	ldi	r30, 0x40	; 64
    1f7e:	f0 e0       	ldi	r31, 0x00	; 0
    1f80:	89 81       	ldd	r24, Y+1	; 0x01
    1f82:	9a 81       	ldd	r25, Y+2	; 0x02
    1f84:	89 2f       	mov	r24, r25
    1f86:	99 27       	eor	r25, r25
    1f88:	80 83       	st	Z, r24
	UART_UBRRL_REG = (u8)baudRate;
    1f8a:	e9 e2       	ldi	r30, 0x29	; 41
    1f8c:	f0 e0       	ldi	r31, 0x00	; 0
    1f8e:	89 81       	ldd	r24, Y+1	; 0x01
    1f90:	80 83       	st	Z, r24
	/* Enable receiver and transmitter */
	SET_BIT(UART_UCSRB_REG,RXEN_BIT_NO);  /* Enable Receiver*/
    1f92:	aa e2       	ldi	r26, 0x2A	; 42
    1f94:	b0 e0       	ldi	r27, 0x00	; 0
    1f96:	ea e2       	ldi	r30, 0x2A	; 42
    1f98:	f0 e0       	ldi	r31, 0x00	; 0
    1f9a:	80 81       	ld	r24, Z
    1f9c:	80 61       	ori	r24, 0x10	; 16
    1f9e:	8c 93       	st	X, r24
	SET_BIT(UART_UCSRB_REG,TXEN_BIT_NO);  /* Enable Transmitter */
    1fa0:	aa e2       	ldi	r26, 0x2A	; 42
    1fa2:	b0 e0       	ldi	r27, 0x00	; 0
    1fa4:	ea e2       	ldi	r30, 0x2A	; 42
    1fa6:	f0 e0       	ldi	r31, 0x00	; 0
    1fa8:	80 81       	ld	r24, Z
    1faa:	88 60       	ori	r24, 0x08	; 8
    1fac:	8c 93       	st	X, r24
	/* Set frame format: 8data, 1stop bit, Even Parity */
	UART_UCSRC_REG |= (1 << URSEL_BIT_NO)|UART_8_BIT_DATA | UART_EVEN_PARITY;
    1fae:	a0 e4       	ldi	r26, 0x40	; 64
    1fb0:	b0 e0       	ldi	r27, 0x00	; 0
    1fb2:	e0 e4       	ldi	r30, 0x40	; 64
    1fb4:	f0 e0       	ldi	r31, 0x00	; 0
    1fb6:	80 81       	ld	r24, Z
    1fb8:	86 6a       	ori	r24, 0xA6	; 166
    1fba:	8c 93       	st	X, r24
	SET_BIT(UART_UCSRB_REG,7); /*	Enable Rx Complete Interrupt	*/
    1fbc:	aa e2       	ldi	r26, 0x2A	; 42
    1fbe:	b0 e0       	ldi	r27, 0x00	; 0
    1fc0:	ea e2       	ldi	r30, 0x2A	; 42
    1fc2:	f0 e0       	ldi	r31, 0x00	; 0
    1fc4:	80 81       	ld	r24, Z
    1fc6:	80 68       	ori	r24, 0x80	; 128
    1fc8:	8c 93       	st	X, r24
}
    1fca:	0f 90       	pop	r0
    1fcc:	0f 90       	pop	r0
    1fce:	cf 91       	pop	r28
    1fd0:	df 91       	pop	r29
    1fd2:	08 95       	ret

00001fd4 <UART_TransmitChr>:

void UART_TransmitChr(u8 data)
{
    1fd4:	df 93       	push	r29
    1fd6:	cf 93       	push	r28
    1fd8:	0f 92       	push	r0
    1fda:	cd b7       	in	r28, 0x3d	; 61
    1fdc:	de b7       	in	r29, 0x3e	; 62
    1fde:	89 83       	std	Y+1, r24	; 0x01
	/* Wait for empty transmit buffer */
	while (!(CHK_BIT(UART_UCSRA_REG,UDRE_BIT_NO)))
    1fe0:	eb e2       	ldi	r30, 0x2B	; 43
    1fe2:	f0 e0       	ldi	r31, 0x00	; 0
    1fe4:	80 81       	ld	r24, Z
    1fe6:	82 95       	swap	r24
    1fe8:	86 95       	lsr	r24
    1fea:	87 70       	andi	r24, 0x07	; 7
    1fec:	88 2f       	mov	r24, r24
    1fee:	90 e0       	ldi	r25, 0x00	; 0
    1ff0:	81 70       	andi	r24, 0x01	; 1
    1ff2:	90 70       	andi	r25, 0x00	; 0
    1ff4:	00 97       	sbiw	r24, 0x00	; 0
    1ff6:	a1 f3       	breq	.-24     	; 0x1fe0 <UART_TransmitChr+0xc>
			;
	/* Put data into buffer, sends the data */
	UART_UDR_REG = data;
    1ff8:	ec e2       	ldi	r30, 0x2C	; 44
    1ffa:	f0 e0       	ldi	r31, 0x00	; 0
    1ffc:	89 81       	ldd	r24, Y+1	; 0x01
    1ffe:	80 83       	st	Z, r24
}
    2000:	0f 90       	pop	r0
    2002:	cf 91       	pop	r28
    2004:	df 91       	pop	r29
    2006:	08 95       	ret

00002008 <UART_TransmitStr>:

void UART_TransmitStr(u8 *str)
{
    2008:	df 93       	push	r29
    200a:	cf 93       	push	r28
    200c:	00 d0       	rcall	.+0      	; 0x200e <UART_TransmitStr+0x6>
    200e:	cd b7       	in	r28, 0x3d	; 61
    2010:	de b7       	in	r29, 0x3e	; 62
    2012:	9a 83       	std	Y+2, r25	; 0x02
    2014:	89 83       	std	Y+1, r24	; 0x01
    2016:	0a c0       	rjmp	.+20     	; 0x202c <UART_TransmitStr+0x24>
	/* Wait for empty transmit buffer */
	while (*str != '\0')
	{
		UART_TransmitChr(*str);
    2018:	e9 81       	ldd	r30, Y+1	; 0x01
    201a:	fa 81       	ldd	r31, Y+2	; 0x02
    201c:	80 81       	ld	r24, Z
    201e:	0e 94 ea 0f 	call	0x1fd4	; 0x1fd4 <UART_TransmitChr>
		str++;
    2022:	89 81       	ldd	r24, Y+1	; 0x01
    2024:	9a 81       	ldd	r25, Y+2	; 0x02
    2026:	01 96       	adiw	r24, 0x01	; 1
    2028:	9a 83       	std	Y+2, r25	; 0x02
    202a:	89 83       	std	Y+1, r24	; 0x01
}

void UART_TransmitStr(u8 *str)
{
	/* Wait for empty transmit buffer */
	while (*str != '\0')
    202c:	e9 81       	ldd	r30, Y+1	; 0x01
    202e:	fa 81       	ldd	r31, Y+2	; 0x02
    2030:	80 81       	ld	r24, Z
    2032:	88 23       	and	r24, r24
    2034:	89 f7       	brne	.-30     	; 0x2018 <UART_TransmitStr+0x10>
	{
		UART_TransmitChr(*str);
		str++;
	}
}
    2036:	0f 90       	pop	r0
    2038:	0f 90       	pop	r0
    203a:	cf 91       	pop	r28
    203c:	df 91       	pop	r29
    203e:	08 95       	ret

00002040 <UART_ReceiveChr>:
//	/* Get and return received data from buffer */
//	return UART_UDR_REG;
//}

u8 UART_ReceiveChr(void)
{
    2040:	df 93       	push	r29
    2042:	cf 93       	push	r28
    2044:	0f 92       	push	r0
    2046:	cd b7       	in	r28, 0x3d	; 61
    2048:	de b7       	in	r29, 0x3e	; 62
	/* Wait for data to be received */
	if ((CHK_BIT(UART_UCSRA_REG,RXC_BIT_NO)))
    204a:	eb e2       	ldi	r30, 0x2B	; 43
    204c:	f0 e0       	ldi	r31, 0x00	; 0
    204e:	80 81       	ld	r24, Z
    2050:	88 23       	and	r24, r24
    2052:	2c f4       	brge	.+10     	; 0x205e <UART_ReceiveChr+0x1e>
	{
		return UART_UDR_REG;
    2054:	ec e2       	ldi	r30, 0x2C	; 44
    2056:	f0 e0       	ldi	r31, 0x00	; 0
    2058:	80 81       	ld	r24, Z
    205a:	89 83       	std	Y+1, r24	; 0x01
    205c:	01 c0       	rjmp	.+2      	; 0x2060 <UART_ReceiveChr+0x20>
	}
	else
	{
		return 0;
    205e:	19 82       	std	Y+1, r1	; 0x01
    2060:	89 81       	ldd	r24, Y+1	; 0x01
	}
	/* Get and return received data from buffer */

}
    2062:	0f 90       	pop	r0
    2064:	cf 91       	pop	r28
    2066:	df 91       	pop	r29
    2068:	08 95       	ret

0000206a <__vector_13>:
ISR(USART_RXC_vect)
{
    206a:	1f 92       	push	r1
    206c:	0f 92       	push	r0
    206e:	0f b6       	in	r0, 0x3f	; 63
    2070:	0f 92       	push	r0
    2072:	11 24       	eor	r1, r1
    2074:	2f 93       	push	r18
    2076:	3f 93       	push	r19
    2078:	4f 93       	push	r20
    207a:	5f 93       	push	r21
    207c:	6f 93       	push	r22
    207e:	7f 93       	push	r23
    2080:	8f 93       	push	r24
    2082:	9f 93       	push	r25
    2084:	af 93       	push	r26
    2086:	bf 93       	push	r27
    2088:	ef 93       	push	r30
    208a:	ff 93       	push	r31
    208c:	df 93       	push	r29
    208e:	cf 93       	push	r28
    2090:	cd b7       	in	r28, 0x3d	; 61
    2092:	de b7       	in	r29, 0x3e	; 62
	UART_RxBuffer[UART_RxBuffer_Index] = UART_UDR_REG;
    2094:	80 91 d5 01 	lds	r24, 0x01D5
    2098:	88 2f       	mov	r24, r24
    209a:	90 e0       	ldi	r25, 0x00	; 0
    209c:	ec e2       	ldi	r30, 0x2C	; 44
    209e:	f0 e0       	ldi	r31, 0x00	; 0
    20a0:	20 81       	ld	r18, Z
    20a2:	fc 01       	movw	r30, r24
    20a4:	e9 52       	subi	r30, 0x29	; 41
    20a6:	fe 4f       	sbci	r31, 0xFE	; 254
    20a8:	20 83       	st	Z, r18
	if (UART_RxBuffer[UART_RxBuffer_Index] == '\r')
    20aa:	80 91 d5 01 	lds	r24, 0x01D5
    20ae:	88 2f       	mov	r24, r24
    20b0:	90 e0       	ldi	r25, 0x00	; 0
    20b2:	fc 01       	movw	r30, r24
    20b4:	e9 52       	subi	r30, 0x29	; 41
    20b6:	fe 4f       	sbci	r31, 0xFE	; 254
    20b8:	80 81       	ld	r24, Z
    20ba:	8d 30       	cpi	r24, 0x0D	; 13
    20bc:	49 f4       	brne	.+18     	; 0x20d0 <__vector_13+0x66>
	{
		UART_RxBuffer_Index = 0;
    20be:	10 92 d5 01 	sts	0x01D5, r1
		Rx_Buffer_Ready = TRUE;
    20c2:	81 e0       	ldi	r24, 0x01	; 1
    20c4:	80 93 d6 01 	sts	0x01D6, r24
		LED_TOGGLE(LED1);
    20c8:	81 e0       	ldi	r24, 0x01	; 1
    20ca:	0e 94 65 09 	call	0x12ca	; 0x12ca <LED_TOGGLE>
    20ce:	08 c0       	rjmp	.+16     	; 0x20e0 <__vector_13+0x76>
	}
	else
	{
		UART_RxBuffer_Index++;
    20d0:	80 91 d5 01 	lds	r24, 0x01D5
    20d4:	8f 5f       	subi	r24, 0xFF	; 255
    20d6:	80 93 d5 01 	sts	0x01D5, r24
		LED_TOGGLE(LED0);
    20da:	80 e0       	ldi	r24, 0x00	; 0
    20dc:	0e 94 65 09 	call	0x12ca	; 0x12ca <LED_TOGGLE>
	}
}
    20e0:	cf 91       	pop	r28
    20e2:	df 91       	pop	r29
    20e4:	ff 91       	pop	r31
    20e6:	ef 91       	pop	r30
    20e8:	bf 91       	pop	r27
    20ea:	af 91       	pop	r26
    20ec:	9f 91       	pop	r25
    20ee:	8f 91       	pop	r24
    20f0:	7f 91       	pop	r23
    20f2:	6f 91       	pop	r22
    20f4:	5f 91       	pop	r21
    20f6:	4f 91       	pop	r20
    20f8:	3f 91       	pop	r19
    20fa:	2f 91       	pop	r18
    20fc:	0f 90       	pop	r0
    20fe:	0f be       	out	0x3f, r0	; 63
    2100:	0f 90       	pop	r0
    2102:	1f 90       	pop	r1
    2104:	18 95       	reti

00002106 <TIMER0_Init>:
 * Target	:  ATMEGA32
 * Author	:  Eng_Fawzi
 ********************************/
#include "Timer0.h"
void TIMER0_Init(void)
{
    2106:	df 93       	push	r29
    2108:	cf 93       	push	r28
    210a:	cd b7       	in	r28, 0x3d	; 61
    210c:	de b7       	in	r29, 0x3e	; 62
	#if (TIMER_OPERATION_MODE == TIMER0_MODE_INTERVAL)
		TIMER0_TCCR0_REG|= TIMER0_INTERVAL_MODE;
    210e:	e3 e5       	ldi	r30, 0x53	; 83
    2110:	f0 e0       	ldi	r31, 0x00	; 0
    2112:	a3 e5       	ldi	r26, 0x53	; 83
    2114:	b0 e0       	ldi	r27, 0x00	; 0
    2116:	8c 91       	ld	r24, X
    2118:	80 83       	st	Z, r24
	#elif (TIMER_OPERATION_MODE == TIMER0_MODE_PWM_PHASE_CORRECT)
		TIMER0_TCCR0_REG|= TIMER0_PWM_PHASE_CORRECT;
	#else
	#error "You Shall Define Timer Operation Mode In Timer0_Cfg.h"
	#endif
}
    211a:	cf 91       	pop	r28
    211c:	df 91       	pop	r29
    211e:	08 95       	ret

00002120 <TIMER0_Start>:
#if ((TIMER_OPERATION_MODE == TIMER0_MODE_INTERVAL) || (TIMER_OPERATION_MODE == TIMER0_MODE_CTC))
void TIMER0_Start(u8 prescaler)
{
    2120:	df 93       	push	r29
    2122:	cf 93       	push	r28
    2124:	0f 92       	push	r0
    2126:	cd b7       	in	r28, 0x3d	; 61
    2128:	de b7       	in	r29, 0x3e	; 62
    212a:	89 83       	std	Y+1, r24	; 0x01
	TIMER0_TCCR0_REG |=prescaler;
    212c:	a3 e5       	ldi	r26, 0x53	; 83
    212e:	b0 e0       	ldi	r27, 0x00	; 0
    2130:	e3 e5       	ldi	r30, 0x53	; 83
    2132:	f0 e0       	ldi	r31, 0x00	; 0
    2134:	90 81       	ld	r25, Z
    2136:	89 81       	ldd	r24, Y+1	; 0x01
    2138:	89 2b       	or	r24, r25
    213a:	8c 93       	st	X, r24
}
    213c:	0f 90       	pop	r0
    213e:	cf 91       	pop	r28
    2140:	df 91       	pop	r29
    2142:	08 95       	ret

00002144 <TIMER0_Stop>:

void TIMER0_Stop(void)
{
    2144:	df 93       	push	r29
    2146:	cf 93       	push	r28
    2148:	cd b7       	in	r28, 0x3d	; 61
    214a:	de b7       	in	r29, 0x3e	; 62
	TIMER0_TCCR0_REG &=0xFC;
    214c:	a3 e5       	ldi	r26, 0x53	; 83
    214e:	b0 e0       	ldi	r27, 0x00	; 0
    2150:	e3 e5       	ldi	r30, 0x53	; 83
    2152:	f0 e0       	ldi	r31, 0x00	; 0
    2154:	80 81       	ld	r24, Z
    2156:	8c 7f       	andi	r24, 0xFC	; 252
    2158:	8c 93       	st	X, r24
}
    215a:	cf 91       	pop	r28
    215c:	df 91       	pop	r29
    215e:	08 95       	ret

00002160 <TIMER0_SetPreload>:

void TIMER0_SetPreload(u8 preLoadValue)
{
    2160:	df 93       	push	r29
    2162:	cf 93       	push	r28
    2164:	0f 92       	push	r0
    2166:	cd b7       	in	r28, 0x3d	; 61
    2168:	de b7       	in	r29, 0x3e	; 62
    216a:	89 83       	std	Y+1, r24	; 0x01
	TIMER0_TCNT0_REG = preLoadValue;
    216c:	e2 e5       	ldi	r30, 0x52	; 82
    216e:	f0 e0       	ldi	r31, 0x00	; 0
    2170:	89 81       	ldd	r24, Y+1	; 0x01
    2172:	80 83       	st	Z, r24
}
    2174:	0f 90       	pop	r0
    2176:	cf 91       	pop	r28
    2178:	df 91       	pop	r29
    217a:	08 95       	ret

0000217c <TIMER0_GetPreload>:
u8 TIMER0_GetPreload()
{
    217c:	df 93       	push	r29
    217e:	cf 93       	push	r28
    2180:	cd b7       	in	r28, 0x3d	; 61
    2182:	de b7       	in	r29, 0x3e	; 62
	return TIMER0_TCNT0_REG;
    2184:	e2 e5       	ldi	r30, 0x52	; 82
    2186:	f0 e0       	ldi	r31, 0x00	; 0
    2188:	80 81       	ld	r24, Z
}
    218a:	cf 91       	pop	r28
    218c:	df 91       	pop	r29
    218e:	08 95       	ret

00002190 <TIMER0_EnableInterrupt>:
void TIMER0_EnableInterrupt(void)
{
    2190:	df 93       	push	r29
    2192:	cf 93       	push	r28
    2194:	cd b7       	in	r28, 0x3d	; 61
    2196:	de b7       	in	r29, 0x3e	; 62
#if (TIMER_OPERATION_MODE == TIMER0_MODE_INTERVAL)
	SET_BIT(TIMER0_TIMSK_REG,TIMER0_INTERVAL_INT_ENABLE_BIT_NO);
    2198:	a9 e5       	ldi	r26, 0x59	; 89
    219a:	b0 e0       	ldi	r27, 0x00	; 0
    219c:	e9 e5       	ldi	r30, 0x59	; 89
    219e:	f0 e0       	ldi	r31, 0x00	; 0
    21a0:	80 81       	ld	r24, Z
    21a2:	81 60       	ori	r24, 0x01	; 1
    21a4:	8c 93       	st	X, r24
#elif (TIMER_OPERATION_MODE == TIMER0_MODE_CTC)
	SET_BIT(TIMER0_TIMSK_REG,TIMER0_CTC_INT_ENABLE_BIT_NO);
#endif
}
    21a6:	cf 91       	pop	r28
    21a8:	df 91       	pop	r29
    21aa:	08 95       	ret

000021ac <TIMER0_DisableInterrupt>:
void TIMER0_DisableInterrupt(void)
{
    21ac:	df 93       	push	r29
    21ae:	cf 93       	push	r28
    21b0:	cd b7       	in	r28, 0x3d	; 61
    21b2:	de b7       	in	r29, 0x3e	; 62
#if (TIMER_OPERATION_MODE == TIMER0_MODE_INTERVAL)
	CLR_BIT(TIMER0_TIMSK_REG,TIMER0_INTERVAL_INT_ENABLE_BIT_NO);
    21b4:	a9 e5       	ldi	r26, 0x59	; 89
    21b6:	b0 e0       	ldi	r27, 0x00	; 0
    21b8:	e9 e5       	ldi	r30, 0x59	; 89
    21ba:	f0 e0       	ldi	r31, 0x00	; 0
    21bc:	80 81       	ld	r24, Z
    21be:	8e 7f       	andi	r24, 0xFE	; 254
    21c0:	8c 93       	st	X, r24
#elif (TIMER_OPERATION_MODE == TIMER0_MODE_CTC)
	CLR_BIT(TIMER0_TIMSK_REG,TIMER0_CTC_INT_ENABLE_BIT_NO);
#endif
}
    21c2:	cf 91       	pop	r28
    21c4:	df 91       	pop	r29
    21c6:	08 95       	ret

000021c8 <TIMER0_SetCompareValue>:
void TIMER0_SetCompareValue(u8 compareValue)
{
    21c8:	df 93       	push	r29
    21ca:	cf 93       	push	r28
    21cc:	0f 92       	push	r0
    21ce:	cd b7       	in	r28, 0x3d	; 61
    21d0:	de b7       	in	r29, 0x3e	; 62
    21d2:	89 83       	std	Y+1, r24	; 0x01
	TIMER0_OCR0_REG = compareValue;
    21d4:	ec e5       	ldi	r30, 0x5C	; 92
    21d6:	f0 e0       	ldi	r31, 0x00	; 0
    21d8:	89 81       	ldd	r24, Y+1	; 0x01
    21da:	80 83       	st	Z, r24
}
    21dc:	0f 90       	pop	r0
    21de:	cf 91       	pop	r28
    21e0:	df 91       	pop	r29
    21e2:	08 95       	ret

000021e4 <Spi_MasterInit>:
 *  Description	:
 *
 *************************************************/
#include "Spi.h"
void Spi_MasterInit(void)
{
    21e4:	df 93       	push	r29
    21e6:	cf 93       	push	r28
    21e8:	cd b7       	in	r28, 0x3d	; 61
    21ea:	de b7       	in	r29, 0x3e	; 62
	/*	configure SPI MOSI Pin as output	*/
	Dio_ConfigChannel(SPI_MOSI_PORT, SPI_MOSI_CHANNEL, OUTPUT);
    21ec:	81 e0       	ldi	r24, 0x01	; 1
    21ee:	65 e0       	ldi	r22, 0x05	; 5
    21f0:	41 e0       	ldi	r20, 0x01	; 1
    21f2:	0e 94 f5 13 	call	0x27ea	; 0x27ea <Dio_ConfigChannel>
	/*	configure SPI SS Pin as output	*/
	Dio_ConfigChannel(SPI_SS_PORT, SPI_SS_CHANNEL, OUTPUT);
    21f6:	81 e0       	ldi	r24, 0x01	; 1
    21f8:	64 e0       	ldi	r22, 0x04	; 4
    21fa:	41 e0       	ldi	r20, 0x01	; 1
    21fc:	0e 94 f5 13 	call	0x27ea	; 0x27ea <Dio_ConfigChannel>
	/*	configure SPI SCK Pin as output	*/
	Dio_ConfigChannel(SPI_SCK_PORT, SPI_SCK_CHANNEL, OUTPUT);
    2200:	81 e0       	ldi	r24, 0x01	; 1
    2202:	67 e0       	ldi	r22, 0x07	; 7
    2204:	41 e0       	ldi	r20, 0x01	; 1
    2206:	0e 94 f5 13 	call	0x27ea	; 0x27ea <Dio_ConfigChannel>
	/*	configure SPI MISO Pin as input	*/
	Dio_ConfigChannel(SPI_MISO_PORT, SPI_MISO_CHANNEL, INPUT);
    220a:	81 e0       	ldi	r24, 0x01	; 1
    220c:	66 e0       	ldi	r22, 0x06	; 6
    220e:	40 e0       	ldi	r20, 0x00	; 0
    2210:	0e 94 f5 13 	call	0x27ea	; 0x27ea <Dio_ConfigChannel>
	/*	initialize SPI SS pin with HIGH (No slave selected) */
	Dio_WriteChannel(SPI_SS_PORT, SPI_SS_CHANNEL, STD_HIGH);
    2214:	81 e0       	ldi	r24, 0x01	; 1
    2216:	64 e0       	ldi	r22, 0x04	; 4
    2218:	41 e0       	ldi	r20, 0x01	; 1
    221a:	0e 94 d8 14 	call	0x29b0	; 0x29b0 <Dio_WriteChannel>
	/*	enable SPI Module	*/
	SET_BIT(SPI_SPCR_REG,SPI_SPE_BIT_NO);
    221e:	ad e2       	ldi	r26, 0x2D	; 45
    2220:	b0 e0       	ldi	r27, 0x00	; 0
    2222:	ed e2       	ldi	r30, 0x2D	; 45
    2224:	f0 e0       	ldi	r31, 0x00	; 0
    2226:	80 81       	ld	r24, Z
    2228:	80 64       	ori	r24, 0x40	; 64
    222a:	8c 93       	st	X, r24
	/*	enable SPI Module in Master mode	*/
	SET_BIT(SPI_SPCR_REG,SPI_MSTR_BIT_NO);
    222c:	ad e2       	ldi	r26, 0x2D	; 45
    222e:	b0 e0       	ldi	r27, 0x00	; 0
    2230:	ed e2       	ldi	r30, 0x2D	; 45
    2232:	f0 e0       	ldi	r31, 0x00	; 0
    2234:	80 81       	ld	r24, Z
    2236:	80 61       	ori	r24, 0x10	; 16
    2238:	8c 93       	st	X, r24
	/*	set SCK frequency by F_CPU/16	*/
	/*	Set SPI Speed	*/
	SPI_SPCR_REG|=SPI_SCK_FREQ_FCPU_DIV_16;
    223a:	ad e2       	ldi	r26, 0x2D	; 45
    223c:	b0 e0       	ldi	r27, 0x00	; 0
    223e:	ed e2       	ldi	r30, 0x2D	; 45
    2240:	f0 e0       	ldi	r31, 0x00	; 0
    2242:	80 81       	ld	r24, Z
    2244:	81 60       	ori	r24, 0x01	; 1
    2246:	8c 93       	st	X, r24
}
    2248:	cf 91       	pop	r28
    224a:	df 91       	pop	r29
    224c:	08 95       	ret

0000224e <Spi_SlaveInit>:

void Spi_SlaveInit(void)
{
    224e:	df 93       	push	r29
    2250:	cf 93       	push	r28
    2252:	cd b7       	in	r28, 0x3d	; 61
    2254:	de b7       	in	r29, 0x3e	; 62
	/*	configure SPI MOSI Pin as input	*/
	Dio_ConfigChannel(SPI_MOSI_PORT, SPI_MOSI_CHANNEL, INPUT);
    2256:	81 e0       	ldi	r24, 0x01	; 1
    2258:	65 e0       	ldi	r22, 0x05	; 5
    225a:	40 e0       	ldi	r20, 0x00	; 0
    225c:	0e 94 f5 13 	call	0x27ea	; 0x27ea <Dio_ConfigChannel>
	/*	configure SPI SS Pin as input	*/
	Dio_ConfigChannel(SPI_SS_PORT, SPI_SS_CHANNEL, INPUT);
    2260:	81 e0       	ldi	r24, 0x01	; 1
    2262:	64 e0       	ldi	r22, 0x04	; 4
    2264:	40 e0       	ldi	r20, 0x00	; 0
    2266:	0e 94 f5 13 	call	0x27ea	; 0x27ea <Dio_ConfigChannel>
	/*	configure SPI SCK Pin as input	*/
	Dio_ConfigChannel(SPI_SCK_PORT, SPI_SCK_CHANNEL, INPUT);
    226a:	81 e0       	ldi	r24, 0x01	; 1
    226c:	67 e0       	ldi	r22, 0x07	; 7
    226e:	40 e0       	ldi	r20, 0x00	; 0
    2270:	0e 94 f5 13 	call	0x27ea	; 0x27ea <Dio_ConfigChannel>
	/*	configure SPI MISO Pin as output	*/
	Dio_ConfigChannel(SPI_MISO_PORT, SPI_MISO_CHANNEL, OUTPUT);
    2274:	81 e0       	ldi	r24, 0x01	; 1
    2276:	66 e0       	ldi	r22, 0x06	; 6
    2278:	41 e0       	ldi	r20, 0x01	; 1
    227a:	0e 94 f5 13 	call	0x27ea	; 0x27ea <Dio_ConfigChannel>
	/*	enable SPI Module	*/
	SET_BIT(SPI_SPCR_REG,SPI_SPE_BIT_NO);
    227e:	ad e2       	ldi	r26, 0x2D	; 45
    2280:	b0 e0       	ldi	r27, 0x00	; 0
    2282:	ed e2       	ldi	r30, 0x2D	; 45
    2284:	f0 e0       	ldi	r31, 0x00	; 0
    2286:	80 81       	ld	r24, Z
    2288:	80 64       	ori	r24, 0x40	; 64
    228a:	8c 93       	st	X, r24
	/*	enable SPI Module in Slave mode	*/
	CLR_BIT(SPI_SPCR_REG,SPI_MSTR_BIT_NO);
    228c:	ad e2       	ldi	r26, 0x2D	; 45
    228e:	b0 e0       	ldi	r27, 0x00	; 0
    2290:	ed e2       	ldi	r30, 0x2D	; 45
    2292:	f0 e0       	ldi	r31, 0x00	; 0
    2294:	80 81       	ld	r24, Z
    2296:	8f 7e       	andi	r24, 0xEF	; 239
    2298:	8c 93       	st	X, r24
}
    229a:	cf 91       	pop	r28
    229c:	df 91       	pop	r29
    229e:	08 95       	ret

000022a0 <Spi_MasterWrite>:

void Spi_MasterWrite(u8 data)
{
    22a0:	df 93       	push	r29
    22a2:	cf 93       	push	r28
    22a4:	00 d0       	rcall	.+0      	; 0x22a6 <Spi_MasterWrite+0x6>
    22a6:	cd b7       	in	r28, 0x3d	; 61
    22a8:	de b7       	in	r29, 0x3e	; 62
    22aa:	8a 83       	std	Y+2, r24	; 0x02
	u8 loc_flush_byte;
	/*	load SPI data register with a byte to send	*/
	SPI_SPDR_REG = data;
    22ac:	ef e2       	ldi	r30, 0x2F	; 47
    22ae:	f0 e0       	ldi	r31, 0x00	; 0
    22b0:	8a 81       	ldd	r24, Y+2	; 0x02
    22b2:	80 83       	st	Z, r24
	/*	wait until byte sent	*/
	while(!(CHK_BIT(SPI_SPSR_REG,SPI_SPIF_BIT_NO)))
    22b4:	ee e2       	ldi	r30, 0x2E	; 46
    22b6:	f0 e0       	ldi	r31, 0x00	; 0
    22b8:	80 81       	ld	r24, Z
    22ba:	88 23       	and	r24, r24
    22bc:	dc f7       	brge	.-10     	; 0x22b4 <Spi_MasterWrite+0x14>
	{
		;
	}
		/*	flush the data register	*/
	loc_flush_byte = SPI_SPDR_REG;
    22be:	ef e2       	ldi	r30, 0x2F	; 47
    22c0:	f0 e0       	ldi	r31, 0x00	; 0
    22c2:	80 81       	ld	r24, Z
    22c4:	89 83       	std	Y+1, r24	; 0x01
}
    22c6:	0f 90       	pop	r0
    22c8:	0f 90       	pop	r0
    22ca:	cf 91       	pop	r28
    22cc:	df 91       	pop	r29
    22ce:	08 95       	ret

000022d0 <Spi_MasterRead>:

u8 Spi_MasterRead(void)
{
    22d0:	df 93       	push	r29
    22d2:	cf 93       	push	r28
    22d4:	0f 92       	push	r0
    22d6:	cd b7       	in	r28, 0x3d	; 61
    22d8:	de b7       	in	r29, 0x3e	; 62
	u8 loc_dummy_byte=0xFF;
    22da:	8f ef       	ldi	r24, 0xFF	; 255
    22dc:	89 83       	std	Y+1, r24	; 0x01
	/*	load SPI data register with a byte to send	*/
	SPI_SPDR_REG = loc_dummy_byte;
    22de:	ef e2       	ldi	r30, 0x2F	; 47
    22e0:	f0 e0       	ldi	r31, 0x00	; 0
    22e2:	89 81       	ldd	r24, Y+1	; 0x01
    22e4:	80 83       	st	Z, r24
	/*	wait until byte received	*/
	while(!(CHK_BIT(SPI_SPSR_REG,SPI_SPIF_BIT_NO)))
    22e6:	ee e2       	ldi	r30, 0x2E	; 46
    22e8:	f0 e0       	ldi	r31, 0x00	; 0
    22ea:	80 81       	ld	r24, Z
    22ec:	88 23       	and	r24, r24
    22ee:	dc f7       	brge	.-10     	; 0x22e6 <Spi_MasterRead+0x16>
	{
		;
	}
		/*	read the data register	*/
	return SPI_SPDR_REG;
    22f0:	ef e2       	ldi	r30, 0x2F	; 47
    22f2:	f0 e0       	ldi	r31, 0x00	; 0
    22f4:	80 81       	ld	r24, Z
}
    22f6:	0f 90       	pop	r0
    22f8:	cf 91       	pop	r28
    22fa:	df 91       	pop	r29
    22fc:	08 95       	ret

000022fe <Spi_MasterTranseve>:

u8 Spi_MasterTranseve(u8 data)
{
    22fe:	df 93       	push	r29
    2300:	cf 93       	push	r28
    2302:	0f 92       	push	r0
    2304:	cd b7       	in	r28, 0x3d	; 61
    2306:	de b7       	in	r29, 0x3e	; 62
    2308:	89 83       	std	Y+1, r24	; 0x01
	/*	load SPI data register with a byte to send	*/
	SPI_SPDR_REG = data;
    230a:	ef e2       	ldi	r30, 0x2F	; 47
    230c:	f0 e0       	ldi	r31, 0x00	; 0
    230e:	89 81       	ldd	r24, Y+1	; 0x01
    2310:	80 83       	st	Z, r24
	/*	wait until byte sent	*/
	while(!(CHK_BIT(SPI_SPSR_REG,SPI_SPIF_BIT_NO)))
    2312:	ee e2       	ldi	r30, 0x2E	; 46
    2314:	f0 e0       	ldi	r31, 0x00	; 0
    2316:	80 81       	ld	r24, Z
    2318:	88 23       	and	r24, r24
    231a:	dc f7       	brge	.-10     	; 0x2312 <Spi_MasterTranseve+0x14>
	{
		;
	}
	/*	flush the data register	*/
	return SPI_SPDR_REG;
    231c:	ef e2       	ldi	r30, 0x2F	; 47
    231e:	f0 e0       	ldi	r31, 0x00	; 0
    2320:	80 81       	ld	r24, Z
}
    2322:	0f 90       	pop	r0
    2324:	cf 91       	pop	r28
    2326:	df 91       	pop	r29
    2328:	08 95       	ret

0000232a <Spi_SlaveRead>:

u8 Spi_SlaveRead(void)
{
    232a:	df 93       	push	r29
    232c:	cf 93       	push	r28
    232e:	cd b7       	in	r28, 0x3d	; 61
    2330:	de b7       	in	r29, 0x3e	; 62
	/*	wait until byte received	*/
	while(!(CHK_BIT(SPI_SPSR_REG,SPI_SPIF_BIT_NO)))
    2332:	ee e2       	ldi	r30, 0x2E	; 46
    2334:	f0 e0       	ldi	r31, 0x00	; 0
    2336:	80 81       	ld	r24, Z
    2338:	88 23       	and	r24, r24
    233a:	dc f7       	brge	.-10     	; 0x2332 <Spi_SlaveRead+0x8>
	{
		;
	}
		/*	read the data register	*/
	return SPI_SPDR_REG;
    233c:	ef e2       	ldi	r30, 0x2F	; 47
    233e:	f0 e0       	ldi	r31, 0x00	; 0
    2340:	80 81       	ld	r24, Z
}
    2342:	cf 91       	pop	r28
    2344:	df 91       	pop	r29
    2346:	08 95       	ret

00002348 <Spi_SlaveWrite>:

void Spi_SlaveWrite(u8 data)
{
    2348:	df 93       	push	r29
    234a:	cf 93       	push	r28
    234c:	0f 92       	push	r0
    234e:	cd b7       	in	r28, 0x3d	; 61
    2350:	de b7       	in	r29, 0x3e	; 62
    2352:	89 83       	std	Y+1, r24	; 0x01
	SPI_SPDR_REG = data;
    2354:	ef e2       	ldi	r30, 0x2F	; 47
    2356:	f0 e0       	ldi	r31, 0x00	; 0
    2358:	89 81       	ldd	r24, Y+1	; 0x01
    235a:	80 83       	st	Z, r24
}
    235c:	0f 90       	pop	r0
    235e:	cf 91       	pop	r28
    2360:	df 91       	pop	r29
    2362:	08 95       	ret

00002364 <I2C_MasterInit>:
 *
 ***********************************************/
#include "I2c.h"

void I2C_MasterInit(void)
{
    2364:	df 93       	push	r29
    2366:	cf 93       	push	r28
    2368:	cd b7       	in	r28, 0x3d	; 61
    236a:	de b7       	in	r29, 0x3e	; 62
    /* Bit Rate: 400 KHZ */
	I2C_TWBR_REG=0x0C;
    236c:	e0 e2       	ldi	r30, 0x20	; 32
    236e:	f0 e0       	ldi	r31, 0x00	; 0
    2370:	8c e0       	ldi	r24, 0x0C	; 12
    2372:	80 83       	st	Z, r24
    /* enable I2C Module	*/
	/* enable ACK check	*/
	I2C_TWCR_REG |=I2C_ENABLE|I2C_ENABLE_ACK;
    2374:	a6 e5       	ldi	r26, 0x56	; 86
    2376:	b0 e0       	ldi	r27, 0x00	; 0
    2378:	e6 e5       	ldi	r30, 0x56	; 86
    237a:	f0 e0       	ldi	r31, 0x00	; 0
    237c:	80 81       	ld	r24, Z
    237e:	84 64       	ori	r24, 0x44	; 68
    2380:	8c 93       	st	X, r24
	Lcd_Goto_Row_Column(1, 0);
    2382:	81 e0       	ldi	r24, 0x01	; 1
    2384:	90 e0       	ldi	r25, 0x00	; 0
    2386:	60 e0       	ldi	r22, 0x00	; 0
    2388:	70 e0       	ldi	r23, 0x00	; 0
    238a:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <Lcd_Goto_Row_Column>
	Lcd_DisplayStr("I2C Init");
    238e:	83 e8       	ldi	r24, 0x83	; 131
    2390:	90 e0       	ldi	r25, 0x00	; 0
    2392:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <Lcd_DisplayStr>
}
    2396:	cf 91       	pop	r28
    2398:	df 91       	pop	r29
    239a:	08 95       	ret

0000239c <I2C_SlaveInit>:
void I2C_SlaveInit(u8 addr)
{
    239c:	df 93       	push	r29
    239e:	cf 93       	push	r28
    23a0:	0f 92       	push	r0
    23a2:	cd b7       	in	r28, 0x3d	; 61
    23a4:	de b7       	in	r29, 0x3e	; 62
    23a6:	89 83       	std	Y+1, r24	; 0x01
	/*	enable general call response in slave mode	*/
	SET_BIT(I2C_TWAR_REG,I2C_SLAVE_RESPONSE_BIT_NO);
    23a8:	a2 e2       	ldi	r26, 0x22	; 34
    23aa:	b0 e0       	ldi	r27, 0x00	; 0
    23ac:	e2 e2       	ldi	r30, 0x22	; 34
    23ae:	f0 e0       	ldi	r31, 0x00	; 0
    23b0:	80 81       	ld	r24, Z
    23b2:	81 60       	ori	r24, 0x01	; 1
    23b4:	8c 93       	st	X, r24
    /* I2C Bus Slave Address	*/
	I2C_TWAR_REG |= (addr<<1);
    23b6:	a2 e2       	ldi	r26, 0x22	; 34
    23b8:	b0 e0       	ldi	r27, 0x00	; 0
    23ba:	e2 e2       	ldi	r30, 0x22	; 34
    23bc:	f0 e0       	ldi	r31, 0x00	; 0
    23be:	80 81       	ld	r24, Z
    23c0:	28 2f       	mov	r18, r24
    23c2:	89 81       	ldd	r24, Y+1	; 0x01
    23c4:	88 2f       	mov	r24, r24
    23c6:	90 e0       	ldi	r25, 0x00	; 0
    23c8:	88 0f       	add	r24, r24
    23ca:	99 1f       	adc	r25, r25
    23cc:	82 2b       	or	r24, r18
    23ce:	8c 93       	st	X, r24
    /* enable I2C Module	*/
	/*	enable ACK check	*/
	I2C_TWCR_REG |=I2C_ENABLE|I2C_ENABLE_ACK;
    23d0:	a6 e5       	ldi	r26, 0x56	; 86
    23d2:	b0 e0       	ldi	r27, 0x00	; 0
    23d4:	e6 e5       	ldi	r30, 0x56	; 86
    23d6:	f0 e0       	ldi	r31, 0x00	; 0
    23d8:	80 81       	ld	r24, Z
    23da:	84 64       	ori	r24, 0x44	; 68
    23dc:	8c 93       	st	X, r24
}
    23de:	0f 90       	pop	r0
    23e0:	cf 91       	pop	r28
    23e2:	df 91       	pop	r29
    23e4:	08 95       	ret

000023e6 <I2C_StartCondition>:
boolean I2C_StartCondition(void)
{
    23e6:	df 93       	push	r29
    23e8:	cf 93       	push	r28
    23ea:	0f 92       	push	r0
    23ec:	cd b7       	in	r28, 0x3d	; 61
    23ee:	de b7       	in	r29, 0x3e	; 62
	/*	send start condition	*/
	I2C_TWCR_REG = I2C_INTERRUPT_FLAG|I2C_START_COND;
    23f0:	e6 e5       	ldi	r30, 0x56	; 86
    23f2:	f0 e0       	ldi	r31, 0x00	; 0
    23f4:	80 ea       	ldi	r24, 0xA0	; 160
    23f6:	80 83       	st	Z, r24
    /*	Wait until start condition sent successfully	*/
    while (!(CHK_BIT(I2C_TWCR_REG,I2C_INTERRUPT_FLAG_BIT_NO)))
    23f8:	e6 e5       	ldi	r30, 0x56	; 86
    23fa:	f0 e0       	ldi	r31, 0x00	; 0
    23fc:	80 81       	ld	r24, Z
    23fe:	88 23       	and	r24, r24
    2400:	dc f7       	brge	.-10     	; 0x23f8 <I2C_StartCondition+0x12>
    {
    	/*Do Nothing */
    	   ;
    }
    if (I2C_ReadStatus() != I2C_START_ACK)
    2402:	0e 94 ad 12 	call	0x255a	; 0x255a <I2C_ReadStatus>
    2406:	88 30       	cpi	r24, 0x08	; 8
    2408:	11 f0       	breq	.+4      	; 0x240e <I2C_StartCondition+0x28>
    {
    	return FALSE;
    240a:	19 82       	std	Y+1, r1	; 0x01
    240c:	02 c0       	rjmp	.+4      	; 0x2412 <I2C_StartCondition+0x2c>
    }
    else
    {
    	/*	Do Nothing	*/
    }
    return TRUE;
    240e:	81 e0       	ldi	r24, 0x01	; 1
    2410:	89 83       	std	Y+1, r24	; 0x01
    2412:	89 81       	ldd	r24, Y+1	; 0x01
}
    2414:	0f 90       	pop	r0
    2416:	cf 91       	pop	r28
    2418:	df 91       	pop	r29
    241a:	08 95       	ret

0000241c <I2C_RepeatedStartCondition>:
boolean I2C_RepeatedStartCondition(void)
{
    241c:	df 93       	push	r29
    241e:	cf 93       	push	r28
    2420:	0f 92       	push	r0
    2422:	cd b7       	in	r28, 0x3d	; 61
    2424:	de b7       	in	r29, 0x3e	; 62
	/*	send start condition	*/
	I2C_TWCR_REG |= I2C_INTERRUPT_FLAG|I2C_START_COND;
    2426:	a6 e5       	ldi	r26, 0x56	; 86
    2428:	b0 e0       	ldi	r27, 0x00	; 0
    242a:	e6 e5       	ldi	r30, 0x56	; 86
    242c:	f0 e0       	ldi	r31, 0x00	; 0
    242e:	80 81       	ld	r24, Z
    2430:	80 6a       	ori	r24, 0xA0	; 160
    2432:	8c 93       	st	X, r24
    /*	Wait until start condition sent successfully	*/
    while (!(CHK_BIT(I2C_TWCR_REG,I2C_INTERRUPT_FLAG_BIT_NO)))
    2434:	e6 e5       	ldi	r30, 0x56	; 86
    2436:	f0 e0       	ldi	r31, 0x00	; 0
    2438:	80 81       	ld	r24, Z
    243a:	88 23       	and	r24, r24
    243c:	dc f7       	brge	.-10     	; 0x2434 <I2C_RepeatedStartCondition+0x18>
    {
    	/*Do Nothing */
    	   ;
    }
    if (I2C_ReadStatus() != I2C_REP_START_ACK)
    243e:	0e 94 ad 12 	call	0x255a	; 0x255a <I2C_ReadStatus>
    2442:	80 31       	cpi	r24, 0x10	; 16
    2444:	11 f0       	breq	.+4      	; 0x244a <I2C_RepeatedStartCondition+0x2e>
    {
    	return FALSE;
    2446:	19 82       	std	Y+1, r1	; 0x01
    2448:	02 c0       	rjmp	.+4      	; 0x244e <I2C_RepeatedStartCondition+0x32>
    }
    else
    {
    	/*	Do Nothing	*/
    }
    return TRUE;
    244a:	81 e0       	ldi	r24, 0x01	; 1
    244c:	89 83       	std	Y+1, r24	; 0x01
    244e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2450:	0f 90       	pop	r0
    2452:	cf 91       	pop	r28
    2454:	df 91       	pop	r29
    2456:	08 95       	ret

00002458 <I2C_StopCondition>:
void I2C_StopCondition(void)
{
    2458:	df 93       	push	r29
    245a:	cf 93       	push	r28
    245c:	cd b7       	in	r28, 0x3d	; 61
    245e:	de b7       	in	r29, 0x3e	; 62
	/*	send stop condition	*/
	I2C_TWCR_REG |= I2C_INTERRUPT_FLAG|I2C_STOP_COND;
    2460:	a6 e5       	ldi	r26, 0x56	; 86
    2462:	b0 e0       	ldi	r27, 0x00	; 0
    2464:	e6 e5       	ldi	r30, 0x56	; 86
    2466:	f0 e0       	ldi	r31, 0x00	; 0
    2468:	80 81       	ld	r24, Z
    246a:	80 69       	ori	r24, 0x90	; 144
    246c:	8c 93       	st	X, r24
	/*	Wait until start condition sent successfully	*/
    while (!(CHK_BIT(I2C_TWCR_REG,I2C_INTERRUPT_FLAG_BIT_NO)))
    246e:	e6 e5       	ldi	r30, 0x56	; 86
    2470:	f0 e0       	ldi	r31, 0x00	; 0
    2472:	80 81       	ld	r24, Z
    2474:	88 23       	and	r24, r24
    2476:	dc f7       	brge	.-10     	; 0x246e <I2C_StopCondition+0x16>
    {
    	/*Do Nothing */
    	   ;
    }

}
    2478:	cf 91       	pop	r28
    247a:	df 91       	pop	r29
    247c:	08 95       	ret

0000247e <I2C_WriteByte>:
void I2C_WriteByte(u8 data)
{
    247e:	df 93       	push	r29
    2480:	cf 93       	push	r28
    2482:	0f 92       	push	r0
    2484:	cd b7       	in	r28, 0x3d	; 61
    2486:	de b7       	in	r29, 0x3e	; 62
    2488:	89 83       	std	Y+1, r24	; 0x01
    /*	Put data On I2C data Register	*/
	I2C_TWDR_REG = data;
    248a:	e3 e2       	ldi	r30, 0x23	; 35
    248c:	f0 e0       	ldi	r31, 0x00	; 0
    248e:	89 81       	ldd	r24, Y+1	; 0x01
    2490:	80 83       	st	Z, r24
    /*	Send Data	*/
	I2C_TWCR_REG |= I2C_INTERRUPT_FLAG;
    2492:	a6 e5       	ldi	r26, 0x56	; 86
    2494:	b0 e0       	ldi	r27, 0x00	; 0
    2496:	e6 e5       	ldi	r30, 0x56	; 86
    2498:	f0 e0       	ldi	r31, 0x00	; 0
    249a:	80 81       	ld	r24, Z
    249c:	80 68       	ori	r24, 0x80	; 128
    249e:	8c 93       	st	X, r24
	/*	Wait until data sent successfully	*/
    while (!(CHK_BIT(I2C_TWCR_REG,I2C_INTERRUPT_FLAG_BIT_NO)))
    24a0:	e6 e5       	ldi	r30, 0x56	; 86
    24a2:	f0 e0       	ldi	r31, 0x00	; 0
    24a4:	80 81       	ld	r24, Z
    24a6:	88 23       	and	r24, r24
    24a8:	dc f7       	brge	.-10     	; 0x24a0 <I2C_WriteByte+0x22>
    {
    	/*Do Nothing */
    	   ;
    }
}
    24aa:	0f 90       	pop	r0
    24ac:	cf 91       	pop	r28
    24ae:	df 91       	pop	r29
    24b0:	08 95       	ret

000024b2 <I2C_Send_SlaveAddressWriteOperation>:
boolean I2C_Send_SlaveAddressWriteOperation(u8 addr)
{
    24b2:	df 93       	push	r29
    24b4:	cf 93       	push	r28
    24b6:	00 d0       	rcall	.+0      	; 0x24b8 <I2C_Send_SlaveAddressWriteOperation+0x6>
    24b8:	0f 92       	push	r0
    24ba:	cd b7       	in	r28, 0x3d	; 61
    24bc:	de b7       	in	r29, 0x3e	; 62
    24be:	8a 83       	std	Y+2, r24	; 0x02
	u8 loc_addrWrite=0;
    24c0:	19 82       	std	Y+1, r1	; 0x01
	loc_addrWrite=(addr<<1);
    24c2:	8a 81       	ldd	r24, Y+2	; 0x02
    24c4:	88 0f       	add	r24, r24
    24c6:	89 83       	std	Y+1, r24	; 0x01
	I2C_WriteByte(loc_addrWrite);
    24c8:	89 81       	ldd	r24, Y+1	; 0x01
    24ca:	0e 94 3f 12 	call	0x247e	; 0x247e <I2C_WriteByte>
    if (I2C_ReadStatus() != I2C_SLA_W_ACK)
    24ce:	0e 94 ad 12 	call	0x255a	; 0x255a <I2C_ReadStatus>
    24d2:	88 31       	cpi	r24, 0x18	; 24
    24d4:	11 f0       	breq	.+4      	; 0x24da <I2C_Send_SlaveAddressWriteOperation+0x28>
    {
    	return FALSE;
    24d6:	1b 82       	std	Y+3, r1	; 0x03
    24d8:	02 c0       	rjmp	.+4      	; 0x24de <I2C_Send_SlaveAddressWriteOperation+0x2c>
    }
    else
    {
    	/*	Do Nothing	*/
    }
    return TRUE;
    24da:	81 e0       	ldi	r24, 0x01	; 1
    24dc:	8b 83       	std	Y+3, r24	; 0x03
    24de:	8b 81       	ldd	r24, Y+3	; 0x03

}
    24e0:	0f 90       	pop	r0
    24e2:	0f 90       	pop	r0
    24e4:	0f 90       	pop	r0
    24e6:	cf 91       	pop	r28
    24e8:	df 91       	pop	r29
    24ea:	08 95       	ret

000024ec <I2C_Send_SlaveAddressReadOperation>:
boolean I2C_Send_SlaveAddressReadOperation(u8 addr)
{
    24ec:	df 93       	push	r29
    24ee:	cf 93       	push	r28
    24f0:	00 d0       	rcall	.+0      	; 0x24f2 <I2C_Send_SlaveAddressReadOperation+0x6>
    24f2:	0f 92       	push	r0
    24f4:	cd b7       	in	r28, 0x3d	; 61
    24f6:	de b7       	in	r29, 0x3e	; 62
    24f8:	8a 83       	std	Y+2, r24	; 0x02
	u8 loc_addrWrite=0;
    24fa:	19 82       	std	Y+1, r1	; 0x01
	loc_addrWrite=(addr<<1)|(0x01);
    24fc:	8a 81       	ldd	r24, Y+2	; 0x02
    24fe:	88 2f       	mov	r24, r24
    2500:	90 e0       	ldi	r25, 0x00	; 0
    2502:	88 0f       	add	r24, r24
    2504:	99 1f       	adc	r25, r25
    2506:	81 60       	ori	r24, 0x01	; 1
    2508:	89 83       	std	Y+1, r24	; 0x01
	I2C_WriteByte(loc_addrWrite);
    250a:	89 81       	ldd	r24, Y+1	; 0x01
    250c:	0e 94 3f 12 	call	0x247e	; 0x247e <I2C_WriteByte>
    if (I2C_ReadStatus() != I2C_SLA_R_ACK)
    2510:	0e 94 ad 12 	call	0x255a	; 0x255a <I2C_ReadStatus>
    2514:	80 34       	cpi	r24, 0x40	; 64
    2516:	11 f0       	breq	.+4      	; 0x251c <I2C_Send_SlaveAddressReadOperation+0x30>
    {
    	return FALSE;
    2518:	1b 82       	std	Y+3, r1	; 0x03
    251a:	02 c0       	rjmp	.+4      	; 0x2520 <I2C_Send_SlaveAddressReadOperation+0x34>
    }
    else
    {
    	/*	Do Nothing	*/
    }
    return TRUE;
    251c:	81 e0       	ldi	r24, 0x01	; 1
    251e:	8b 83       	std	Y+3, r24	; 0x03
    2520:	8b 81       	ldd	r24, Y+3	; 0x03
}
    2522:	0f 90       	pop	r0
    2524:	0f 90       	pop	r0
    2526:	0f 90       	pop	r0
    2528:	cf 91       	pop	r28
    252a:	df 91       	pop	r29
    252c:	08 95       	ret

0000252e <I2C_ReadByte>:
u8 I2C_ReadByte(void)
{
    252e:	df 93       	push	r29
    2530:	cf 93       	push	r28
    2532:	cd b7       	in	r28, 0x3d	; 61
    2534:	de b7       	in	r29, 0x3e	; 62
	I2C_TWCR_REG |= I2C_INTERRUPT_FLAG;
    2536:	a6 e5       	ldi	r26, 0x56	; 86
    2538:	b0 e0       	ldi	r27, 0x00	; 0
    253a:	e6 e5       	ldi	r30, 0x56	; 86
    253c:	f0 e0       	ldi	r31, 0x00	; 0
    253e:	80 81       	ld	r24, Z
    2540:	80 68       	ori	r24, 0x80	; 128
    2542:	8c 93       	st	X, r24
	/*	Wait until data sent successfully	*/
    while (!(CHK_BIT(I2C_TWCR_REG,I2C_INTERRUPT_FLAG_BIT_NO)))
    2544:	e6 e5       	ldi	r30, 0x56	; 86
    2546:	f0 e0       	ldi	r31, 0x00	; 0
    2548:	80 81       	ld	r24, Z
    254a:	88 23       	and	r24, r24
    254c:	dc f7       	brge	.-10     	; 0x2544 <I2C_ReadByte+0x16>
    {
    	/*Do Nothing */
    	   ;
    }
    return I2C_TWDR_REG;
    254e:	e3 e2       	ldi	r30, 0x23	; 35
    2550:	f0 e0       	ldi	r31, 0x00	; 0
    2552:	80 81       	ld	r24, Z
}
    2554:	cf 91       	pop	r28
    2556:	df 91       	pop	r29
    2558:	08 95       	ret

0000255a <I2C_ReadStatus>:
u8 I2C_ReadStatus(void)
{
    255a:	df 93       	push	r29
    255c:	cf 93       	push	r28
    255e:	0f 92       	push	r0
    2560:	cd b7       	in	r28, 0x3d	; 61
    2562:	de b7       	in	r29, 0x3e	; 62
    u8 status;
    status = I2C_TWSR_REG & 0xF8;
    2564:	e1 e2       	ldi	r30, 0x21	; 33
    2566:	f0 e0       	ldi	r31, 0x00	; 0
    2568:	80 81       	ld	r24, Z
    256a:	88 7f       	andi	r24, 0xF8	; 248
    256c:	89 83       	std	Y+1, r24	; 0x01
    return status;
    256e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2570:	0f 90       	pop	r0
    2572:	cf 91       	pop	r28
    2574:	df 91       	pop	r29
    2576:	08 95       	ret

00002578 <Glbl_Interrupt_Enable>:
 */

#include "Glbl_INT.h"

void Glbl_Interrupt_Enable()
{
    2578:	df 93       	push	r29
    257a:	cf 93       	push	r28
    257c:	cd b7       	in	r28, 0x3d	; 61
    257e:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(GLBL_SREG_REG,7);
    2580:	af e5       	ldi	r26, 0x5F	; 95
    2582:	b0 e0       	ldi	r27, 0x00	; 0
    2584:	ef e5       	ldi	r30, 0x5F	; 95
    2586:	f0 e0       	ldi	r31, 0x00	; 0
    2588:	80 81       	ld	r24, Z
    258a:	80 68       	ori	r24, 0x80	; 128
    258c:	8c 93       	st	X, r24
}
    258e:	cf 91       	pop	r28
    2590:	df 91       	pop	r29
    2592:	08 95       	ret

00002594 <Glbl_Interrupt_Disable>:
void Glbl_Interrupt_Disable()
{
    2594:	df 93       	push	r29
    2596:	cf 93       	push	r28
    2598:	cd b7       	in	r28, 0x3d	; 61
    259a:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(GLBL_SREG_REG,7);
    259c:	af e5       	ldi	r26, 0x5F	; 95
    259e:	b0 e0       	ldi	r27, 0x00	; 0
    25a0:	ef e5       	ldi	r30, 0x5F	; 95
    25a2:	f0 e0       	ldi	r31, 0x00	; 0
    25a4:	80 81       	ld	r24, Z
    25a6:	8f 77       	andi	r24, 0x7F	; 127
    25a8:	8c 93       	st	X, r24
}
    25aa:	cf 91       	pop	r28
    25ac:	df 91       	pop	r29
    25ae:	08 95       	ret

000025b0 <Ext_Interrupt_Enable>:

#include "Ext_INT.h"


void Ext_Interrupt_Enable(ext_Int_t intID)
{
    25b0:	df 93       	push	r29
    25b2:	cf 93       	push	r28
    25b4:	00 d0       	rcall	.+0      	; 0x25b6 <Ext_Interrupt_Enable+0x6>
    25b6:	0f 92       	push	r0
    25b8:	cd b7       	in	r28, 0x3d	; 61
    25ba:	de b7       	in	r29, 0x3e	; 62
    25bc:	89 83       	std	Y+1, r24	; 0x01
	switch (intID)
    25be:	89 81       	ldd	r24, Y+1	; 0x01
    25c0:	28 2f       	mov	r18, r24
    25c2:	30 e0       	ldi	r19, 0x00	; 0
    25c4:	3b 83       	std	Y+3, r19	; 0x03
    25c6:	2a 83       	std	Y+2, r18	; 0x02
    25c8:	8a 81       	ldd	r24, Y+2	; 0x02
    25ca:	9b 81       	ldd	r25, Y+3	; 0x03
    25cc:	81 30       	cpi	r24, 0x01	; 1
    25ce:	91 05       	cpc	r25, r1
    25d0:	89 f0       	breq	.+34     	; 0x25f4 <Ext_Interrupt_Enable+0x44>
    25d2:	2a 81       	ldd	r18, Y+2	; 0x02
    25d4:	3b 81       	ldd	r19, Y+3	; 0x03
    25d6:	22 30       	cpi	r18, 0x02	; 2
    25d8:	31 05       	cpc	r19, r1
    25da:	a1 f0       	breq	.+40     	; 0x2604 <Ext_Interrupt_Enable+0x54>
    25dc:	8a 81       	ldd	r24, Y+2	; 0x02
    25de:	9b 81       	ldd	r25, Y+3	; 0x03
    25e0:	00 97       	sbiw	r24, 0x00	; 0
    25e2:	b9 f4       	brne	.+46     	; 0x2612 <Ext_Interrupt_Enable+0x62>
	{
	case EXT_INT0:
			SET_BIT(EXT_INT_GICR_REG,6);
    25e4:	ab e5       	ldi	r26, 0x5B	; 91
    25e6:	b0 e0       	ldi	r27, 0x00	; 0
    25e8:	eb e5       	ldi	r30, 0x5B	; 91
    25ea:	f0 e0       	ldi	r31, 0x00	; 0
    25ec:	80 81       	ld	r24, Z
    25ee:	80 64       	ori	r24, 0x40	; 64
    25f0:	8c 93       	st	X, r24
    25f2:	0f c0       	rjmp	.+30     	; 0x2612 <Ext_Interrupt_Enable+0x62>
			break;

	case EXT_INT1:
			SET_BIT(EXT_INT_GICR_REG,7);
    25f4:	ab e5       	ldi	r26, 0x5B	; 91
    25f6:	b0 e0       	ldi	r27, 0x00	; 0
    25f8:	eb e5       	ldi	r30, 0x5B	; 91
    25fa:	f0 e0       	ldi	r31, 0x00	; 0
    25fc:	80 81       	ld	r24, Z
    25fe:	80 68       	ori	r24, 0x80	; 128
    2600:	8c 93       	st	X, r24
    2602:	07 c0       	rjmp	.+14     	; 0x2612 <Ext_Interrupt_Enable+0x62>
			break;

	case EXT_INT2:
			SET_BIT(EXT_INT_GICR_REG,5);
    2604:	ab e5       	ldi	r26, 0x5B	; 91
    2606:	b0 e0       	ldi	r27, 0x00	; 0
    2608:	eb e5       	ldi	r30, 0x5B	; 91
    260a:	f0 e0       	ldi	r31, 0x00	; 0
    260c:	80 81       	ld	r24, Z
    260e:	80 62       	ori	r24, 0x20	; 32
    2610:	8c 93       	st	X, r24
			break;
	}
}
    2612:	0f 90       	pop	r0
    2614:	0f 90       	pop	r0
    2616:	0f 90       	pop	r0
    2618:	cf 91       	pop	r28
    261a:	df 91       	pop	r29
    261c:	08 95       	ret

0000261e <Ext_Interrupt_Disable>:
void Ext_Interrupt_Disable(ext_Int_t intID)
{
    261e:	df 93       	push	r29
    2620:	cf 93       	push	r28
    2622:	00 d0       	rcall	.+0      	; 0x2624 <Ext_Interrupt_Disable+0x6>
    2624:	0f 92       	push	r0
    2626:	cd b7       	in	r28, 0x3d	; 61
    2628:	de b7       	in	r29, 0x3e	; 62
    262a:	89 83       	std	Y+1, r24	; 0x01
	switch (intID)
    262c:	89 81       	ldd	r24, Y+1	; 0x01
    262e:	28 2f       	mov	r18, r24
    2630:	30 e0       	ldi	r19, 0x00	; 0
    2632:	3b 83       	std	Y+3, r19	; 0x03
    2634:	2a 83       	std	Y+2, r18	; 0x02
    2636:	8a 81       	ldd	r24, Y+2	; 0x02
    2638:	9b 81       	ldd	r25, Y+3	; 0x03
    263a:	81 30       	cpi	r24, 0x01	; 1
    263c:	91 05       	cpc	r25, r1
    263e:	89 f0       	breq	.+34     	; 0x2662 <Ext_Interrupt_Disable+0x44>
    2640:	2a 81       	ldd	r18, Y+2	; 0x02
    2642:	3b 81       	ldd	r19, Y+3	; 0x03
    2644:	22 30       	cpi	r18, 0x02	; 2
    2646:	31 05       	cpc	r19, r1
    2648:	a1 f0       	breq	.+40     	; 0x2672 <Ext_Interrupt_Disable+0x54>
    264a:	8a 81       	ldd	r24, Y+2	; 0x02
    264c:	9b 81       	ldd	r25, Y+3	; 0x03
    264e:	00 97       	sbiw	r24, 0x00	; 0
    2650:	b9 f4       	brne	.+46     	; 0x2680 <Ext_Interrupt_Disable+0x62>
	{
	case EXT_INT0:
			CLR_BIT(EXT_INT_GICR_REG,6);
    2652:	ab e5       	ldi	r26, 0x5B	; 91
    2654:	b0 e0       	ldi	r27, 0x00	; 0
    2656:	eb e5       	ldi	r30, 0x5B	; 91
    2658:	f0 e0       	ldi	r31, 0x00	; 0
    265a:	80 81       	ld	r24, Z
    265c:	8f 7b       	andi	r24, 0xBF	; 191
    265e:	8c 93       	st	X, r24
    2660:	0f c0       	rjmp	.+30     	; 0x2680 <Ext_Interrupt_Disable+0x62>
			break;

	case EXT_INT1:
			CLR_BIT(EXT_INT_GICR_REG,7);
    2662:	ab e5       	ldi	r26, 0x5B	; 91
    2664:	b0 e0       	ldi	r27, 0x00	; 0
    2666:	eb e5       	ldi	r30, 0x5B	; 91
    2668:	f0 e0       	ldi	r31, 0x00	; 0
    266a:	80 81       	ld	r24, Z
    266c:	8f 77       	andi	r24, 0x7F	; 127
    266e:	8c 93       	st	X, r24
    2670:	07 c0       	rjmp	.+14     	; 0x2680 <Ext_Interrupt_Disable+0x62>
			break;

	case EXT_INT2:
			CLR_BIT(EXT_INT_GICR_REG,5);
    2672:	ab e5       	ldi	r26, 0x5B	; 91
    2674:	b0 e0       	ldi	r27, 0x00	; 0
    2676:	eb e5       	ldi	r30, 0x5B	; 91
    2678:	f0 e0       	ldi	r31, 0x00	; 0
    267a:	80 81       	ld	r24, Z
    267c:	8f 7d       	andi	r24, 0xDF	; 223
    267e:	8c 93       	st	X, r24
			break;
	}

}
    2680:	0f 90       	pop	r0
    2682:	0f 90       	pop	r0
    2684:	0f 90       	pop	r0
    2686:	cf 91       	pop	r28
    2688:	df 91       	pop	r29
    268a:	08 95       	ret

0000268c <Ext_Interrupt_SncControl>:

void Ext_Interrupt_SncControl(ext_Int_t intID, snc_mode_t mode)
{
    268c:	df 93       	push	r29
    268e:	cf 93       	push	r28
    2690:	00 d0       	rcall	.+0      	; 0x2692 <Ext_Interrupt_SncControl+0x6>
    2692:	00 d0       	rcall	.+0      	; 0x2694 <Ext_Interrupt_SncControl+0x8>
    2694:	cd b7       	in	r28, 0x3d	; 61
    2696:	de b7       	in	r29, 0x3e	; 62
    2698:	89 83       	std	Y+1, r24	; 0x01
    269a:	6a 83       	std	Y+2, r22	; 0x02
	switch (intID)
    269c:	89 81       	ldd	r24, Y+1	; 0x01
    269e:	28 2f       	mov	r18, r24
    26a0:	30 e0       	ldi	r19, 0x00	; 0
    26a2:	3c 83       	std	Y+4, r19	; 0x04
    26a4:	2b 83       	std	Y+3, r18	; 0x03
    26a6:	8b 81       	ldd	r24, Y+3	; 0x03
    26a8:	9c 81       	ldd	r25, Y+4	; 0x04
    26aa:	81 30       	cpi	r24, 0x01	; 1
    26ac:	91 05       	cpc	r25, r1
    26ae:	91 f0       	breq	.+36     	; 0x26d4 <Ext_Interrupt_SncControl+0x48>
    26b0:	2b 81       	ldd	r18, Y+3	; 0x03
    26b2:	3c 81       	ldd	r19, Y+4	; 0x04
    26b4:	22 30       	cpi	r18, 0x02	; 2
    26b6:	31 05       	cpc	r19, r1
    26b8:	e9 f0       	breq	.+58     	; 0x26f4 <Ext_Interrupt_SncControl+0x68>
    26ba:	8b 81       	ldd	r24, Y+3	; 0x03
    26bc:	9c 81       	ldd	r25, Y+4	; 0x04
    26be:	00 97       	sbiw	r24, 0x00	; 0
    26c0:	71 f5       	brne	.+92     	; 0x271e <Ext_Interrupt_SncControl+0x92>
	{
		case EXT_INT0:
			EXT_INT_MCUCR_REG |=(mode<<0);
    26c2:	a5 e5       	ldi	r26, 0x55	; 85
    26c4:	b0 e0       	ldi	r27, 0x00	; 0
    26c6:	e5 e5       	ldi	r30, 0x55	; 85
    26c8:	f0 e0       	ldi	r31, 0x00	; 0
    26ca:	90 81       	ld	r25, Z
    26cc:	8a 81       	ldd	r24, Y+2	; 0x02
    26ce:	89 2b       	or	r24, r25
    26d0:	8c 93       	st	X, r24
    26d2:	25 c0       	rjmp	.+74     	; 0x271e <Ext_Interrupt_SncControl+0x92>
			break;

		case EXT_INT1:
			EXT_INT_MCUCR_REG |=(mode<<2);
    26d4:	a5 e5       	ldi	r26, 0x55	; 85
    26d6:	b0 e0       	ldi	r27, 0x00	; 0
    26d8:	e5 e5       	ldi	r30, 0x55	; 85
    26da:	f0 e0       	ldi	r31, 0x00	; 0
    26dc:	80 81       	ld	r24, Z
    26de:	28 2f       	mov	r18, r24
    26e0:	8a 81       	ldd	r24, Y+2	; 0x02
    26e2:	88 2f       	mov	r24, r24
    26e4:	90 e0       	ldi	r25, 0x00	; 0
    26e6:	88 0f       	add	r24, r24
    26e8:	99 1f       	adc	r25, r25
    26ea:	88 0f       	add	r24, r24
    26ec:	99 1f       	adc	r25, r25
    26ee:	82 2b       	or	r24, r18
    26f0:	8c 93       	st	X, r24
    26f2:	15 c0       	rjmp	.+42     	; 0x271e <Ext_Interrupt_SncControl+0x92>
			break;

		case EXT_INT2:
			if (mode == FAILING_EDGE)
    26f4:	8a 81       	ldd	r24, Y+2	; 0x02
    26f6:	82 30       	cpi	r24, 0x02	; 2
    26f8:	41 f4       	brne	.+16     	; 0x270a <Ext_Interrupt_SncControl+0x7e>
			{
				CLR_BIT(EXT_INT_MCUCSR_REG,6);
    26fa:	a4 e5       	ldi	r26, 0x54	; 84
    26fc:	b0 e0       	ldi	r27, 0x00	; 0
    26fe:	e4 e5       	ldi	r30, 0x54	; 84
    2700:	f0 e0       	ldi	r31, 0x00	; 0
    2702:	80 81       	ld	r24, Z
    2704:	8f 7b       	andi	r24, 0xBF	; 191
    2706:	8c 93       	st	X, r24
    2708:	0a c0       	rjmp	.+20     	; 0x271e <Ext_Interrupt_SncControl+0x92>
			}
			else if (mode == RISING_EDGE)
    270a:	8a 81       	ldd	r24, Y+2	; 0x02
    270c:	83 30       	cpi	r24, 0x03	; 3
    270e:	39 f4       	brne	.+14     	; 0x271e <Ext_Interrupt_SncControl+0x92>
			{
				SET_BIT(EXT_INT_MCUCSR_REG,6);
    2710:	a4 e5       	ldi	r26, 0x54	; 84
    2712:	b0 e0       	ldi	r27, 0x00	; 0
    2714:	e4 e5       	ldi	r30, 0x54	; 84
    2716:	f0 e0       	ldi	r31, 0x00	; 0
    2718:	80 81       	ld	r24, Z
    271a:	80 64       	ori	r24, 0x40	; 64
    271c:	8c 93       	st	X, r24
			{
				/*	Do Nothing	*/
			}
			break;
	}
}
    271e:	0f 90       	pop	r0
    2720:	0f 90       	pop	r0
    2722:	0f 90       	pop	r0
    2724:	0f 90       	pop	r0
    2726:	cf 91       	pop	r28
    2728:	df 91       	pop	r29
    272a:	08 95       	ret

0000272c <EEPROM_Write>:
 *
 *********************************************************************************************************************/
#include <Eeprom.h>

void EEPROM_Write(u16 address,u8 data)
{
    272c:	df 93       	push	r29
    272e:	cf 93       	push	r28
    2730:	00 d0       	rcall	.+0      	; 0x2732 <EEPROM_Write+0x6>
    2732:	0f 92       	push	r0
    2734:	cd b7       	in	r28, 0x3d	; 61
    2736:	de b7       	in	r29, 0x3e	; 62
    2738:	9a 83       	std	Y+2, r25	; 0x02
    273a:	89 83       	std	Y+1, r24	; 0x01
    273c:	6b 83       	std	Y+3, r22	; 0x03
	/* Wait for completion of previous write */
	while(EEPROM_CR_REG & (1<<EEWE))
    273e:	ec e3       	ldi	r30, 0x3C	; 60
    2740:	f0 e0       	ldi	r31, 0x00	; 0
    2742:	80 81       	ld	r24, Z
    2744:	88 2f       	mov	r24, r24
    2746:	90 e0       	ldi	r25, 0x00	; 0
    2748:	82 70       	andi	r24, 0x02	; 2
    274a:	90 70       	andi	r25, 0x00	; 0
    274c:	00 97       	sbiw	r24, 0x00	; 0
    274e:	b9 f7       	brne	.-18     	; 0x273e <EEPROM_Write+0x12>
		/*	Do Nothing	*/		;
	/* Set up address and data registers */
	EEPROM_ARL_REG=address;
    2750:	ee e3       	ldi	r30, 0x3E	; 62
    2752:	f0 e0       	ldi	r31, 0x00	; 0
    2754:	89 81       	ldd	r24, Y+1	; 0x01
    2756:	80 83       	st	Z, r24
	EEPROM_ARH_REG = address>>8;
    2758:	ef e3       	ldi	r30, 0x3F	; 63
    275a:	f0 e0       	ldi	r31, 0x00	; 0
    275c:	89 81       	ldd	r24, Y+1	; 0x01
    275e:	9a 81       	ldd	r25, Y+2	; 0x02
    2760:	89 2f       	mov	r24, r25
    2762:	99 27       	eor	r25, r25
    2764:	80 83       	st	Z, r24
	EEPROM_DR_REG = data;
    2766:	ed e3       	ldi	r30, 0x3D	; 61
    2768:	f0 e0       	ldi	r31, 0x00	; 0
    276a:	8b 81       	ldd	r24, Y+3	; 0x03
    276c:	80 83       	st	Z, r24
	/* Write logical one to EEMWE */
	EEPROM_CR_REG |= (1<<EEMWE);
    276e:	ac e3       	ldi	r26, 0x3C	; 60
    2770:	b0 e0       	ldi	r27, 0x00	; 0
    2772:	ec e3       	ldi	r30, 0x3C	; 60
    2774:	f0 e0       	ldi	r31, 0x00	; 0
    2776:	80 81       	ld	r24, Z
    2778:	84 60       	ori	r24, 0x04	; 4
    277a:	8c 93       	st	X, r24
	/* Start eeprom write by setting EEWE */
	EEPROM_CR_REG |= (1<<EEWE);
    277c:	ac e3       	ldi	r26, 0x3C	; 60
    277e:	b0 e0       	ldi	r27, 0x00	; 0
    2780:	ec e3       	ldi	r30, 0x3C	; 60
    2782:	f0 e0       	ldi	r31, 0x00	; 0
    2784:	80 81       	ld	r24, Z
    2786:	82 60       	ori	r24, 0x02	; 2
    2788:	8c 93       	st	X, r24
}
    278a:	0f 90       	pop	r0
    278c:	0f 90       	pop	r0
    278e:	0f 90       	pop	r0
    2790:	cf 91       	pop	r28
    2792:	df 91       	pop	r29
    2794:	08 95       	ret

00002796 <EEPROM_Read>:

u8 EEPROM_Read(u16 address)
{
    2796:	df 93       	push	r29
    2798:	cf 93       	push	r28
    279a:	00 d0       	rcall	.+0      	; 0x279c <EEPROM_Read+0x6>
    279c:	cd b7       	in	r28, 0x3d	; 61
    279e:	de b7       	in	r29, 0x3e	; 62
    27a0:	9a 83       	std	Y+2, r25	; 0x02
    27a2:	89 83       	std	Y+1, r24	; 0x01
	/* Wait for completion of previous write */
	while(EEPROM_CR_REG & (1<<EEWE))
    27a4:	ec e3       	ldi	r30, 0x3C	; 60
    27a6:	f0 e0       	ldi	r31, 0x00	; 0
    27a8:	80 81       	ld	r24, Z
    27aa:	88 2f       	mov	r24, r24
    27ac:	90 e0       	ldi	r25, 0x00	; 0
    27ae:	82 70       	andi	r24, 0x02	; 2
    27b0:	90 70       	andi	r25, 0x00	; 0
    27b2:	00 97       	sbiw	r24, 0x00	; 0
    27b4:	b9 f7       	brne	.-18     	; 0x27a4 <EEPROM_Read+0xe>
			;
	/* Set up address register */
	EEPROM_ARL_REG	=address;
    27b6:	ee e3       	ldi	r30, 0x3E	; 62
    27b8:	f0 e0       	ldi	r31, 0x00	; 0
    27ba:	89 81       	ldd	r24, Y+1	; 0x01
    27bc:	80 83       	st	Z, r24
	EEPROM_ARH_REG = address>>8;
    27be:	ef e3       	ldi	r30, 0x3F	; 63
    27c0:	f0 e0       	ldi	r31, 0x00	; 0
    27c2:	89 81       	ldd	r24, Y+1	; 0x01
    27c4:	9a 81       	ldd	r25, Y+2	; 0x02
    27c6:	89 2f       	mov	r24, r25
    27c8:	99 27       	eor	r25, r25
    27ca:	80 83       	st	Z, r24
	/* Start eeprom read by writing EERE */
	EEPROM_CR_REG |= (1<<EERE);
    27cc:	ac e3       	ldi	r26, 0x3C	; 60
    27ce:	b0 e0       	ldi	r27, 0x00	; 0
    27d0:	ec e3       	ldi	r30, 0x3C	; 60
    27d2:	f0 e0       	ldi	r31, 0x00	; 0
    27d4:	80 81       	ld	r24, Z
    27d6:	81 60       	ori	r24, 0x01	; 1
    27d8:	8c 93       	st	X, r24
	/* Return data from data register */
	return EEPROM_DR_REG;
    27da:	ed e3       	ldi	r30, 0x3D	; 61
    27dc:	f0 e0       	ldi	r31, 0x00	; 0
    27de:	80 81       	ld	r24, Z
}
    27e0:	0f 90       	pop	r0
    27e2:	0f 90       	pop	r0
    27e4:	cf 91       	pop	r28
    27e6:	df 91       	pop	r29
    27e8:	08 95       	ret

000027ea <Dio_ConfigChannel>:
 */
#include "Dio.h"

/*DDRx      DDRA, DDRB, DDRC, DDRD*/
void Dio_ConfigChannel(port_type port,pin_type pin,direction_type direction)
{
    27ea:	df 93       	push	r29
    27ec:	cf 93       	push	r28
    27ee:	00 d0       	rcall	.+0      	; 0x27f0 <Dio_ConfigChannel+0x6>
    27f0:	00 d0       	rcall	.+0      	; 0x27f2 <Dio_ConfigChannel+0x8>
    27f2:	0f 92       	push	r0
    27f4:	cd b7       	in	r28, 0x3d	; 61
    27f6:	de b7       	in	r29, 0x3e	; 62
    27f8:	89 83       	std	Y+1, r24	; 0x01
    27fa:	6a 83       	std	Y+2, r22	; 0x02
    27fc:	4b 83       	std	Y+3, r20	; 0x03
	switch (port)
    27fe:	89 81       	ldd	r24, Y+1	; 0x01
    2800:	28 2f       	mov	r18, r24
    2802:	30 e0       	ldi	r19, 0x00	; 0
    2804:	3d 83       	std	Y+5, r19	; 0x05
    2806:	2c 83       	std	Y+4, r18	; 0x04
    2808:	8c 81       	ldd	r24, Y+4	; 0x04
    280a:	9d 81       	ldd	r25, Y+5	; 0x05
    280c:	81 30       	cpi	r24, 0x01	; 1
    280e:	91 05       	cpc	r25, r1
    2810:	09 f4       	brne	.+2      	; 0x2814 <Dio_ConfigChannel+0x2a>
    2812:	43 c0       	rjmp	.+134    	; 0x289a <Dio_ConfigChannel+0xb0>
    2814:	2c 81       	ldd	r18, Y+4	; 0x04
    2816:	3d 81       	ldd	r19, Y+5	; 0x05
    2818:	22 30       	cpi	r18, 0x02	; 2
    281a:	31 05       	cpc	r19, r1
    281c:	2c f4       	brge	.+10     	; 0x2828 <Dio_ConfigChannel+0x3e>
    281e:	8c 81       	ldd	r24, Y+4	; 0x04
    2820:	9d 81       	ldd	r25, Y+5	; 0x05
    2822:	00 97       	sbiw	r24, 0x00	; 0
    2824:	71 f0       	breq	.+28     	; 0x2842 <Dio_ConfigChannel+0x58>
    2826:	bc c0       	rjmp	.+376    	; 0x29a0 <Dio_ConfigChannel+0x1b6>
    2828:	2c 81       	ldd	r18, Y+4	; 0x04
    282a:	3d 81       	ldd	r19, Y+5	; 0x05
    282c:	22 30       	cpi	r18, 0x02	; 2
    282e:	31 05       	cpc	r19, r1
    2830:	09 f4       	brne	.+2      	; 0x2834 <Dio_ConfigChannel+0x4a>
    2832:	5f c0       	rjmp	.+190    	; 0x28f2 <Dio_ConfigChannel+0x108>
    2834:	8c 81       	ldd	r24, Y+4	; 0x04
    2836:	9d 81       	ldd	r25, Y+5	; 0x05
    2838:	83 30       	cpi	r24, 0x03	; 3
    283a:	91 05       	cpc	r25, r1
    283c:	09 f4       	brne	.+2      	; 0x2840 <Dio_ConfigChannel+0x56>
    283e:	85 c0       	rjmp	.+266    	; 0x294a <Dio_ConfigChannel+0x160>
    2840:	af c0       	rjmp	.+350    	; 0x29a0 <Dio_ConfigChannel+0x1b6>
	{
	case DIO_PORTA:
		if (direction == INPUT)
    2842:	8b 81       	ldd	r24, Y+3	; 0x03
    2844:	88 23       	and	r24, r24
    2846:	a9 f4       	brne	.+42     	; 0x2872 <Dio_ConfigChannel+0x88>
		{
			CLR_BIT(DIO_DDRA_REG,pin);
    2848:	aa e3       	ldi	r26, 0x3A	; 58
    284a:	b0 e0       	ldi	r27, 0x00	; 0
    284c:	ea e3       	ldi	r30, 0x3A	; 58
    284e:	f0 e0       	ldi	r31, 0x00	; 0
    2850:	80 81       	ld	r24, Z
    2852:	48 2f       	mov	r20, r24
    2854:	8a 81       	ldd	r24, Y+2	; 0x02
    2856:	28 2f       	mov	r18, r24
    2858:	30 e0       	ldi	r19, 0x00	; 0
    285a:	81 e0       	ldi	r24, 0x01	; 1
    285c:	90 e0       	ldi	r25, 0x00	; 0
    285e:	02 2e       	mov	r0, r18
    2860:	02 c0       	rjmp	.+4      	; 0x2866 <Dio_ConfigChannel+0x7c>
    2862:	88 0f       	add	r24, r24
    2864:	99 1f       	adc	r25, r25
    2866:	0a 94       	dec	r0
    2868:	e2 f7       	brpl	.-8      	; 0x2862 <Dio_ConfigChannel+0x78>
    286a:	80 95       	com	r24
    286c:	84 23       	and	r24, r20
    286e:	8c 93       	st	X, r24
    2870:	97 c0       	rjmp	.+302    	; 0x29a0 <Dio_ConfigChannel+0x1b6>
		}
		else
		{
			SET_BIT(DIO_DDRA_REG,pin);
    2872:	aa e3       	ldi	r26, 0x3A	; 58
    2874:	b0 e0       	ldi	r27, 0x00	; 0
    2876:	ea e3       	ldi	r30, 0x3A	; 58
    2878:	f0 e0       	ldi	r31, 0x00	; 0
    287a:	80 81       	ld	r24, Z
    287c:	48 2f       	mov	r20, r24
    287e:	8a 81       	ldd	r24, Y+2	; 0x02
    2880:	28 2f       	mov	r18, r24
    2882:	30 e0       	ldi	r19, 0x00	; 0
    2884:	81 e0       	ldi	r24, 0x01	; 1
    2886:	90 e0       	ldi	r25, 0x00	; 0
    2888:	02 2e       	mov	r0, r18
    288a:	02 c0       	rjmp	.+4      	; 0x2890 <Dio_ConfigChannel+0xa6>
    288c:	88 0f       	add	r24, r24
    288e:	99 1f       	adc	r25, r25
    2890:	0a 94       	dec	r0
    2892:	e2 f7       	brpl	.-8      	; 0x288c <Dio_ConfigChannel+0xa2>
    2894:	84 2b       	or	r24, r20
    2896:	8c 93       	st	X, r24
    2898:	83 c0       	rjmp	.+262    	; 0x29a0 <Dio_ConfigChannel+0x1b6>
		}
		break;

	case DIO_PORTB:
		if (direction == INPUT)
    289a:	8b 81       	ldd	r24, Y+3	; 0x03
    289c:	88 23       	and	r24, r24
    289e:	a9 f4       	brne	.+42     	; 0x28ca <Dio_ConfigChannel+0xe0>
		{
			CLR_BIT(DIO_DDRB_REG,pin);
    28a0:	a7 e3       	ldi	r26, 0x37	; 55
    28a2:	b0 e0       	ldi	r27, 0x00	; 0
    28a4:	e7 e3       	ldi	r30, 0x37	; 55
    28a6:	f0 e0       	ldi	r31, 0x00	; 0
    28a8:	80 81       	ld	r24, Z
    28aa:	48 2f       	mov	r20, r24
    28ac:	8a 81       	ldd	r24, Y+2	; 0x02
    28ae:	28 2f       	mov	r18, r24
    28b0:	30 e0       	ldi	r19, 0x00	; 0
    28b2:	81 e0       	ldi	r24, 0x01	; 1
    28b4:	90 e0       	ldi	r25, 0x00	; 0
    28b6:	02 2e       	mov	r0, r18
    28b8:	02 c0       	rjmp	.+4      	; 0x28be <Dio_ConfigChannel+0xd4>
    28ba:	88 0f       	add	r24, r24
    28bc:	99 1f       	adc	r25, r25
    28be:	0a 94       	dec	r0
    28c0:	e2 f7       	brpl	.-8      	; 0x28ba <Dio_ConfigChannel+0xd0>
    28c2:	80 95       	com	r24
    28c4:	84 23       	and	r24, r20
    28c6:	8c 93       	st	X, r24
    28c8:	6b c0       	rjmp	.+214    	; 0x29a0 <Dio_ConfigChannel+0x1b6>
		}
		else
		{
			SET_BIT(DIO_DDRB_REG,pin);
    28ca:	a7 e3       	ldi	r26, 0x37	; 55
    28cc:	b0 e0       	ldi	r27, 0x00	; 0
    28ce:	e7 e3       	ldi	r30, 0x37	; 55
    28d0:	f0 e0       	ldi	r31, 0x00	; 0
    28d2:	80 81       	ld	r24, Z
    28d4:	48 2f       	mov	r20, r24
    28d6:	8a 81       	ldd	r24, Y+2	; 0x02
    28d8:	28 2f       	mov	r18, r24
    28da:	30 e0       	ldi	r19, 0x00	; 0
    28dc:	81 e0       	ldi	r24, 0x01	; 1
    28de:	90 e0       	ldi	r25, 0x00	; 0
    28e0:	02 2e       	mov	r0, r18
    28e2:	02 c0       	rjmp	.+4      	; 0x28e8 <Dio_ConfigChannel+0xfe>
    28e4:	88 0f       	add	r24, r24
    28e6:	99 1f       	adc	r25, r25
    28e8:	0a 94       	dec	r0
    28ea:	e2 f7       	brpl	.-8      	; 0x28e4 <Dio_ConfigChannel+0xfa>
    28ec:	84 2b       	or	r24, r20
    28ee:	8c 93       	st	X, r24
    28f0:	57 c0       	rjmp	.+174    	; 0x29a0 <Dio_ConfigChannel+0x1b6>
		}
		break;

	case DIO_PORTC:
		if (direction == INPUT)
    28f2:	8b 81       	ldd	r24, Y+3	; 0x03
    28f4:	88 23       	and	r24, r24
    28f6:	a9 f4       	brne	.+42     	; 0x2922 <Dio_ConfigChannel+0x138>
		{
			CLR_BIT(DIO_DDRC_REG,pin);
    28f8:	a4 e3       	ldi	r26, 0x34	; 52
    28fa:	b0 e0       	ldi	r27, 0x00	; 0
    28fc:	e4 e3       	ldi	r30, 0x34	; 52
    28fe:	f0 e0       	ldi	r31, 0x00	; 0
    2900:	80 81       	ld	r24, Z
    2902:	48 2f       	mov	r20, r24
    2904:	8a 81       	ldd	r24, Y+2	; 0x02
    2906:	28 2f       	mov	r18, r24
    2908:	30 e0       	ldi	r19, 0x00	; 0
    290a:	81 e0       	ldi	r24, 0x01	; 1
    290c:	90 e0       	ldi	r25, 0x00	; 0
    290e:	02 2e       	mov	r0, r18
    2910:	02 c0       	rjmp	.+4      	; 0x2916 <Dio_ConfigChannel+0x12c>
    2912:	88 0f       	add	r24, r24
    2914:	99 1f       	adc	r25, r25
    2916:	0a 94       	dec	r0
    2918:	e2 f7       	brpl	.-8      	; 0x2912 <Dio_ConfigChannel+0x128>
    291a:	80 95       	com	r24
    291c:	84 23       	and	r24, r20
    291e:	8c 93       	st	X, r24
    2920:	3f c0       	rjmp	.+126    	; 0x29a0 <Dio_ConfigChannel+0x1b6>
		}
		else
		{
			SET_BIT(DIO_DDRC_REG,pin);
    2922:	a4 e3       	ldi	r26, 0x34	; 52
    2924:	b0 e0       	ldi	r27, 0x00	; 0
    2926:	e4 e3       	ldi	r30, 0x34	; 52
    2928:	f0 e0       	ldi	r31, 0x00	; 0
    292a:	80 81       	ld	r24, Z
    292c:	48 2f       	mov	r20, r24
    292e:	8a 81       	ldd	r24, Y+2	; 0x02
    2930:	28 2f       	mov	r18, r24
    2932:	30 e0       	ldi	r19, 0x00	; 0
    2934:	81 e0       	ldi	r24, 0x01	; 1
    2936:	90 e0       	ldi	r25, 0x00	; 0
    2938:	02 2e       	mov	r0, r18
    293a:	02 c0       	rjmp	.+4      	; 0x2940 <Dio_ConfigChannel+0x156>
    293c:	88 0f       	add	r24, r24
    293e:	99 1f       	adc	r25, r25
    2940:	0a 94       	dec	r0
    2942:	e2 f7       	brpl	.-8      	; 0x293c <Dio_ConfigChannel+0x152>
    2944:	84 2b       	or	r24, r20
    2946:	8c 93       	st	X, r24
    2948:	2b c0       	rjmp	.+86     	; 0x29a0 <Dio_ConfigChannel+0x1b6>
		}
		break;

	case DIO_PORTD:
		if (direction == INPUT)
    294a:	8b 81       	ldd	r24, Y+3	; 0x03
    294c:	88 23       	and	r24, r24
    294e:	a9 f4       	brne	.+42     	; 0x297a <Dio_ConfigChannel+0x190>
		{
			CLR_BIT(DIO_DDRD_REG,pin);
    2950:	a1 e3       	ldi	r26, 0x31	; 49
    2952:	b0 e0       	ldi	r27, 0x00	; 0
    2954:	e1 e3       	ldi	r30, 0x31	; 49
    2956:	f0 e0       	ldi	r31, 0x00	; 0
    2958:	80 81       	ld	r24, Z
    295a:	48 2f       	mov	r20, r24
    295c:	8a 81       	ldd	r24, Y+2	; 0x02
    295e:	28 2f       	mov	r18, r24
    2960:	30 e0       	ldi	r19, 0x00	; 0
    2962:	81 e0       	ldi	r24, 0x01	; 1
    2964:	90 e0       	ldi	r25, 0x00	; 0
    2966:	02 2e       	mov	r0, r18
    2968:	02 c0       	rjmp	.+4      	; 0x296e <Dio_ConfigChannel+0x184>
    296a:	88 0f       	add	r24, r24
    296c:	99 1f       	adc	r25, r25
    296e:	0a 94       	dec	r0
    2970:	e2 f7       	brpl	.-8      	; 0x296a <Dio_ConfigChannel+0x180>
    2972:	80 95       	com	r24
    2974:	84 23       	and	r24, r20
    2976:	8c 93       	st	X, r24
    2978:	13 c0       	rjmp	.+38     	; 0x29a0 <Dio_ConfigChannel+0x1b6>
		}
		else
		{
			SET_BIT(DIO_DDRD_REG,pin);
    297a:	a1 e3       	ldi	r26, 0x31	; 49
    297c:	b0 e0       	ldi	r27, 0x00	; 0
    297e:	e1 e3       	ldi	r30, 0x31	; 49
    2980:	f0 e0       	ldi	r31, 0x00	; 0
    2982:	80 81       	ld	r24, Z
    2984:	48 2f       	mov	r20, r24
    2986:	8a 81       	ldd	r24, Y+2	; 0x02
    2988:	28 2f       	mov	r18, r24
    298a:	30 e0       	ldi	r19, 0x00	; 0
    298c:	81 e0       	ldi	r24, 0x01	; 1
    298e:	90 e0       	ldi	r25, 0x00	; 0
    2990:	02 2e       	mov	r0, r18
    2992:	02 c0       	rjmp	.+4      	; 0x2998 <Dio_ConfigChannel+0x1ae>
    2994:	88 0f       	add	r24, r24
    2996:	99 1f       	adc	r25, r25
    2998:	0a 94       	dec	r0
    299a:	e2 f7       	brpl	.-8      	; 0x2994 <Dio_ConfigChannel+0x1aa>
    299c:	84 2b       	or	r24, r20
    299e:	8c 93       	st	X, r24
		}

		break;
	}
}
    29a0:	0f 90       	pop	r0
    29a2:	0f 90       	pop	r0
    29a4:	0f 90       	pop	r0
    29a6:	0f 90       	pop	r0
    29a8:	0f 90       	pop	r0
    29aa:	cf 91       	pop	r28
    29ac:	df 91       	pop	r29
    29ae:	08 95       	ret

000029b0 <Dio_WriteChannel>:
void Dio_WriteChannel(port_type port,pin_type pin,level_type level)
{
    29b0:	df 93       	push	r29
    29b2:	cf 93       	push	r28
    29b4:	00 d0       	rcall	.+0      	; 0x29b6 <Dio_WriteChannel+0x6>
    29b6:	00 d0       	rcall	.+0      	; 0x29b8 <Dio_WriteChannel+0x8>
    29b8:	0f 92       	push	r0
    29ba:	cd b7       	in	r28, 0x3d	; 61
    29bc:	de b7       	in	r29, 0x3e	; 62
    29be:	89 83       	std	Y+1, r24	; 0x01
    29c0:	6a 83       	std	Y+2, r22	; 0x02
    29c2:	4b 83       	std	Y+3, r20	; 0x03
	switch (port)
    29c4:	89 81       	ldd	r24, Y+1	; 0x01
    29c6:	28 2f       	mov	r18, r24
    29c8:	30 e0       	ldi	r19, 0x00	; 0
    29ca:	3d 83       	std	Y+5, r19	; 0x05
    29cc:	2c 83       	std	Y+4, r18	; 0x04
    29ce:	8c 81       	ldd	r24, Y+4	; 0x04
    29d0:	9d 81       	ldd	r25, Y+5	; 0x05
    29d2:	81 30       	cpi	r24, 0x01	; 1
    29d4:	91 05       	cpc	r25, r1
    29d6:	09 f4       	brne	.+2      	; 0x29da <Dio_WriteChannel+0x2a>
    29d8:	43 c0       	rjmp	.+134    	; 0x2a60 <Dio_WriteChannel+0xb0>
    29da:	2c 81       	ldd	r18, Y+4	; 0x04
    29dc:	3d 81       	ldd	r19, Y+5	; 0x05
    29de:	22 30       	cpi	r18, 0x02	; 2
    29e0:	31 05       	cpc	r19, r1
    29e2:	2c f4       	brge	.+10     	; 0x29ee <Dio_WriteChannel+0x3e>
    29e4:	8c 81       	ldd	r24, Y+4	; 0x04
    29e6:	9d 81       	ldd	r25, Y+5	; 0x05
    29e8:	00 97       	sbiw	r24, 0x00	; 0
    29ea:	71 f0       	breq	.+28     	; 0x2a08 <Dio_WriteChannel+0x58>
    29ec:	bc c0       	rjmp	.+376    	; 0x2b66 <Dio_WriteChannel+0x1b6>
    29ee:	2c 81       	ldd	r18, Y+4	; 0x04
    29f0:	3d 81       	ldd	r19, Y+5	; 0x05
    29f2:	22 30       	cpi	r18, 0x02	; 2
    29f4:	31 05       	cpc	r19, r1
    29f6:	09 f4       	brne	.+2      	; 0x29fa <Dio_WriteChannel+0x4a>
    29f8:	5f c0       	rjmp	.+190    	; 0x2ab8 <Dio_WriteChannel+0x108>
    29fa:	8c 81       	ldd	r24, Y+4	; 0x04
    29fc:	9d 81       	ldd	r25, Y+5	; 0x05
    29fe:	83 30       	cpi	r24, 0x03	; 3
    2a00:	91 05       	cpc	r25, r1
    2a02:	09 f4       	brne	.+2      	; 0x2a06 <Dio_WriteChannel+0x56>
    2a04:	85 c0       	rjmp	.+266    	; 0x2b10 <Dio_WriteChannel+0x160>
    2a06:	af c0       	rjmp	.+350    	; 0x2b66 <Dio_WriteChannel+0x1b6>
	{
	case DIO_PORTA:
		if (level == STD_HIGH)
    2a08:	8b 81       	ldd	r24, Y+3	; 0x03
    2a0a:	81 30       	cpi	r24, 0x01	; 1
    2a0c:	a1 f4       	brne	.+40     	; 0x2a36 <Dio_WriteChannel+0x86>
		{
			SET_BIT(DIO_PORTA_REG,pin);
    2a0e:	ab e3       	ldi	r26, 0x3B	; 59
    2a10:	b0 e0       	ldi	r27, 0x00	; 0
    2a12:	eb e3       	ldi	r30, 0x3B	; 59
    2a14:	f0 e0       	ldi	r31, 0x00	; 0
    2a16:	80 81       	ld	r24, Z
    2a18:	48 2f       	mov	r20, r24
    2a1a:	8a 81       	ldd	r24, Y+2	; 0x02
    2a1c:	28 2f       	mov	r18, r24
    2a1e:	30 e0       	ldi	r19, 0x00	; 0
    2a20:	81 e0       	ldi	r24, 0x01	; 1
    2a22:	90 e0       	ldi	r25, 0x00	; 0
    2a24:	02 2e       	mov	r0, r18
    2a26:	02 c0       	rjmp	.+4      	; 0x2a2c <Dio_WriteChannel+0x7c>
    2a28:	88 0f       	add	r24, r24
    2a2a:	99 1f       	adc	r25, r25
    2a2c:	0a 94       	dec	r0
    2a2e:	e2 f7       	brpl	.-8      	; 0x2a28 <Dio_WriteChannel+0x78>
    2a30:	84 2b       	or	r24, r20
    2a32:	8c 93       	st	X, r24
    2a34:	98 c0       	rjmp	.+304    	; 0x2b66 <Dio_WriteChannel+0x1b6>
		}
		else
		{
			CLR_BIT(DIO_PORTA_REG,pin);
    2a36:	ab e3       	ldi	r26, 0x3B	; 59
    2a38:	b0 e0       	ldi	r27, 0x00	; 0
    2a3a:	eb e3       	ldi	r30, 0x3B	; 59
    2a3c:	f0 e0       	ldi	r31, 0x00	; 0
    2a3e:	80 81       	ld	r24, Z
    2a40:	48 2f       	mov	r20, r24
    2a42:	8a 81       	ldd	r24, Y+2	; 0x02
    2a44:	28 2f       	mov	r18, r24
    2a46:	30 e0       	ldi	r19, 0x00	; 0
    2a48:	81 e0       	ldi	r24, 0x01	; 1
    2a4a:	90 e0       	ldi	r25, 0x00	; 0
    2a4c:	02 2e       	mov	r0, r18
    2a4e:	02 c0       	rjmp	.+4      	; 0x2a54 <Dio_WriteChannel+0xa4>
    2a50:	88 0f       	add	r24, r24
    2a52:	99 1f       	adc	r25, r25
    2a54:	0a 94       	dec	r0
    2a56:	e2 f7       	brpl	.-8      	; 0x2a50 <Dio_WriteChannel+0xa0>
    2a58:	80 95       	com	r24
    2a5a:	84 23       	and	r24, r20
    2a5c:	8c 93       	st	X, r24
    2a5e:	83 c0       	rjmp	.+262    	; 0x2b66 <Dio_WriteChannel+0x1b6>
		}
		break;

	case DIO_PORTB:
		if (level == STD_HIGH)
    2a60:	8b 81       	ldd	r24, Y+3	; 0x03
    2a62:	81 30       	cpi	r24, 0x01	; 1
    2a64:	a1 f4       	brne	.+40     	; 0x2a8e <Dio_WriteChannel+0xde>
		{
			SET_BIT(DIO_PORTB_REG,pin);
    2a66:	a8 e3       	ldi	r26, 0x38	; 56
    2a68:	b0 e0       	ldi	r27, 0x00	; 0
    2a6a:	e8 e3       	ldi	r30, 0x38	; 56
    2a6c:	f0 e0       	ldi	r31, 0x00	; 0
    2a6e:	80 81       	ld	r24, Z
    2a70:	48 2f       	mov	r20, r24
    2a72:	8a 81       	ldd	r24, Y+2	; 0x02
    2a74:	28 2f       	mov	r18, r24
    2a76:	30 e0       	ldi	r19, 0x00	; 0
    2a78:	81 e0       	ldi	r24, 0x01	; 1
    2a7a:	90 e0       	ldi	r25, 0x00	; 0
    2a7c:	02 2e       	mov	r0, r18
    2a7e:	02 c0       	rjmp	.+4      	; 0x2a84 <Dio_WriteChannel+0xd4>
    2a80:	88 0f       	add	r24, r24
    2a82:	99 1f       	adc	r25, r25
    2a84:	0a 94       	dec	r0
    2a86:	e2 f7       	brpl	.-8      	; 0x2a80 <Dio_WriteChannel+0xd0>
    2a88:	84 2b       	or	r24, r20
    2a8a:	8c 93       	st	X, r24
    2a8c:	6c c0       	rjmp	.+216    	; 0x2b66 <Dio_WriteChannel+0x1b6>
		}
		else
		{
			CLR_BIT(DIO_PORTB_REG,pin);
    2a8e:	a8 e3       	ldi	r26, 0x38	; 56
    2a90:	b0 e0       	ldi	r27, 0x00	; 0
    2a92:	e8 e3       	ldi	r30, 0x38	; 56
    2a94:	f0 e0       	ldi	r31, 0x00	; 0
    2a96:	80 81       	ld	r24, Z
    2a98:	48 2f       	mov	r20, r24
    2a9a:	8a 81       	ldd	r24, Y+2	; 0x02
    2a9c:	28 2f       	mov	r18, r24
    2a9e:	30 e0       	ldi	r19, 0x00	; 0
    2aa0:	81 e0       	ldi	r24, 0x01	; 1
    2aa2:	90 e0       	ldi	r25, 0x00	; 0
    2aa4:	02 2e       	mov	r0, r18
    2aa6:	02 c0       	rjmp	.+4      	; 0x2aac <Dio_WriteChannel+0xfc>
    2aa8:	88 0f       	add	r24, r24
    2aaa:	99 1f       	adc	r25, r25
    2aac:	0a 94       	dec	r0
    2aae:	e2 f7       	brpl	.-8      	; 0x2aa8 <Dio_WriteChannel+0xf8>
    2ab0:	80 95       	com	r24
    2ab2:	84 23       	and	r24, r20
    2ab4:	8c 93       	st	X, r24
    2ab6:	57 c0       	rjmp	.+174    	; 0x2b66 <Dio_WriteChannel+0x1b6>
		}
		break;

	case DIO_PORTC:
		if (level == STD_HIGH)
    2ab8:	8b 81       	ldd	r24, Y+3	; 0x03
    2aba:	81 30       	cpi	r24, 0x01	; 1
    2abc:	a1 f4       	brne	.+40     	; 0x2ae6 <Dio_WriteChannel+0x136>
		{
			SET_BIT(DIO_PORTC_REG,pin);
    2abe:	a5 e3       	ldi	r26, 0x35	; 53
    2ac0:	b0 e0       	ldi	r27, 0x00	; 0
    2ac2:	e5 e3       	ldi	r30, 0x35	; 53
    2ac4:	f0 e0       	ldi	r31, 0x00	; 0
    2ac6:	80 81       	ld	r24, Z
    2ac8:	48 2f       	mov	r20, r24
    2aca:	8a 81       	ldd	r24, Y+2	; 0x02
    2acc:	28 2f       	mov	r18, r24
    2ace:	30 e0       	ldi	r19, 0x00	; 0
    2ad0:	81 e0       	ldi	r24, 0x01	; 1
    2ad2:	90 e0       	ldi	r25, 0x00	; 0
    2ad4:	02 2e       	mov	r0, r18
    2ad6:	02 c0       	rjmp	.+4      	; 0x2adc <Dio_WriteChannel+0x12c>
    2ad8:	88 0f       	add	r24, r24
    2ada:	99 1f       	adc	r25, r25
    2adc:	0a 94       	dec	r0
    2ade:	e2 f7       	brpl	.-8      	; 0x2ad8 <Dio_WriteChannel+0x128>
    2ae0:	84 2b       	or	r24, r20
    2ae2:	8c 93       	st	X, r24
    2ae4:	40 c0       	rjmp	.+128    	; 0x2b66 <Dio_WriteChannel+0x1b6>
		}
		else
		{
			CLR_BIT(DIO_PORTC_REG,pin);
    2ae6:	a5 e3       	ldi	r26, 0x35	; 53
    2ae8:	b0 e0       	ldi	r27, 0x00	; 0
    2aea:	e5 e3       	ldi	r30, 0x35	; 53
    2aec:	f0 e0       	ldi	r31, 0x00	; 0
    2aee:	80 81       	ld	r24, Z
    2af0:	48 2f       	mov	r20, r24
    2af2:	8a 81       	ldd	r24, Y+2	; 0x02
    2af4:	28 2f       	mov	r18, r24
    2af6:	30 e0       	ldi	r19, 0x00	; 0
    2af8:	81 e0       	ldi	r24, 0x01	; 1
    2afa:	90 e0       	ldi	r25, 0x00	; 0
    2afc:	02 2e       	mov	r0, r18
    2afe:	02 c0       	rjmp	.+4      	; 0x2b04 <Dio_WriteChannel+0x154>
    2b00:	88 0f       	add	r24, r24
    2b02:	99 1f       	adc	r25, r25
    2b04:	0a 94       	dec	r0
    2b06:	e2 f7       	brpl	.-8      	; 0x2b00 <Dio_WriteChannel+0x150>
    2b08:	80 95       	com	r24
    2b0a:	84 23       	and	r24, r20
    2b0c:	8c 93       	st	X, r24
    2b0e:	2b c0       	rjmp	.+86     	; 0x2b66 <Dio_WriteChannel+0x1b6>
		}
		break;

	case DIO_PORTD:
		if (level == STD_HIGH)
    2b10:	8b 81       	ldd	r24, Y+3	; 0x03
    2b12:	81 30       	cpi	r24, 0x01	; 1
    2b14:	a1 f4       	brne	.+40     	; 0x2b3e <Dio_WriteChannel+0x18e>
		{
			SET_BIT(DIO_PORTD_REG,pin);
    2b16:	a2 e3       	ldi	r26, 0x32	; 50
    2b18:	b0 e0       	ldi	r27, 0x00	; 0
    2b1a:	e2 e3       	ldi	r30, 0x32	; 50
    2b1c:	f0 e0       	ldi	r31, 0x00	; 0
    2b1e:	80 81       	ld	r24, Z
    2b20:	48 2f       	mov	r20, r24
    2b22:	8a 81       	ldd	r24, Y+2	; 0x02
    2b24:	28 2f       	mov	r18, r24
    2b26:	30 e0       	ldi	r19, 0x00	; 0
    2b28:	81 e0       	ldi	r24, 0x01	; 1
    2b2a:	90 e0       	ldi	r25, 0x00	; 0
    2b2c:	02 2e       	mov	r0, r18
    2b2e:	02 c0       	rjmp	.+4      	; 0x2b34 <Dio_WriteChannel+0x184>
    2b30:	88 0f       	add	r24, r24
    2b32:	99 1f       	adc	r25, r25
    2b34:	0a 94       	dec	r0
    2b36:	e2 f7       	brpl	.-8      	; 0x2b30 <Dio_WriteChannel+0x180>
    2b38:	84 2b       	or	r24, r20
    2b3a:	8c 93       	st	X, r24
    2b3c:	14 c0       	rjmp	.+40     	; 0x2b66 <Dio_WriteChannel+0x1b6>
		}
		else
		{
			CLR_BIT(DIO_PORTD_REG,pin);
    2b3e:	a2 e3       	ldi	r26, 0x32	; 50
    2b40:	b0 e0       	ldi	r27, 0x00	; 0
    2b42:	e2 e3       	ldi	r30, 0x32	; 50
    2b44:	f0 e0       	ldi	r31, 0x00	; 0
    2b46:	80 81       	ld	r24, Z
    2b48:	48 2f       	mov	r20, r24
    2b4a:	8a 81       	ldd	r24, Y+2	; 0x02
    2b4c:	28 2f       	mov	r18, r24
    2b4e:	30 e0       	ldi	r19, 0x00	; 0
    2b50:	81 e0       	ldi	r24, 0x01	; 1
    2b52:	90 e0       	ldi	r25, 0x00	; 0
    2b54:	02 2e       	mov	r0, r18
    2b56:	02 c0       	rjmp	.+4      	; 0x2b5c <Dio_WriteChannel+0x1ac>
    2b58:	88 0f       	add	r24, r24
    2b5a:	99 1f       	adc	r25, r25
    2b5c:	0a 94       	dec	r0
    2b5e:	e2 f7       	brpl	.-8      	; 0x2b58 <Dio_WriteChannel+0x1a8>
    2b60:	80 95       	com	r24
    2b62:	84 23       	and	r24, r20
    2b64:	8c 93       	st	X, r24
		}
		break;
	}
}
    2b66:	0f 90       	pop	r0
    2b68:	0f 90       	pop	r0
    2b6a:	0f 90       	pop	r0
    2b6c:	0f 90       	pop	r0
    2b6e:	0f 90       	pop	r0
    2b70:	cf 91       	pop	r28
    2b72:	df 91       	pop	r29
    2b74:	08 95       	ret

00002b76 <Dio_WriteGroup>:
void Dio_WriteGroup(port_type port,u8 mask,u8 data)
{
    2b76:	df 93       	push	r29
    2b78:	cf 93       	push	r28
    2b7a:	00 d0       	rcall	.+0      	; 0x2b7c <Dio_WriteGroup+0x6>
    2b7c:	00 d0       	rcall	.+0      	; 0x2b7e <Dio_WriteGroup+0x8>
    2b7e:	0f 92       	push	r0
    2b80:	cd b7       	in	r28, 0x3d	; 61
    2b82:	de b7       	in	r29, 0x3e	; 62
    2b84:	89 83       	std	Y+1, r24	; 0x01
    2b86:	6a 83       	std	Y+2, r22	; 0x02
    2b88:	4b 83       	std	Y+3, r20	; 0x03
	switch(port)
    2b8a:	89 81       	ldd	r24, Y+1	; 0x01
    2b8c:	28 2f       	mov	r18, r24
    2b8e:	30 e0       	ldi	r19, 0x00	; 0
    2b90:	3d 83       	std	Y+5, r19	; 0x05
    2b92:	2c 83       	std	Y+4, r18	; 0x04
    2b94:	8c 81       	ldd	r24, Y+4	; 0x04
    2b96:	9d 81       	ldd	r25, Y+5	; 0x05
    2b98:	81 30       	cpi	r24, 0x01	; 1
    2b9a:	91 05       	cpc	r25, r1
    2b9c:	29 f1       	breq	.+74     	; 0x2be8 <Dio_WriteGroup+0x72>
    2b9e:	2c 81       	ldd	r18, Y+4	; 0x04
    2ba0:	3d 81       	ldd	r19, Y+5	; 0x05
    2ba2:	22 30       	cpi	r18, 0x02	; 2
    2ba4:	31 05       	cpc	r19, r1
    2ba6:	2c f4       	brge	.+10     	; 0x2bb2 <Dio_WriteGroup+0x3c>
    2ba8:	8c 81       	ldd	r24, Y+4	; 0x04
    2baa:	9d 81       	ldd	r25, Y+5	; 0x05
    2bac:	00 97       	sbiw	r24, 0x00	; 0
    2bae:	61 f0       	breq	.+24     	; 0x2bc8 <Dio_WriteGroup+0x52>
    2bb0:	4a c0       	rjmp	.+148    	; 0x2c46 <Dio_WriteGroup+0xd0>
    2bb2:	2c 81       	ldd	r18, Y+4	; 0x04
    2bb4:	3d 81       	ldd	r19, Y+5	; 0x05
    2bb6:	22 30       	cpi	r18, 0x02	; 2
    2bb8:	31 05       	cpc	r19, r1
    2bba:	31 f1       	breq	.+76     	; 0x2c08 <Dio_WriteGroup+0x92>
    2bbc:	8c 81       	ldd	r24, Y+4	; 0x04
    2bbe:	9d 81       	ldd	r25, Y+5	; 0x05
    2bc0:	83 30       	cpi	r24, 0x03	; 3
    2bc2:	91 05       	cpc	r25, r1
    2bc4:	89 f1       	breq	.+98     	; 0x2c28 <Dio_WriteGroup+0xb2>
    2bc6:	3f c0       	rjmp	.+126    	; 0x2c46 <Dio_WriteGroup+0xd0>
	{
	case DIO_PORTA:
		DIO_PORTA_REG = (DIO_PORTA_REG&~mask)|(data & mask);
    2bc8:	ab e3       	ldi	r26, 0x3B	; 59
    2bca:	b0 e0       	ldi	r27, 0x00	; 0
    2bcc:	eb e3       	ldi	r30, 0x3B	; 59
    2bce:	f0 e0       	ldi	r31, 0x00	; 0
    2bd0:	80 81       	ld	r24, Z
    2bd2:	98 2f       	mov	r25, r24
    2bd4:	8a 81       	ldd	r24, Y+2	; 0x02
    2bd6:	80 95       	com	r24
    2bd8:	29 2f       	mov	r18, r25
    2bda:	28 23       	and	r18, r24
    2bdc:	9b 81       	ldd	r25, Y+3	; 0x03
    2bde:	8a 81       	ldd	r24, Y+2	; 0x02
    2be0:	89 23       	and	r24, r25
    2be2:	82 2b       	or	r24, r18
    2be4:	8c 93       	st	X, r24
    2be6:	2f c0       	rjmp	.+94     	; 0x2c46 <Dio_WriteGroup+0xd0>
		break;

	case DIO_PORTB:
		DIO_PORTB_REG = (DIO_PORTA_REG&~mask)|(data & mask);
    2be8:	a8 e3       	ldi	r26, 0x38	; 56
    2bea:	b0 e0       	ldi	r27, 0x00	; 0
    2bec:	eb e3       	ldi	r30, 0x3B	; 59
    2bee:	f0 e0       	ldi	r31, 0x00	; 0
    2bf0:	80 81       	ld	r24, Z
    2bf2:	98 2f       	mov	r25, r24
    2bf4:	8a 81       	ldd	r24, Y+2	; 0x02
    2bf6:	80 95       	com	r24
    2bf8:	29 2f       	mov	r18, r25
    2bfa:	28 23       	and	r18, r24
    2bfc:	9b 81       	ldd	r25, Y+3	; 0x03
    2bfe:	8a 81       	ldd	r24, Y+2	; 0x02
    2c00:	89 23       	and	r24, r25
    2c02:	82 2b       	or	r24, r18
    2c04:	8c 93       	st	X, r24
    2c06:	1f c0       	rjmp	.+62     	; 0x2c46 <Dio_WriteGroup+0xd0>
		break;

	case DIO_PORTC:
		DIO_PORTC_REG = (DIO_PORTA_REG&~mask)|(data & mask);
    2c08:	a5 e3       	ldi	r26, 0x35	; 53
    2c0a:	b0 e0       	ldi	r27, 0x00	; 0
    2c0c:	eb e3       	ldi	r30, 0x3B	; 59
    2c0e:	f0 e0       	ldi	r31, 0x00	; 0
    2c10:	80 81       	ld	r24, Z
    2c12:	98 2f       	mov	r25, r24
    2c14:	8a 81       	ldd	r24, Y+2	; 0x02
    2c16:	80 95       	com	r24
    2c18:	29 2f       	mov	r18, r25
    2c1a:	28 23       	and	r18, r24
    2c1c:	9b 81       	ldd	r25, Y+3	; 0x03
    2c1e:	8a 81       	ldd	r24, Y+2	; 0x02
    2c20:	89 23       	and	r24, r25
    2c22:	82 2b       	or	r24, r18
    2c24:	8c 93       	st	X, r24
    2c26:	0f c0       	rjmp	.+30     	; 0x2c46 <Dio_WriteGroup+0xd0>
		break;

	case DIO_PORTD:
		DIO_PORTD_REG = (DIO_PORTA_REG&~mask)|(data & mask);
    2c28:	a2 e3       	ldi	r26, 0x32	; 50
    2c2a:	b0 e0       	ldi	r27, 0x00	; 0
    2c2c:	eb e3       	ldi	r30, 0x3B	; 59
    2c2e:	f0 e0       	ldi	r31, 0x00	; 0
    2c30:	80 81       	ld	r24, Z
    2c32:	98 2f       	mov	r25, r24
    2c34:	8a 81       	ldd	r24, Y+2	; 0x02
    2c36:	80 95       	com	r24
    2c38:	29 2f       	mov	r18, r25
    2c3a:	28 23       	and	r18, r24
    2c3c:	9b 81       	ldd	r25, Y+3	; 0x03
    2c3e:	8a 81       	ldd	r24, Y+2	; 0x02
    2c40:	89 23       	and	r24, r25
    2c42:	82 2b       	or	r24, r18
    2c44:	8c 93       	st	X, r24
		break;
	}
}
    2c46:	0f 90       	pop	r0
    2c48:	0f 90       	pop	r0
    2c4a:	0f 90       	pop	r0
    2c4c:	0f 90       	pop	r0
    2c4e:	0f 90       	pop	r0
    2c50:	cf 91       	pop	r28
    2c52:	df 91       	pop	r29
    2c54:	08 95       	ret

00002c56 <Dio_TogglChannel>:
void Dio_TogglChannel(port_type port,pin_type pin)
{
    2c56:	df 93       	push	r29
    2c58:	cf 93       	push	r28
    2c5a:	00 d0       	rcall	.+0      	; 0x2c5c <Dio_TogglChannel+0x6>
    2c5c:	00 d0       	rcall	.+0      	; 0x2c5e <Dio_TogglChannel+0x8>
    2c5e:	cd b7       	in	r28, 0x3d	; 61
    2c60:	de b7       	in	r29, 0x3e	; 62
    2c62:	89 83       	std	Y+1, r24	; 0x01
    2c64:	6a 83       	std	Y+2, r22	; 0x02
	switch (port)
    2c66:	89 81       	ldd	r24, Y+1	; 0x01
    2c68:	28 2f       	mov	r18, r24
    2c6a:	30 e0       	ldi	r19, 0x00	; 0
    2c6c:	3c 83       	std	Y+4, r19	; 0x04
    2c6e:	2b 83       	std	Y+3, r18	; 0x03
    2c70:	8b 81       	ldd	r24, Y+3	; 0x03
    2c72:	9c 81       	ldd	r25, Y+4	; 0x04
    2c74:	81 30       	cpi	r24, 0x01	; 1
    2c76:	91 05       	cpc	r25, r1
    2c78:	49 f1       	breq	.+82     	; 0x2ccc <Dio_TogglChannel+0x76>
    2c7a:	2b 81       	ldd	r18, Y+3	; 0x03
    2c7c:	3c 81       	ldd	r19, Y+4	; 0x04
    2c7e:	22 30       	cpi	r18, 0x02	; 2
    2c80:	31 05       	cpc	r19, r1
    2c82:	2c f4       	brge	.+10     	; 0x2c8e <Dio_TogglChannel+0x38>
    2c84:	8b 81       	ldd	r24, Y+3	; 0x03
    2c86:	9c 81       	ldd	r25, Y+4	; 0x04
    2c88:	00 97       	sbiw	r24, 0x00	; 0
    2c8a:	61 f0       	breq	.+24     	; 0x2ca4 <Dio_TogglChannel+0x4e>
    2c8c:	5a c0       	rjmp	.+180    	; 0x2d42 <Dio_TogglChannel+0xec>
    2c8e:	2b 81       	ldd	r18, Y+3	; 0x03
    2c90:	3c 81       	ldd	r19, Y+4	; 0x04
    2c92:	22 30       	cpi	r18, 0x02	; 2
    2c94:	31 05       	cpc	r19, r1
    2c96:	71 f1       	breq	.+92     	; 0x2cf4 <Dio_TogglChannel+0x9e>
    2c98:	8b 81       	ldd	r24, Y+3	; 0x03
    2c9a:	9c 81       	ldd	r25, Y+4	; 0x04
    2c9c:	83 30       	cpi	r24, 0x03	; 3
    2c9e:	91 05       	cpc	r25, r1
    2ca0:	e9 f1       	breq	.+122    	; 0x2d1c <Dio_TogglChannel+0xc6>
    2ca2:	4f c0       	rjmp	.+158    	; 0x2d42 <Dio_TogglChannel+0xec>
	{
	case DIO_PORTA:
		TOGGLE_BIT(DIO_PORTA_REG,pin);
    2ca4:	ab e3       	ldi	r26, 0x3B	; 59
    2ca6:	b0 e0       	ldi	r27, 0x00	; 0
    2ca8:	eb e3       	ldi	r30, 0x3B	; 59
    2caa:	f0 e0       	ldi	r31, 0x00	; 0
    2cac:	80 81       	ld	r24, Z
    2cae:	48 2f       	mov	r20, r24
    2cb0:	8a 81       	ldd	r24, Y+2	; 0x02
    2cb2:	28 2f       	mov	r18, r24
    2cb4:	30 e0       	ldi	r19, 0x00	; 0
    2cb6:	81 e0       	ldi	r24, 0x01	; 1
    2cb8:	90 e0       	ldi	r25, 0x00	; 0
    2cba:	02 2e       	mov	r0, r18
    2cbc:	02 c0       	rjmp	.+4      	; 0x2cc2 <Dio_TogglChannel+0x6c>
    2cbe:	88 0f       	add	r24, r24
    2cc0:	99 1f       	adc	r25, r25
    2cc2:	0a 94       	dec	r0
    2cc4:	e2 f7       	brpl	.-8      	; 0x2cbe <Dio_TogglChannel+0x68>
    2cc6:	84 27       	eor	r24, r20
    2cc8:	8c 93       	st	X, r24
    2cca:	3b c0       	rjmp	.+118    	; 0x2d42 <Dio_TogglChannel+0xec>
		break;

	case DIO_PORTB:
		TOGGLE_BIT(DIO_PORTB_REG,pin);
    2ccc:	a8 e3       	ldi	r26, 0x38	; 56
    2cce:	b0 e0       	ldi	r27, 0x00	; 0
    2cd0:	e8 e3       	ldi	r30, 0x38	; 56
    2cd2:	f0 e0       	ldi	r31, 0x00	; 0
    2cd4:	80 81       	ld	r24, Z
    2cd6:	48 2f       	mov	r20, r24
    2cd8:	8a 81       	ldd	r24, Y+2	; 0x02
    2cda:	28 2f       	mov	r18, r24
    2cdc:	30 e0       	ldi	r19, 0x00	; 0
    2cde:	81 e0       	ldi	r24, 0x01	; 1
    2ce0:	90 e0       	ldi	r25, 0x00	; 0
    2ce2:	02 2e       	mov	r0, r18
    2ce4:	02 c0       	rjmp	.+4      	; 0x2cea <Dio_TogglChannel+0x94>
    2ce6:	88 0f       	add	r24, r24
    2ce8:	99 1f       	adc	r25, r25
    2cea:	0a 94       	dec	r0
    2cec:	e2 f7       	brpl	.-8      	; 0x2ce6 <Dio_TogglChannel+0x90>
    2cee:	84 27       	eor	r24, r20
    2cf0:	8c 93       	st	X, r24
    2cf2:	27 c0       	rjmp	.+78     	; 0x2d42 <Dio_TogglChannel+0xec>
		break;

	case DIO_PORTC:
		TOGGLE_BIT(DIO_PORTC_REG,pin);
    2cf4:	a5 e3       	ldi	r26, 0x35	; 53
    2cf6:	b0 e0       	ldi	r27, 0x00	; 0
    2cf8:	e5 e3       	ldi	r30, 0x35	; 53
    2cfa:	f0 e0       	ldi	r31, 0x00	; 0
    2cfc:	80 81       	ld	r24, Z
    2cfe:	48 2f       	mov	r20, r24
    2d00:	8a 81       	ldd	r24, Y+2	; 0x02
    2d02:	28 2f       	mov	r18, r24
    2d04:	30 e0       	ldi	r19, 0x00	; 0
    2d06:	81 e0       	ldi	r24, 0x01	; 1
    2d08:	90 e0       	ldi	r25, 0x00	; 0
    2d0a:	02 2e       	mov	r0, r18
    2d0c:	02 c0       	rjmp	.+4      	; 0x2d12 <Dio_TogglChannel+0xbc>
    2d0e:	88 0f       	add	r24, r24
    2d10:	99 1f       	adc	r25, r25
    2d12:	0a 94       	dec	r0
    2d14:	e2 f7       	brpl	.-8      	; 0x2d0e <Dio_TogglChannel+0xb8>
    2d16:	84 27       	eor	r24, r20
    2d18:	8c 93       	st	X, r24
    2d1a:	13 c0       	rjmp	.+38     	; 0x2d42 <Dio_TogglChannel+0xec>
		break;

	case DIO_PORTD:
		TOGGLE_BIT(DIO_PORTD_REG,pin);
    2d1c:	a2 e3       	ldi	r26, 0x32	; 50
    2d1e:	b0 e0       	ldi	r27, 0x00	; 0
    2d20:	e2 e3       	ldi	r30, 0x32	; 50
    2d22:	f0 e0       	ldi	r31, 0x00	; 0
    2d24:	80 81       	ld	r24, Z
    2d26:	48 2f       	mov	r20, r24
    2d28:	8a 81       	ldd	r24, Y+2	; 0x02
    2d2a:	28 2f       	mov	r18, r24
    2d2c:	30 e0       	ldi	r19, 0x00	; 0
    2d2e:	81 e0       	ldi	r24, 0x01	; 1
    2d30:	90 e0       	ldi	r25, 0x00	; 0
    2d32:	02 2e       	mov	r0, r18
    2d34:	02 c0       	rjmp	.+4      	; 0x2d3a <Dio_TogglChannel+0xe4>
    2d36:	88 0f       	add	r24, r24
    2d38:	99 1f       	adc	r25, r25
    2d3a:	0a 94       	dec	r0
    2d3c:	e2 f7       	brpl	.-8      	; 0x2d36 <Dio_TogglChannel+0xe0>
    2d3e:	84 27       	eor	r24, r20
    2d40:	8c 93       	st	X, r24
		break;
	}
}
    2d42:	0f 90       	pop	r0
    2d44:	0f 90       	pop	r0
    2d46:	0f 90       	pop	r0
    2d48:	0f 90       	pop	r0
    2d4a:	cf 91       	pop	r28
    2d4c:	df 91       	pop	r29
    2d4e:	08 95       	ret

00002d50 <Dio_ReadChannel>:
level_type Dio_ReadChannel(port_type port,pin_type pin)
{
    2d50:	df 93       	push	r29
    2d52:	cf 93       	push	r28
    2d54:	00 d0       	rcall	.+0      	; 0x2d56 <Dio_ReadChannel+0x6>
    2d56:	00 d0       	rcall	.+0      	; 0x2d58 <Dio_ReadChannel+0x8>
    2d58:	0f 92       	push	r0
    2d5a:	cd b7       	in	r28, 0x3d	; 61
    2d5c:	de b7       	in	r29, 0x3e	; 62
    2d5e:	8a 83       	std	Y+2, r24	; 0x02
    2d60:	6b 83       	std	Y+3, r22	; 0x03
	level_type result = STD_LOW;
    2d62:	19 82       	std	Y+1, r1	; 0x01
	switch (port)
    2d64:	8a 81       	ldd	r24, Y+2	; 0x02
    2d66:	28 2f       	mov	r18, r24
    2d68:	30 e0       	ldi	r19, 0x00	; 0
    2d6a:	3d 83       	std	Y+5, r19	; 0x05
    2d6c:	2c 83       	std	Y+4, r18	; 0x04
    2d6e:	4c 81       	ldd	r20, Y+4	; 0x04
    2d70:	5d 81       	ldd	r21, Y+5	; 0x05
    2d72:	41 30       	cpi	r20, 0x01	; 1
    2d74:	51 05       	cpc	r21, r1
    2d76:	79 f1       	breq	.+94     	; 0x2dd6 <Dio_ReadChannel+0x86>
    2d78:	8c 81       	ldd	r24, Y+4	; 0x04
    2d7a:	9d 81       	ldd	r25, Y+5	; 0x05
    2d7c:	82 30       	cpi	r24, 0x02	; 2
    2d7e:	91 05       	cpc	r25, r1
    2d80:	34 f4       	brge	.+12     	; 0x2d8e <Dio_ReadChannel+0x3e>
    2d82:	2c 81       	ldd	r18, Y+4	; 0x04
    2d84:	3d 81       	ldd	r19, Y+5	; 0x05
    2d86:	21 15       	cp	r18, r1
    2d88:	31 05       	cpc	r19, r1
    2d8a:	69 f0       	breq	.+26     	; 0x2da6 <Dio_ReadChannel+0x56>
    2d8c:	6b c0       	rjmp	.+214    	; 0x2e64 <Dio_ReadChannel+0x114>
    2d8e:	4c 81       	ldd	r20, Y+4	; 0x04
    2d90:	5d 81       	ldd	r21, Y+5	; 0x05
    2d92:	42 30       	cpi	r20, 0x02	; 2
    2d94:	51 05       	cpc	r21, r1
    2d96:	b9 f1       	breq	.+110    	; 0x2e06 <Dio_ReadChannel+0xb6>
    2d98:	8c 81       	ldd	r24, Y+4	; 0x04
    2d9a:	9d 81       	ldd	r25, Y+5	; 0x05
    2d9c:	83 30       	cpi	r24, 0x03	; 3
    2d9e:	91 05       	cpc	r25, r1
    2da0:	09 f4       	brne	.+2      	; 0x2da4 <Dio_ReadChannel+0x54>
    2da2:	49 c0       	rjmp	.+146    	; 0x2e36 <Dio_ReadChannel+0xe6>
    2da4:	5f c0       	rjmp	.+190    	; 0x2e64 <Dio_ReadChannel+0x114>
	{
	case DIO_PORTA:
		if CHK_BIT(DIO_PINA_REG,pin)
    2da6:	e9 e3       	ldi	r30, 0x39	; 57
    2da8:	f0 e0       	ldi	r31, 0x00	; 0
    2daa:	80 81       	ld	r24, Z
    2dac:	28 2f       	mov	r18, r24
    2dae:	30 e0       	ldi	r19, 0x00	; 0
    2db0:	8b 81       	ldd	r24, Y+3	; 0x03
    2db2:	88 2f       	mov	r24, r24
    2db4:	90 e0       	ldi	r25, 0x00	; 0
    2db6:	a9 01       	movw	r20, r18
    2db8:	02 c0       	rjmp	.+4      	; 0x2dbe <Dio_ReadChannel+0x6e>
    2dba:	55 95       	asr	r21
    2dbc:	47 95       	ror	r20
    2dbe:	8a 95       	dec	r24
    2dc0:	e2 f7       	brpl	.-8      	; 0x2dba <Dio_ReadChannel+0x6a>
    2dc2:	ca 01       	movw	r24, r20
    2dc4:	81 70       	andi	r24, 0x01	; 1
    2dc6:	90 70       	andi	r25, 0x00	; 0
    2dc8:	88 23       	and	r24, r24
    2dca:	19 f0       	breq	.+6      	; 0x2dd2 <Dio_ReadChannel+0x82>
		{
			result = STD_HIGH;
    2dcc:	81 e0       	ldi	r24, 0x01	; 1
    2dce:	89 83       	std	Y+1, r24	; 0x01
    2dd0:	49 c0       	rjmp	.+146    	; 0x2e64 <Dio_ReadChannel+0x114>
		}
		else
		{
			result = STD_LOW;
    2dd2:	19 82       	std	Y+1, r1	; 0x01
    2dd4:	47 c0       	rjmp	.+142    	; 0x2e64 <Dio_ReadChannel+0x114>
		}
		break;
	case DIO_PORTB:
		if CHK_BIT(DIO_PINB_REG,pin)
    2dd6:	e6 e3       	ldi	r30, 0x36	; 54
    2dd8:	f0 e0       	ldi	r31, 0x00	; 0
    2dda:	80 81       	ld	r24, Z
    2ddc:	28 2f       	mov	r18, r24
    2dde:	30 e0       	ldi	r19, 0x00	; 0
    2de0:	8b 81       	ldd	r24, Y+3	; 0x03
    2de2:	88 2f       	mov	r24, r24
    2de4:	90 e0       	ldi	r25, 0x00	; 0
    2de6:	a9 01       	movw	r20, r18
    2de8:	02 c0       	rjmp	.+4      	; 0x2dee <Dio_ReadChannel+0x9e>
    2dea:	55 95       	asr	r21
    2dec:	47 95       	ror	r20
    2dee:	8a 95       	dec	r24
    2df0:	e2 f7       	brpl	.-8      	; 0x2dea <Dio_ReadChannel+0x9a>
    2df2:	ca 01       	movw	r24, r20
    2df4:	81 70       	andi	r24, 0x01	; 1
    2df6:	90 70       	andi	r25, 0x00	; 0
    2df8:	88 23       	and	r24, r24
    2dfa:	19 f0       	breq	.+6      	; 0x2e02 <Dio_ReadChannel+0xb2>
		{
			result = STD_HIGH;
    2dfc:	81 e0       	ldi	r24, 0x01	; 1
    2dfe:	89 83       	std	Y+1, r24	; 0x01
    2e00:	31 c0       	rjmp	.+98     	; 0x2e64 <Dio_ReadChannel+0x114>
		}
		else
		{
			result = STD_LOW;
    2e02:	19 82       	std	Y+1, r1	; 0x01
    2e04:	2f c0       	rjmp	.+94     	; 0x2e64 <Dio_ReadChannel+0x114>
		}
		break;
	case DIO_PORTC:
		if CHK_BIT(DIO_PINC_REG,pin)
    2e06:	e3 e3       	ldi	r30, 0x33	; 51
    2e08:	f0 e0       	ldi	r31, 0x00	; 0
    2e0a:	80 81       	ld	r24, Z
    2e0c:	28 2f       	mov	r18, r24
    2e0e:	30 e0       	ldi	r19, 0x00	; 0
    2e10:	8b 81       	ldd	r24, Y+3	; 0x03
    2e12:	88 2f       	mov	r24, r24
    2e14:	90 e0       	ldi	r25, 0x00	; 0
    2e16:	a9 01       	movw	r20, r18
    2e18:	02 c0       	rjmp	.+4      	; 0x2e1e <Dio_ReadChannel+0xce>
    2e1a:	55 95       	asr	r21
    2e1c:	47 95       	ror	r20
    2e1e:	8a 95       	dec	r24
    2e20:	e2 f7       	brpl	.-8      	; 0x2e1a <Dio_ReadChannel+0xca>
    2e22:	ca 01       	movw	r24, r20
    2e24:	81 70       	andi	r24, 0x01	; 1
    2e26:	90 70       	andi	r25, 0x00	; 0
    2e28:	88 23       	and	r24, r24
    2e2a:	19 f0       	breq	.+6      	; 0x2e32 <Dio_ReadChannel+0xe2>
		{
			result = STD_HIGH;
    2e2c:	81 e0       	ldi	r24, 0x01	; 1
    2e2e:	89 83       	std	Y+1, r24	; 0x01
    2e30:	19 c0       	rjmp	.+50     	; 0x2e64 <Dio_ReadChannel+0x114>
		}
		else
		{
			result = STD_LOW;
    2e32:	19 82       	std	Y+1, r1	; 0x01
    2e34:	17 c0       	rjmp	.+46     	; 0x2e64 <Dio_ReadChannel+0x114>
		}
		break;
	case DIO_PORTD:
		if CHK_BIT(DIO_PIND_REG,pin)
    2e36:	e0 e3       	ldi	r30, 0x30	; 48
    2e38:	f0 e0       	ldi	r31, 0x00	; 0
    2e3a:	80 81       	ld	r24, Z
    2e3c:	28 2f       	mov	r18, r24
    2e3e:	30 e0       	ldi	r19, 0x00	; 0
    2e40:	8b 81       	ldd	r24, Y+3	; 0x03
    2e42:	88 2f       	mov	r24, r24
    2e44:	90 e0       	ldi	r25, 0x00	; 0
    2e46:	a9 01       	movw	r20, r18
    2e48:	02 c0       	rjmp	.+4      	; 0x2e4e <Dio_ReadChannel+0xfe>
    2e4a:	55 95       	asr	r21
    2e4c:	47 95       	ror	r20
    2e4e:	8a 95       	dec	r24
    2e50:	e2 f7       	brpl	.-8      	; 0x2e4a <Dio_ReadChannel+0xfa>
    2e52:	ca 01       	movw	r24, r20
    2e54:	81 70       	andi	r24, 0x01	; 1
    2e56:	90 70       	andi	r25, 0x00	; 0
    2e58:	88 23       	and	r24, r24
    2e5a:	19 f0       	breq	.+6      	; 0x2e62 <Dio_ReadChannel+0x112>
		{
			result = STD_HIGH;
    2e5c:	81 e0       	ldi	r24, 0x01	; 1
    2e5e:	89 83       	std	Y+1, r24	; 0x01
    2e60:	01 c0       	rjmp	.+2      	; 0x2e64 <Dio_ReadChannel+0x114>
		}
		else
		{
			result = STD_LOW;
    2e62:	19 82       	std	Y+1, r1	; 0x01
		}
		break;
	}
	return result;
    2e64:	89 81       	ldd	r24, Y+1	; 0x01
}
    2e66:	0f 90       	pop	r0
    2e68:	0f 90       	pop	r0
    2e6a:	0f 90       	pop	r0
    2e6c:	0f 90       	pop	r0
    2e6e:	0f 90       	pop	r0
    2e70:	cf 91       	pop	r28
    2e72:	df 91       	pop	r29
    2e74:	08 95       	ret

00002e76 <adcInit>:
 * Author	:  Eng_Fawzi
 ********************************/
#include "Adc.h"

void adcInit(void)
{
    2e76:	df 93       	push	r29
    2e78:	cf 93       	push	r28
    2e7a:	cd b7       	in	r28, 0x3d	; 61
    2e7c:	de b7       	in	r29, 0x3e	; 62
	ADC_ADMUX_REG|=(AVCC5V_REF<<6);  /*	AVCC aas Vref	*/
    2e7e:	a7 e2       	ldi	r26, 0x27	; 39
    2e80:	b0 e0       	ldi	r27, 0x00	; 0
    2e82:	e7 e2       	ldi	r30, 0x27	; 39
    2e84:	f0 e0       	ldi	r31, 0x00	; 0
    2e86:	80 81       	ld	r24, Z
    2e88:	80 64       	ori	r24, 0x40	; 64
    2e8a:	8c 93       	st	X, r24
	ADC_ADCSRA_REG=(ADC_ENABLE)|(ADCPS_128);
    2e8c:	e6 e2       	ldi	r30, 0x26	; 38
    2e8e:	f0 e0       	ldi	r31, 0x00	; 0
    2e90:	87 e8       	ldi	r24, 0x87	; 135
    2e92:	80 83       	st	Z, r24
}
    2e94:	cf 91       	pop	r28
    2e96:	df 91       	pop	r29
    2e98:	08 95       	ret

00002e9a <adcRead>:
u16 adcRead(u8 chnlNo)
{
    2e9a:	df 93       	push	r29
    2e9c:	cf 93       	push	r28
    2e9e:	00 d0       	rcall	.+0      	; 0x2ea0 <adcRead+0x6>
    2ea0:	0f 92       	push	r0
    2ea2:	cd b7       	in	r28, 0x3d	; 61
    2ea4:	de b7       	in	r29, 0x3e	; 62
    2ea6:	8b 83       	std	Y+3, r24	; 0x03
    u16 result;
    ADC_ADMUX_REG = (ADC_ADMUX_REG & 0xF8)|(chnlNo);
    2ea8:	a7 e2       	ldi	r26, 0x27	; 39
    2eaa:	b0 e0       	ldi	r27, 0x00	; 0
    2eac:	e7 e2       	ldi	r30, 0x27	; 39
    2eae:	f0 e0       	ldi	r31, 0x00	; 0
    2eb0:	80 81       	ld	r24, Z
    2eb2:	98 2f       	mov	r25, r24
    2eb4:	98 7f       	andi	r25, 0xF8	; 248
    2eb6:	8b 81       	ldd	r24, Y+3	; 0x03
    2eb8:	89 2b       	or	r24, r25
    2eba:	8c 93       	st	X, r24
    ADC_ADCSRA_REG|=(ADC_START_CONVERSION);
    2ebc:	a6 e2       	ldi	r26, 0x26	; 38
    2ebe:	b0 e0       	ldi	r27, 0x00	; 0
    2ec0:	e6 e2       	ldi	r30, 0x26	; 38
    2ec2:	f0 e0       	ldi	r31, 0x00	; 0
    2ec4:	80 81       	ld	r24, Z
    2ec6:	80 64       	ori	r24, 0x40	; 64
    2ec8:	8c 93       	st	X, r24
 	while(!(CHK_BIT(ADC_ADCSRA_REG,ADIF_BIT_NO)))
    2eca:	e6 e2       	ldi	r30, 0x26	; 38
    2ecc:	f0 e0       	ldi	r31, 0x00	; 0
    2ece:	80 81       	ld	r24, Z
    2ed0:	82 95       	swap	r24
    2ed2:	8f 70       	andi	r24, 0x0F	; 15
    2ed4:	88 2f       	mov	r24, r24
    2ed6:	90 e0       	ldi	r25, 0x00	; 0
    2ed8:	81 70       	andi	r24, 0x01	; 1
    2eda:	90 70       	andi	r25, 0x00	; 0
    2edc:	00 97       	sbiw	r24, 0x00	; 0
    2ede:	a9 f3       	breq	.-22     	; 0x2eca <adcRead+0x30>
 		  {
 		  	  /*	Do Nothing	*/
 		  	  	  ;
 		  }
 	/*	Clear Interrupt Flag To Be Ready For Another Conversion	*/
 	 ADC_ADCSRA_REG|=(1<<ADIF_BIT_NO);
    2ee0:	a6 e2       	ldi	r26, 0x26	; 38
    2ee2:	b0 e0       	ldi	r27, 0x00	; 0
    2ee4:	e6 e2       	ldi	r30, 0x26	; 38
    2ee6:	f0 e0       	ldi	r31, 0x00	; 0
    2ee8:	80 81       	ld	r24, Z
    2eea:	80 61       	ori	r24, 0x10	; 16
    2eec:	8c 93       	st	X, r24
    result=(ADC_ADCL_REG|(ADC_ADCH_REG<<8));
    2eee:	e4 e2       	ldi	r30, 0x24	; 36
    2ef0:	f0 e0       	ldi	r31, 0x00	; 0
    2ef2:	80 81       	ld	r24, Z
    2ef4:	28 2f       	mov	r18, r24
    2ef6:	30 e0       	ldi	r19, 0x00	; 0
    2ef8:	e5 e2       	ldi	r30, 0x25	; 37
    2efa:	f0 e0       	ldi	r31, 0x00	; 0
    2efc:	80 81       	ld	r24, Z
    2efe:	88 2f       	mov	r24, r24
    2f00:	90 e0       	ldi	r25, 0x00	; 0
    2f02:	98 2f       	mov	r25, r24
    2f04:	88 27       	eor	r24, r24
    2f06:	82 2b       	or	r24, r18
    2f08:	93 2b       	or	r25, r19
    2f0a:	9a 83       	std	Y+2, r25	; 0x02
    2f0c:	89 83       	std	Y+1, r24	; 0x01
 	return result;
    2f0e:	89 81       	ldd	r24, Y+1	; 0x01
    2f10:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2f12:	0f 90       	pop	r0
    2f14:	0f 90       	pop	r0
    2f16:	0f 90       	pop	r0
    2f18:	cf 91       	pop	r28
    2f1a:	df 91       	pop	r29
    2f1c:	08 95       	ret

00002f1e <__udivmodqi4>:
    2f1e:	99 1b       	sub	r25, r25
    2f20:	79 e0       	ldi	r23, 0x09	; 9
    2f22:	04 c0       	rjmp	.+8      	; 0x2f2c <__udivmodqi4_ep>

00002f24 <__udivmodqi4_loop>:
    2f24:	99 1f       	adc	r25, r25
    2f26:	96 17       	cp	r25, r22
    2f28:	08 f0       	brcs	.+2      	; 0x2f2c <__udivmodqi4_ep>
    2f2a:	96 1b       	sub	r25, r22

00002f2c <__udivmodqi4_ep>:
    2f2c:	88 1f       	adc	r24, r24
    2f2e:	7a 95       	dec	r23
    2f30:	c9 f7       	brne	.-14     	; 0x2f24 <__udivmodqi4_loop>
    2f32:	80 95       	com	r24
    2f34:	08 95       	ret

00002f36 <__udivmodhi4>:
    2f36:	aa 1b       	sub	r26, r26
    2f38:	bb 1b       	sub	r27, r27
    2f3a:	51 e1       	ldi	r21, 0x11	; 17
    2f3c:	07 c0       	rjmp	.+14     	; 0x2f4c <__udivmodhi4_ep>

00002f3e <__udivmodhi4_loop>:
    2f3e:	aa 1f       	adc	r26, r26
    2f40:	bb 1f       	adc	r27, r27
    2f42:	a6 17       	cp	r26, r22
    2f44:	b7 07       	cpc	r27, r23
    2f46:	10 f0       	brcs	.+4      	; 0x2f4c <__udivmodhi4_ep>
    2f48:	a6 1b       	sub	r26, r22
    2f4a:	b7 0b       	sbc	r27, r23

00002f4c <__udivmodhi4_ep>:
    2f4c:	88 1f       	adc	r24, r24
    2f4e:	99 1f       	adc	r25, r25
    2f50:	5a 95       	dec	r21
    2f52:	a9 f7       	brne	.-22     	; 0x2f3e <__udivmodhi4_loop>
    2f54:	80 95       	com	r24
    2f56:	90 95       	com	r25
    2f58:	bc 01       	movw	r22, r24
    2f5a:	cd 01       	movw	r24, r26
    2f5c:	08 95       	ret

00002f5e <__prologue_saves__>:
    2f5e:	2f 92       	push	r2
    2f60:	3f 92       	push	r3
    2f62:	4f 92       	push	r4
    2f64:	5f 92       	push	r5
    2f66:	6f 92       	push	r6
    2f68:	7f 92       	push	r7
    2f6a:	8f 92       	push	r8
    2f6c:	9f 92       	push	r9
    2f6e:	af 92       	push	r10
    2f70:	bf 92       	push	r11
    2f72:	cf 92       	push	r12
    2f74:	df 92       	push	r13
    2f76:	ef 92       	push	r14
    2f78:	ff 92       	push	r15
    2f7a:	0f 93       	push	r16
    2f7c:	1f 93       	push	r17
    2f7e:	cf 93       	push	r28
    2f80:	df 93       	push	r29
    2f82:	cd b7       	in	r28, 0x3d	; 61
    2f84:	de b7       	in	r29, 0x3e	; 62
    2f86:	ca 1b       	sub	r28, r26
    2f88:	db 0b       	sbc	r29, r27
    2f8a:	0f b6       	in	r0, 0x3f	; 63
    2f8c:	f8 94       	cli
    2f8e:	de bf       	out	0x3e, r29	; 62
    2f90:	0f be       	out	0x3f, r0	; 63
    2f92:	cd bf       	out	0x3d, r28	; 61
    2f94:	09 94       	ijmp

00002f96 <__epilogue_restores__>:
    2f96:	2a 88       	ldd	r2, Y+18	; 0x12
    2f98:	39 88       	ldd	r3, Y+17	; 0x11
    2f9a:	48 88       	ldd	r4, Y+16	; 0x10
    2f9c:	5f 84       	ldd	r5, Y+15	; 0x0f
    2f9e:	6e 84       	ldd	r6, Y+14	; 0x0e
    2fa0:	7d 84       	ldd	r7, Y+13	; 0x0d
    2fa2:	8c 84       	ldd	r8, Y+12	; 0x0c
    2fa4:	9b 84       	ldd	r9, Y+11	; 0x0b
    2fa6:	aa 84       	ldd	r10, Y+10	; 0x0a
    2fa8:	b9 84       	ldd	r11, Y+9	; 0x09
    2faa:	c8 84       	ldd	r12, Y+8	; 0x08
    2fac:	df 80       	ldd	r13, Y+7	; 0x07
    2fae:	ee 80       	ldd	r14, Y+6	; 0x06
    2fb0:	fd 80       	ldd	r15, Y+5	; 0x05
    2fb2:	0c 81       	ldd	r16, Y+4	; 0x04
    2fb4:	1b 81       	ldd	r17, Y+3	; 0x03
    2fb6:	aa 81       	ldd	r26, Y+2	; 0x02
    2fb8:	b9 81       	ldd	r27, Y+1	; 0x01
    2fba:	ce 0f       	add	r28, r30
    2fbc:	d1 1d       	adc	r29, r1
    2fbe:	0f b6       	in	r0, 0x3f	; 63
    2fc0:	f8 94       	cli
    2fc2:	de bf       	out	0x3e, r29	; 62
    2fc4:	0f be       	out	0x3f, r0	; 63
    2fc6:	cd bf       	out	0x3d, r28	; 61
    2fc8:	ed 01       	movw	r28, r26
    2fca:	08 95       	ret

00002fcc <_exit>:
    2fcc:	f8 94       	cli

00002fce <__stop_program>:
    2fce:	ff cf       	rjmp	.-2      	; 0x2fce <__stop_program>
