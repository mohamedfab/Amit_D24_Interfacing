
Amit_D24_Interfacing.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001816  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000015a  00800060  00001816  000018aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001c  008001ba  008001ba  00001a04  2**0
                  ALLOC
  3 .stab         00002a78  00000000  00000000  00001a04  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001bc3  00000000  00000000  0000447c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000603f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000197  00000000  00000000  0000617f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001b11  00000000  00000000  00006316  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000ebc  00000000  00000000  00007e27  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000e5b  00000000  00000000  00008ce3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00009b40  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002b1  00000000  00000000  00009ca0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000836  00000000  00000000  00009f51  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a787  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 c8 08 	jmp	0x1190	; 0x1190 <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e1       	ldi	r30, 0x16	; 22
      68:	f8 e1       	ldi	r31, 0x18	; 24
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 3b       	cpi	r26, 0xBA	; 186
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa eb       	ldi	r26, 0xBA	; 186
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 3d       	cpi	r26, 0xD6	; 214
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 0b 06 	call	0xc16	; 0xc16 <main>
      8a:	0c 94 09 0c 	jmp	0x1812	; 0x1812 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 19 03 	call	0x632	; 0x632 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 49 03 	call	0x692	; 0x692 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 49 03 	call	0x692	; 0x692 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 d2 0b 	jmp	0x17a4	; 0x17a4 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a2 e7       	ldi	r26, 0x72	; 114
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 ee 0b 	jmp	0x17dc	; 0x17dc <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 de 0b 	jmp	0x17bc	; 0x17bc <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 3a 05 	call	0xa74	; 0xa74 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 3a 05 	call	0xa74	; 0xa74 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 65 04 	call	0x8ca	; 0x8ca <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 fa 0b 	jmp	0x17f4	; 0x17f4 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 de 0b 	jmp	0x17bc	; 0x17bc <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 3a 05 	call	0xa74	; 0xa74 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 3a 05 	call	0xa74	; 0xa74 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 65 04 	call	0x8ca	; 0x8ca <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 fa 0b 	jmp	0x17f4	; 0x17f4 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 d2 0b 	jmp	0x17a4	; 0x17a4 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 3a 05 	call	0xa74	; 0xa74 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 3a 05 	call	0xa74	; 0xa74 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	82 e7       	ldi	r24, 0x72	; 114
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 65 04 	call	0x8ca	; 0x8ca <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 ee 0b 	jmp	0x17dc	; 0x17dc <__epilogue_restores__>

00000632 <__gesf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 de 0b 	jmp	0x17bc	; 0x17bc <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 3a 05 	call	0xa74	; 0xa74 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 3a 05 	call	0xa74	; 0xa74 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gesf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gesf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 b2 05 	call	0xb64	; 0xb64 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gesf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 fa 0b 	jmp	0x17f4	; 0x17f4 <__epilogue_restores__+0x18>

00000692 <__fixsfsi>:
     692:	ac e0       	ldi	r26, 0x0C	; 12
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 e2 0b 	jmp	0x17c4	; 0x17c4 <__prologue_saves__+0x20>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	ce 01       	movw	r24, r28
     6a8:	01 96       	adiw	r24, 0x01	; 1
     6aa:	be 01       	movw	r22, r28
     6ac:	6b 5f       	subi	r22, 0xFB	; 251
     6ae:	7f 4f       	sbci	r23, 0xFF	; 255
     6b0:	0e 94 3a 05 	call	0xa74	; 0xa74 <__unpack_f>
     6b4:	8d 81       	ldd	r24, Y+5	; 0x05
     6b6:	82 30       	cpi	r24, 0x02	; 2
     6b8:	61 f1       	breq	.+88     	; 0x712 <__fixsfsi+0x80>
     6ba:	82 30       	cpi	r24, 0x02	; 2
     6bc:	50 f1       	brcs	.+84     	; 0x712 <__fixsfsi+0x80>
     6be:	84 30       	cpi	r24, 0x04	; 4
     6c0:	21 f4       	brne	.+8      	; 0x6ca <__fixsfsi+0x38>
     6c2:	8e 81       	ldd	r24, Y+6	; 0x06
     6c4:	88 23       	and	r24, r24
     6c6:	51 f1       	breq	.+84     	; 0x71c <__fixsfsi+0x8a>
     6c8:	2e c0       	rjmp	.+92     	; 0x726 <__fixsfsi+0x94>
     6ca:	2f 81       	ldd	r18, Y+7	; 0x07
     6cc:	38 85       	ldd	r19, Y+8	; 0x08
     6ce:	37 fd       	sbrc	r19, 7
     6d0:	20 c0       	rjmp	.+64     	; 0x712 <__fixsfsi+0x80>
     6d2:	6e 81       	ldd	r22, Y+6	; 0x06
     6d4:	2f 31       	cpi	r18, 0x1F	; 31
     6d6:	31 05       	cpc	r19, r1
     6d8:	1c f0       	brlt	.+6      	; 0x6e0 <__fixsfsi+0x4e>
     6da:	66 23       	and	r22, r22
     6dc:	f9 f0       	breq	.+62     	; 0x71c <__fixsfsi+0x8a>
     6de:	23 c0       	rjmp	.+70     	; 0x726 <__fixsfsi+0x94>
     6e0:	8e e1       	ldi	r24, 0x1E	; 30
     6e2:	90 e0       	ldi	r25, 0x00	; 0
     6e4:	82 1b       	sub	r24, r18
     6e6:	93 0b       	sbc	r25, r19
     6e8:	29 85       	ldd	r18, Y+9	; 0x09
     6ea:	3a 85       	ldd	r19, Y+10	; 0x0a
     6ec:	4b 85       	ldd	r20, Y+11	; 0x0b
     6ee:	5c 85       	ldd	r21, Y+12	; 0x0c
     6f0:	04 c0       	rjmp	.+8      	; 0x6fa <__fixsfsi+0x68>
     6f2:	56 95       	lsr	r21
     6f4:	47 95       	ror	r20
     6f6:	37 95       	ror	r19
     6f8:	27 95       	ror	r18
     6fa:	8a 95       	dec	r24
     6fc:	d2 f7       	brpl	.-12     	; 0x6f2 <__fixsfsi+0x60>
     6fe:	66 23       	and	r22, r22
     700:	b1 f0       	breq	.+44     	; 0x72e <__fixsfsi+0x9c>
     702:	50 95       	com	r21
     704:	40 95       	com	r20
     706:	30 95       	com	r19
     708:	21 95       	neg	r18
     70a:	3f 4f       	sbci	r19, 0xFF	; 255
     70c:	4f 4f       	sbci	r20, 0xFF	; 255
     70e:	5f 4f       	sbci	r21, 0xFF	; 255
     710:	0e c0       	rjmp	.+28     	; 0x72e <__fixsfsi+0x9c>
     712:	20 e0       	ldi	r18, 0x00	; 0
     714:	30 e0       	ldi	r19, 0x00	; 0
     716:	40 e0       	ldi	r20, 0x00	; 0
     718:	50 e0       	ldi	r21, 0x00	; 0
     71a:	09 c0       	rjmp	.+18     	; 0x72e <__fixsfsi+0x9c>
     71c:	2f ef       	ldi	r18, 0xFF	; 255
     71e:	3f ef       	ldi	r19, 0xFF	; 255
     720:	4f ef       	ldi	r20, 0xFF	; 255
     722:	5f e7       	ldi	r21, 0x7F	; 127
     724:	04 c0       	rjmp	.+8      	; 0x72e <__fixsfsi+0x9c>
     726:	20 e0       	ldi	r18, 0x00	; 0
     728:	30 e0       	ldi	r19, 0x00	; 0
     72a:	40 e0       	ldi	r20, 0x00	; 0
     72c:	50 e8       	ldi	r21, 0x80	; 128
     72e:	b9 01       	movw	r22, r18
     730:	ca 01       	movw	r24, r20
     732:	2c 96       	adiw	r28, 0x0c	; 12
     734:	e2 e0       	ldi	r30, 0x02	; 2
     736:	0c 94 fe 0b 	jmp	0x17fc	; 0x17fc <__epilogue_restores__+0x20>

0000073a <__floatunsisf>:
     73a:	a8 e0       	ldi	r26, 0x08	; 8
     73c:	b0 e0       	ldi	r27, 0x00	; 0
     73e:	e3 ea       	ldi	r30, 0xA3	; 163
     740:	f3 e0       	ldi	r31, 0x03	; 3
     742:	0c 94 da 0b 	jmp	0x17b4	; 0x17b4 <__prologue_saves__+0x10>
     746:	7b 01       	movw	r14, r22
     748:	8c 01       	movw	r16, r24
     74a:	61 15       	cp	r22, r1
     74c:	71 05       	cpc	r23, r1
     74e:	81 05       	cpc	r24, r1
     750:	91 05       	cpc	r25, r1
     752:	19 f4       	brne	.+6      	; 0x75a <__floatunsisf+0x20>
     754:	82 e0       	ldi	r24, 0x02	; 2
     756:	89 83       	std	Y+1, r24	; 0x01
     758:	60 c0       	rjmp	.+192    	; 0x81a <__floatunsisf+0xe0>
     75a:	83 e0       	ldi	r24, 0x03	; 3
     75c:	89 83       	std	Y+1, r24	; 0x01
     75e:	8e e1       	ldi	r24, 0x1E	; 30
     760:	c8 2e       	mov	r12, r24
     762:	d1 2c       	mov	r13, r1
     764:	dc 82       	std	Y+4, r13	; 0x04
     766:	cb 82       	std	Y+3, r12	; 0x03
     768:	ed 82       	std	Y+5, r14	; 0x05
     76a:	fe 82       	std	Y+6, r15	; 0x06
     76c:	0f 83       	std	Y+7, r16	; 0x07
     76e:	18 87       	std	Y+8, r17	; 0x08
     770:	c8 01       	movw	r24, r16
     772:	b7 01       	movw	r22, r14
     774:	0e 94 16 04 	call	0x82c	; 0x82c <__clzsi2>
     778:	fc 01       	movw	r30, r24
     77a:	31 97       	sbiw	r30, 0x01	; 1
     77c:	f7 ff       	sbrs	r31, 7
     77e:	3b c0       	rjmp	.+118    	; 0x7f6 <__floatunsisf+0xbc>
     780:	22 27       	eor	r18, r18
     782:	33 27       	eor	r19, r19
     784:	2e 1b       	sub	r18, r30
     786:	3f 0b       	sbc	r19, r31
     788:	57 01       	movw	r10, r14
     78a:	68 01       	movw	r12, r16
     78c:	02 2e       	mov	r0, r18
     78e:	04 c0       	rjmp	.+8      	; 0x798 <__floatunsisf+0x5e>
     790:	d6 94       	lsr	r13
     792:	c7 94       	ror	r12
     794:	b7 94       	ror	r11
     796:	a7 94       	ror	r10
     798:	0a 94       	dec	r0
     79a:	d2 f7       	brpl	.-12     	; 0x790 <__floatunsisf+0x56>
     79c:	40 e0       	ldi	r20, 0x00	; 0
     79e:	50 e0       	ldi	r21, 0x00	; 0
     7a0:	60 e0       	ldi	r22, 0x00	; 0
     7a2:	70 e0       	ldi	r23, 0x00	; 0
     7a4:	81 e0       	ldi	r24, 0x01	; 1
     7a6:	90 e0       	ldi	r25, 0x00	; 0
     7a8:	a0 e0       	ldi	r26, 0x00	; 0
     7aa:	b0 e0       	ldi	r27, 0x00	; 0
     7ac:	04 c0       	rjmp	.+8      	; 0x7b6 <__floatunsisf+0x7c>
     7ae:	88 0f       	add	r24, r24
     7b0:	99 1f       	adc	r25, r25
     7b2:	aa 1f       	adc	r26, r26
     7b4:	bb 1f       	adc	r27, r27
     7b6:	2a 95       	dec	r18
     7b8:	d2 f7       	brpl	.-12     	; 0x7ae <__floatunsisf+0x74>
     7ba:	01 97       	sbiw	r24, 0x01	; 1
     7bc:	a1 09       	sbc	r26, r1
     7be:	b1 09       	sbc	r27, r1
     7c0:	8e 21       	and	r24, r14
     7c2:	9f 21       	and	r25, r15
     7c4:	a0 23       	and	r26, r16
     7c6:	b1 23       	and	r27, r17
     7c8:	00 97       	sbiw	r24, 0x00	; 0
     7ca:	a1 05       	cpc	r26, r1
     7cc:	b1 05       	cpc	r27, r1
     7ce:	21 f0       	breq	.+8      	; 0x7d8 <__floatunsisf+0x9e>
     7d0:	41 e0       	ldi	r20, 0x01	; 1
     7d2:	50 e0       	ldi	r21, 0x00	; 0
     7d4:	60 e0       	ldi	r22, 0x00	; 0
     7d6:	70 e0       	ldi	r23, 0x00	; 0
     7d8:	4a 29       	or	r20, r10
     7da:	5b 29       	or	r21, r11
     7dc:	6c 29       	or	r22, r12
     7de:	7d 29       	or	r23, r13
     7e0:	4d 83       	std	Y+5, r20	; 0x05
     7e2:	5e 83       	std	Y+6, r21	; 0x06
     7e4:	6f 83       	std	Y+7, r22	; 0x07
     7e6:	78 87       	std	Y+8, r23	; 0x08
     7e8:	8e e1       	ldi	r24, 0x1E	; 30
     7ea:	90 e0       	ldi	r25, 0x00	; 0
     7ec:	8e 1b       	sub	r24, r30
     7ee:	9f 0b       	sbc	r25, r31
     7f0:	9c 83       	std	Y+4, r25	; 0x04
     7f2:	8b 83       	std	Y+3, r24	; 0x03
     7f4:	12 c0       	rjmp	.+36     	; 0x81a <__floatunsisf+0xe0>
     7f6:	30 97       	sbiw	r30, 0x00	; 0
     7f8:	81 f0       	breq	.+32     	; 0x81a <__floatunsisf+0xe0>
     7fa:	0e 2e       	mov	r0, r30
     7fc:	04 c0       	rjmp	.+8      	; 0x806 <__floatunsisf+0xcc>
     7fe:	ee 0c       	add	r14, r14
     800:	ff 1c       	adc	r15, r15
     802:	00 1f       	adc	r16, r16
     804:	11 1f       	adc	r17, r17
     806:	0a 94       	dec	r0
     808:	d2 f7       	brpl	.-12     	; 0x7fe <__floatunsisf+0xc4>
     80a:	ed 82       	std	Y+5, r14	; 0x05
     80c:	fe 82       	std	Y+6, r15	; 0x06
     80e:	0f 83       	std	Y+7, r16	; 0x07
     810:	18 87       	std	Y+8, r17	; 0x08
     812:	ce 1a       	sub	r12, r30
     814:	df 0a       	sbc	r13, r31
     816:	dc 82       	std	Y+4, r13	; 0x04
     818:	cb 82       	std	Y+3, r12	; 0x03
     81a:	1a 82       	std	Y+2, r1	; 0x02
     81c:	ce 01       	movw	r24, r28
     81e:	01 96       	adiw	r24, 0x01	; 1
     820:	0e 94 65 04 	call	0x8ca	; 0x8ca <__pack_f>
     824:	28 96       	adiw	r28, 0x08	; 8
     826:	ea e0       	ldi	r30, 0x0A	; 10
     828:	0c 94 f6 0b 	jmp	0x17ec	; 0x17ec <__epilogue_restores__+0x10>

0000082c <__clzsi2>:
     82c:	ef 92       	push	r14
     82e:	ff 92       	push	r15
     830:	0f 93       	push	r16
     832:	1f 93       	push	r17
     834:	7b 01       	movw	r14, r22
     836:	8c 01       	movw	r16, r24
     838:	80 e0       	ldi	r24, 0x00	; 0
     83a:	e8 16       	cp	r14, r24
     83c:	80 e0       	ldi	r24, 0x00	; 0
     83e:	f8 06       	cpc	r15, r24
     840:	81 e0       	ldi	r24, 0x01	; 1
     842:	08 07       	cpc	r16, r24
     844:	80 e0       	ldi	r24, 0x00	; 0
     846:	18 07       	cpc	r17, r24
     848:	88 f4       	brcc	.+34     	; 0x86c <__stack+0xd>
     84a:	8f ef       	ldi	r24, 0xFF	; 255
     84c:	e8 16       	cp	r14, r24
     84e:	f1 04       	cpc	r15, r1
     850:	01 05       	cpc	r16, r1
     852:	11 05       	cpc	r17, r1
     854:	31 f0       	breq	.+12     	; 0x862 <__stack+0x3>
     856:	28 f0       	brcs	.+10     	; 0x862 <__stack+0x3>
     858:	88 e0       	ldi	r24, 0x08	; 8
     85a:	90 e0       	ldi	r25, 0x00	; 0
     85c:	a0 e0       	ldi	r26, 0x00	; 0
     85e:	b0 e0       	ldi	r27, 0x00	; 0
     860:	17 c0       	rjmp	.+46     	; 0x890 <__stack+0x31>
     862:	80 e0       	ldi	r24, 0x00	; 0
     864:	90 e0       	ldi	r25, 0x00	; 0
     866:	a0 e0       	ldi	r26, 0x00	; 0
     868:	b0 e0       	ldi	r27, 0x00	; 0
     86a:	12 c0       	rjmp	.+36     	; 0x890 <__stack+0x31>
     86c:	80 e0       	ldi	r24, 0x00	; 0
     86e:	e8 16       	cp	r14, r24
     870:	80 e0       	ldi	r24, 0x00	; 0
     872:	f8 06       	cpc	r15, r24
     874:	80 e0       	ldi	r24, 0x00	; 0
     876:	08 07       	cpc	r16, r24
     878:	81 e0       	ldi	r24, 0x01	; 1
     87a:	18 07       	cpc	r17, r24
     87c:	28 f0       	brcs	.+10     	; 0x888 <__stack+0x29>
     87e:	88 e1       	ldi	r24, 0x18	; 24
     880:	90 e0       	ldi	r25, 0x00	; 0
     882:	a0 e0       	ldi	r26, 0x00	; 0
     884:	b0 e0       	ldi	r27, 0x00	; 0
     886:	04 c0       	rjmp	.+8      	; 0x890 <__stack+0x31>
     888:	80 e1       	ldi	r24, 0x10	; 16
     88a:	90 e0       	ldi	r25, 0x00	; 0
     88c:	a0 e0       	ldi	r26, 0x00	; 0
     88e:	b0 e0       	ldi	r27, 0x00	; 0
     890:	20 e2       	ldi	r18, 0x20	; 32
     892:	30 e0       	ldi	r19, 0x00	; 0
     894:	40 e0       	ldi	r20, 0x00	; 0
     896:	50 e0       	ldi	r21, 0x00	; 0
     898:	28 1b       	sub	r18, r24
     89a:	39 0b       	sbc	r19, r25
     89c:	4a 0b       	sbc	r20, r26
     89e:	5b 0b       	sbc	r21, r27
     8a0:	04 c0       	rjmp	.+8      	; 0x8aa <__stack+0x4b>
     8a2:	16 95       	lsr	r17
     8a4:	07 95       	ror	r16
     8a6:	f7 94       	ror	r15
     8a8:	e7 94       	ror	r14
     8aa:	8a 95       	dec	r24
     8ac:	d2 f7       	brpl	.-12     	; 0x8a2 <__stack+0x43>
     8ae:	f7 01       	movw	r30, r14
     8b0:	e6 58       	subi	r30, 0x86	; 134
     8b2:	ff 4f       	sbci	r31, 0xFF	; 255
     8b4:	80 81       	ld	r24, Z
     8b6:	28 1b       	sub	r18, r24
     8b8:	31 09       	sbc	r19, r1
     8ba:	41 09       	sbc	r20, r1
     8bc:	51 09       	sbc	r21, r1
     8be:	c9 01       	movw	r24, r18
     8c0:	1f 91       	pop	r17
     8c2:	0f 91       	pop	r16
     8c4:	ff 90       	pop	r15
     8c6:	ef 90       	pop	r14
     8c8:	08 95       	ret

000008ca <__pack_f>:
     8ca:	df 92       	push	r13
     8cc:	ef 92       	push	r14
     8ce:	ff 92       	push	r15
     8d0:	0f 93       	push	r16
     8d2:	1f 93       	push	r17
     8d4:	fc 01       	movw	r30, r24
     8d6:	e4 80       	ldd	r14, Z+4	; 0x04
     8d8:	f5 80       	ldd	r15, Z+5	; 0x05
     8da:	06 81       	ldd	r16, Z+6	; 0x06
     8dc:	17 81       	ldd	r17, Z+7	; 0x07
     8de:	d1 80       	ldd	r13, Z+1	; 0x01
     8e0:	80 81       	ld	r24, Z
     8e2:	82 30       	cpi	r24, 0x02	; 2
     8e4:	48 f4       	brcc	.+18     	; 0x8f8 <__pack_f+0x2e>
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	90 e0       	ldi	r25, 0x00	; 0
     8ea:	a0 e1       	ldi	r26, 0x10	; 16
     8ec:	b0 e0       	ldi	r27, 0x00	; 0
     8ee:	e8 2a       	or	r14, r24
     8f0:	f9 2a       	or	r15, r25
     8f2:	0a 2b       	or	r16, r26
     8f4:	1b 2b       	or	r17, r27
     8f6:	a5 c0       	rjmp	.+330    	; 0xa42 <__pack_f+0x178>
     8f8:	84 30       	cpi	r24, 0x04	; 4
     8fa:	09 f4       	brne	.+2      	; 0x8fe <__pack_f+0x34>
     8fc:	9f c0       	rjmp	.+318    	; 0xa3c <__pack_f+0x172>
     8fe:	82 30       	cpi	r24, 0x02	; 2
     900:	21 f4       	brne	.+8      	; 0x90a <__pack_f+0x40>
     902:	ee 24       	eor	r14, r14
     904:	ff 24       	eor	r15, r15
     906:	87 01       	movw	r16, r14
     908:	05 c0       	rjmp	.+10     	; 0x914 <__pack_f+0x4a>
     90a:	e1 14       	cp	r14, r1
     90c:	f1 04       	cpc	r15, r1
     90e:	01 05       	cpc	r16, r1
     910:	11 05       	cpc	r17, r1
     912:	19 f4       	brne	.+6      	; 0x91a <__pack_f+0x50>
     914:	e0 e0       	ldi	r30, 0x00	; 0
     916:	f0 e0       	ldi	r31, 0x00	; 0
     918:	96 c0       	rjmp	.+300    	; 0xa46 <__pack_f+0x17c>
     91a:	62 81       	ldd	r22, Z+2	; 0x02
     91c:	73 81       	ldd	r23, Z+3	; 0x03
     91e:	9f ef       	ldi	r25, 0xFF	; 255
     920:	62 38       	cpi	r22, 0x82	; 130
     922:	79 07       	cpc	r23, r25
     924:	0c f0       	brlt	.+2      	; 0x928 <__pack_f+0x5e>
     926:	5b c0       	rjmp	.+182    	; 0x9de <__pack_f+0x114>
     928:	22 e8       	ldi	r18, 0x82	; 130
     92a:	3f ef       	ldi	r19, 0xFF	; 255
     92c:	26 1b       	sub	r18, r22
     92e:	37 0b       	sbc	r19, r23
     930:	2a 31       	cpi	r18, 0x1A	; 26
     932:	31 05       	cpc	r19, r1
     934:	2c f0       	brlt	.+10     	; 0x940 <__pack_f+0x76>
     936:	20 e0       	ldi	r18, 0x00	; 0
     938:	30 e0       	ldi	r19, 0x00	; 0
     93a:	40 e0       	ldi	r20, 0x00	; 0
     93c:	50 e0       	ldi	r21, 0x00	; 0
     93e:	2a c0       	rjmp	.+84     	; 0x994 <__pack_f+0xca>
     940:	b8 01       	movw	r22, r16
     942:	a7 01       	movw	r20, r14
     944:	02 2e       	mov	r0, r18
     946:	04 c0       	rjmp	.+8      	; 0x950 <__pack_f+0x86>
     948:	76 95       	lsr	r23
     94a:	67 95       	ror	r22
     94c:	57 95       	ror	r21
     94e:	47 95       	ror	r20
     950:	0a 94       	dec	r0
     952:	d2 f7       	brpl	.-12     	; 0x948 <__pack_f+0x7e>
     954:	81 e0       	ldi	r24, 0x01	; 1
     956:	90 e0       	ldi	r25, 0x00	; 0
     958:	a0 e0       	ldi	r26, 0x00	; 0
     95a:	b0 e0       	ldi	r27, 0x00	; 0
     95c:	04 c0       	rjmp	.+8      	; 0x966 <__pack_f+0x9c>
     95e:	88 0f       	add	r24, r24
     960:	99 1f       	adc	r25, r25
     962:	aa 1f       	adc	r26, r26
     964:	bb 1f       	adc	r27, r27
     966:	2a 95       	dec	r18
     968:	d2 f7       	brpl	.-12     	; 0x95e <__pack_f+0x94>
     96a:	01 97       	sbiw	r24, 0x01	; 1
     96c:	a1 09       	sbc	r26, r1
     96e:	b1 09       	sbc	r27, r1
     970:	8e 21       	and	r24, r14
     972:	9f 21       	and	r25, r15
     974:	a0 23       	and	r26, r16
     976:	b1 23       	and	r27, r17
     978:	00 97       	sbiw	r24, 0x00	; 0
     97a:	a1 05       	cpc	r26, r1
     97c:	b1 05       	cpc	r27, r1
     97e:	21 f0       	breq	.+8      	; 0x988 <__pack_f+0xbe>
     980:	81 e0       	ldi	r24, 0x01	; 1
     982:	90 e0       	ldi	r25, 0x00	; 0
     984:	a0 e0       	ldi	r26, 0x00	; 0
     986:	b0 e0       	ldi	r27, 0x00	; 0
     988:	9a 01       	movw	r18, r20
     98a:	ab 01       	movw	r20, r22
     98c:	28 2b       	or	r18, r24
     98e:	39 2b       	or	r19, r25
     990:	4a 2b       	or	r20, r26
     992:	5b 2b       	or	r21, r27
     994:	da 01       	movw	r26, r20
     996:	c9 01       	movw	r24, r18
     998:	8f 77       	andi	r24, 0x7F	; 127
     99a:	90 70       	andi	r25, 0x00	; 0
     99c:	a0 70       	andi	r26, 0x00	; 0
     99e:	b0 70       	andi	r27, 0x00	; 0
     9a0:	80 34       	cpi	r24, 0x40	; 64
     9a2:	91 05       	cpc	r25, r1
     9a4:	a1 05       	cpc	r26, r1
     9a6:	b1 05       	cpc	r27, r1
     9a8:	39 f4       	brne	.+14     	; 0x9b8 <__pack_f+0xee>
     9aa:	27 ff       	sbrs	r18, 7
     9ac:	09 c0       	rjmp	.+18     	; 0x9c0 <__pack_f+0xf6>
     9ae:	20 5c       	subi	r18, 0xC0	; 192
     9b0:	3f 4f       	sbci	r19, 0xFF	; 255
     9b2:	4f 4f       	sbci	r20, 0xFF	; 255
     9b4:	5f 4f       	sbci	r21, 0xFF	; 255
     9b6:	04 c0       	rjmp	.+8      	; 0x9c0 <__pack_f+0xf6>
     9b8:	21 5c       	subi	r18, 0xC1	; 193
     9ba:	3f 4f       	sbci	r19, 0xFF	; 255
     9bc:	4f 4f       	sbci	r20, 0xFF	; 255
     9be:	5f 4f       	sbci	r21, 0xFF	; 255
     9c0:	e0 e0       	ldi	r30, 0x00	; 0
     9c2:	f0 e0       	ldi	r31, 0x00	; 0
     9c4:	20 30       	cpi	r18, 0x00	; 0
     9c6:	a0 e0       	ldi	r26, 0x00	; 0
     9c8:	3a 07       	cpc	r19, r26
     9ca:	a0 e0       	ldi	r26, 0x00	; 0
     9cc:	4a 07       	cpc	r20, r26
     9ce:	a0 e4       	ldi	r26, 0x40	; 64
     9d0:	5a 07       	cpc	r21, r26
     9d2:	10 f0       	brcs	.+4      	; 0x9d8 <__pack_f+0x10e>
     9d4:	e1 e0       	ldi	r30, 0x01	; 1
     9d6:	f0 e0       	ldi	r31, 0x00	; 0
     9d8:	79 01       	movw	r14, r18
     9da:	8a 01       	movw	r16, r20
     9dc:	27 c0       	rjmp	.+78     	; 0xa2c <__pack_f+0x162>
     9de:	60 38       	cpi	r22, 0x80	; 128
     9e0:	71 05       	cpc	r23, r1
     9e2:	64 f5       	brge	.+88     	; 0xa3c <__pack_f+0x172>
     9e4:	fb 01       	movw	r30, r22
     9e6:	e1 58       	subi	r30, 0x81	; 129
     9e8:	ff 4f       	sbci	r31, 0xFF	; 255
     9ea:	d8 01       	movw	r26, r16
     9ec:	c7 01       	movw	r24, r14
     9ee:	8f 77       	andi	r24, 0x7F	; 127
     9f0:	90 70       	andi	r25, 0x00	; 0
     9f2:	a0 70       	andi	r26, 0x00	; 0
     9f4:	b0 70       	andi	r27, 0x00	; 0
     9f6:	80 34       	cpi	r24, 0x40	; 64
     9f8:	91 05       	cpc	r25, r1
     9fa:	a1 05       	cpc	r26, r1
     9fc:	b1 05       	cpc	r27, r1
     9fe:	39 f4       	brne	.+14     	; 0xa0e <__pack_f+0x144>
     a00:	e7 fe       	sbrs	r14, 7
     a02:	0d c0       	rjmp	.+26     	; 0xa1e <__pack_f+0x154>
     a04:	80 e4       	ldi	r24, 0x40	; 64
     a06:	90 e0       	ldi	r25, 0x00	; 0
     a08:	a0 e0       	ldi	r26, 0x00	; 0
     a0a:	b0 e0       	ldi	r27, 0x00	; 0
     a0c:	04 c0       	rjmp	.+8      	; 0xa16 <__pack_f+0x14c>
     a0e:	8f e3       	ldi	r24, 0x3F	; 63
     a10:	90 e0       	ldi	r25, 0x00	; 0
     a12:	a0 e0       	ldi	r26, 0x00	; 0
     a14:	b0 e0       	ldi	r27, 0x00	; 0
     a16:	e8 0e       	add	r14, r24
     a18:	f9 1e       	adc	r15, r25
     a1a:	0a 1f       	adc	r16, r26
     a1c:	1b 1f       	adc	r17, r27
     a1e:	17 ff       	sbrs	r17, 7
     a20:	05 c0       	rjmp	.+10     	; 0xa2c <__pack_f+0x162>
     a22:	16 95       	lsr	r17
     a24:	07 95       	ror	r16
     a26:	f7 94       	ror	r15
     a28:	e7 94       	ror	r14
     a2a:	31 96       	adiw	r30, 0x01	; 1
     a2c:	87 e0       	ldi	r24, 0x07	; 7
     a2e:	16 95       	lsr	r17
     a30:	07 95       	ror	r16
     a32:	f7 94       	ror	r15
     a34:	e7 94       	ror	r14
     a36:	8a 95       	dec	r24
     a38:	d1 f7       	brne	.-12     	; 0xa2e <__pack_f+0x164>
     a3a:	05 c0       	rjmp	.+10     	; 0xa46 <__pack_f+0x17c>
     a3c:	ee 24       	eor	r14, r14
     a3e:	ff 24       	eor	r15, r15
     a40:	87 01       	movw	r16, r14
     a42:	ef ef       	ldi	r30, 0xFF	; 255
     a44:	f0 e0       	ldi	r31, 0x00	; 0
     a46:	6e 2f       	mov	r22, r30
     a48:	67 95       	ror	r22
     a4a:	66 27       	eor	r22, r22
     a4c:	67 95       	ror	r22
     a4e:	90 2f       	mov	r25, r16
     a50:	9f 77       	andi	r25, 0x7F	; 127
     a52:	d7 94       	ror	r13
     a54:	dd 24       	eor	r13, r13
     a56:	d7 94       	ror	r13
     a58:	8e 2f       	mov	r24, r30
     a5a:	86 95       	lsr	r24
     a5c:	49 2f       	mov	r20, r25
     a5e:	46 2b       	or	r20, r22
     a60:	58 2f       	mov	r21, r24
     a62:	5d 29       	or	r21, r13
     a64:	b7 01       	movw	r22, r14
     a66:	ca 01       	movw	r24, r20
     a68:	1f 91       	pop	r17
     a6a:	0f 91       	pop	r16
     a6c:	ff 90       	pop	r15
     a6e:	ef 90       	pop	r14
     a70:	df 90       	pop	r13
     a72:	08 95       	ret

00000a74 <__unpack_f>:
     a74:	fc 01       	movw	r30, r24
     a76:	db 01       	movw	r26, r22
     a78:	40 81       	ld	r20, Z
     a7a:	51 81       	ldd	r21, Z+1	; 0x01
     a7c:	22 81       	ldd	r18, Z+2	; 0x02
     a7e:	62 2f       	mov	r22, r18
     a80:	6f 77       	andi	r22, 0x7F	; 127
     a82:	70 e0       	ldi	r23, 0x00	; 0
     a84:	22 1f       	adc	r18, r18
     a86:	22 27       	eor	r18, r18
     a88:	22 1f       	adc	r18, r18
     a8a:	93 81       	ldd	r25, Z+3	; 0x03
     a8c:	89 2f       	mov	r24, r25
     a8e:	88 0f       	add	r24, r24
     a90:	82 2b       	or	r24, r18
     a92:	28 2f       	mov	r18, r24
     a94:	30 e0       	ldi	r19, 0x00	; 0
     a96:	99 1f       	adc	r25, r25
     a98:	99 27       	eor	r25, r25
     a9a:	99 1f       	adc	r25, r25
     a9c:	11 96       	adiw	r26, 0x01	; 1
     a9e:	9c 93       	st	X, r25
     aa0:	11 97       	sbiw	r26, 0x01	; 1
     aa2:	21 15       	cp	r18, r1
     aa4:	31 05       	cpc	r19, r1
     aa6:	a9 f5       	brne	.+106    	; 0xb12 <__unpack_f+0x9e>
     aa8:	41 15       	cp	r20, r1
     aaa:	51 05       	cpc	r21, r1
     aac:	61 05       	cpc	r22, r1
     aae:	71 05       	cpc	r23, r1
     ab0:	11 f4       	brne	.+4      	; 0xab6 <__unpack_f+0x42>
     ab2:	82 e0       	ldi	r24, 0x02	; 2
     ab4:	37 c0       	rjmp	.+110    	; 0xb24 <__unpack_f+0xb0>
     ab6:	82 e8       	ldi	r24, 0x82	; 130
     ab8:	9f ef       	ldi	r25, 0xFF	; 255
     aba:	13 96       	adiw	r26, 0x03	; 3
     abc:	9c 93       	st	X, r25
     abe:	8e 93       	st	-X, r24
     ac0:	12 97       	sbiw	r26, 0x02	; 2
     ac2:	9a 01       	movw	r18, r20
     ac4:	ab 01       	movw	r20, r22
     ac6:	67 e0       	ldi	r22, 0x07	; 7
     ac8:	22 0f       	add	r18, r18
     aca:	33 1f       	adc	r19, r19
     acc:	44 1f       	adc	r20, r20
     ace:	55 1f       	adc	r21, r21
     ad0:	6a 95       	dec	r22
     ad2:	d1 f7       	brne	.-12     	; 0xac8 <__unpack_f+0x54>
     ad4:	83 e0       	ldi	r24, 0x03	; 3
     ad6:	8c 93       	st	X, r24
     ad8:	0d c0       	rjmp	.+26     	; 0xaf4 <__unpack_f+0x80>
     ada:	22 0f       	add	r18, r18
     adc:	33 1f       	adc	r19, r19
     ade:	44 1f       	adc	r20, r20
     ae0:	55 1f       	adc	r21, r21
     ae2:	12 96       	adiw	r26, 0x02	; 2
     ae4:	8d 91       	ld	r24, X+
     ae6:	9c 91       	ld	r25, X
     ae8:	13 97       	sbiw	r26, 0x03	; 3
     aea:	01 97       	sbiw	r24, 0x01	; 1
     aec:	13 96       	adiw	r26, 0x03	; 3
     aee:	9c 93       	st	X, r25
     af0:	8e 93       	st	-X, r24
     af2:	12 97       	sbiw	r26, 0x02	; 2
     af4:	20 30       	cpi	r18, 0x00	; 0
     af6:	80 e0       	ldi	r24, 0x00	; 0
     af8:	38 07       	cpc	r19, r24
     afa:	80 e0       	ldi	r24, 0x00	; 0
     afc:	48 07       	cpc	r20, r24
     afe:	80 e4       	ldi	r24, 0x40	; 64
     b00:	58 07       	cpc	r21, r24
     b02:	58 f3       	brcs	.-42     	; 0xada <__unpack_f+0x66>
     b04:	14 96       	adiw	r26, 0x04	; 4
     b06:	2d 93       	st	X+, r18
     b08:	3d 93       	st	X+, r19
     b0a:	4d 93       	st	X+, r20
     b0c:	5c 93       	st	X, r21
     b0e:	17 97       	sbiw	r26, 0x07	; 7
     b10:	08 95       	ret
     b12:	2f 3f       	cpi	r18, 0xFF	; 255
     b14:	31 05       	cpc	r19, r1
     b16:	79 f4       	brne	.+30     	; 0xb36 <__unpack_f+0xc2>
     b18:	41 15       	cp	r20, r1
     b1a:	51 05       	cpc	r21, r1
     b1c:	61 05       	cpc	r22, r1
     b1e:	71 05       	cpc	r23, r1
     b20:	19 f4       	brne	.+6      	; 0xb28 <__unpack_f+0xb4>
     b22:	84 e0       	ldi	r24, 0x04	; 4
     b24:	8c 93       	st	X, r24
     b26:	08 95       	ret
     b28:	64 ff       	sbrs	r22, 4
     b2a:	03 c0       	rjmp	.+6      	; 0xb32 <__unpack_f+0xbe>
     b2c:	81 e0       	ldi	r24, 0x01	; 1
     b2e:	8c 93       	st	X, r24
     b30:	12 c0       	rjmp	.+36     	; 0xb56 <__unpack_f+0xe2>
     b32:	1c 92       	st	X, r1
     b34:	10 c0       	rjmp	.+32     	; 0xb56 <__unpack_f+0xe2>
     b36:	2f 57       	subi	r18, 0x7F	; 127
     b38:	30 40       	sbci	r19, 0x00	; 0
     b3a:	13 96       	adiw	r26, 0x03	; 3
     b3c:	3c 93       	st	X, r19
     b3e:	2e 93       	st	-X, r18
     b40:	12 97       	sbiw	r26, 0x02	; 2
     b42:	83 e0       	ldi	r24, 0x03	; 3
     b44:	8c 93       	st	X, r24
     b46:	87 e0       	ldi	r24, 0x07	; 7
     b48:	44 0f       	add	r20, r20
     b4a:	55 1f       	adc	r21, r21
     b4c:	66 1f       	adc	r22, r22
     b4e:	77 1f       	adc	r23, r23
     b50:	8a 95       	dec	r24
     b52:	d1 f7       	brne	.-12     	; 0xb48 <__unpack_f+0xd4>
     b54:	70 64       	ori	r23, 0x40	; 64
     b56:	14 96       	adiw	r26, 0x04	; 4
     b58:	4d 93       	st	X+, r20
     b5a:	5d 93       	st	X+, r21
     b5c:	6d 93       	st	X+, r22
     b5e:	7c 93       	st	X, r23
     b60:	17 97       	sbiw	r26, 0x07	; 7
     b62:	08 95       	ret

00000b64 <__fpcmp_parts_f>:
     b64:	1f 93       	push	r17
     b66:	dc 01       	movw	r26, r24
     b68:	fb 01       	movw	r30, r22
     b6a:	9c 91       	ld	r25, X
     b6c:	92 30       	cpi	r25, 0x02	; 2
     b6e:	08 f4       	brcc	.+2      	; 0xb72 <__fpcmp_parts_f+0xe>
     b70:	47 c0       	rjmp	.+142    	; 0xc00 <__fpcmp_parts_f+0x9c>
     b72:	80 81       	ld	r24, Z
     b74:	82 30       	cpi	r24, 0x02	; 2
     b76:	08 f4       	brcc	.+2      	; 0xb7a <__fpcmp_parts_f+0x16>
     b78:	43 c0       	rjmp	.+134    	; 0xc00 <__fpcmp_parts_f+0x9c>
     b7a:	94 30       	cpi	r25, 0x04	; 4
     b7c:	51 f4       	brne	.+20     	; 0xb92 <__fpcmp_parts_f+0x2e>
     b7e:	11 96       	adiw	r26, 0x01	; 1
     b80:	1c 91       	ld	r17, X
     b82:	84 30       	cpi	r24, 0x04	; 4
     b84:	99 f5       	brne	.+102    	; 0xbec <__fpcmp_parts_f+0x88>
     b86:	81 81       	ldd	r24, Z+1	; 0x01
     b88:	68 2f       	mov	r22, r24
     b8a:	70 e0       	ldi	r23, 0x00	; 0
     b8c:	61 1b       	sub	r22, r17
     b8e:	71 09       	sbc	r23, r1
     b90:	3f c0       	rjmp	.+126    	; 0xc10 <__fpcmp_parts_f+0xac>
     b92:	84 30       	cpi	r24, 0x04	; 4
     b94:	21 f0       	breq	.+8      	; 0xb9e <__fpcmp_parts_f+0x3a>
     b96:	92 30       	cpi	r25, 0x02	; 2
     b98:	31 f4       	brne	.+12     	; 0xba6 <__fpcmp_parts_f+0x42>
     b9a:	82 30       	cpi	r24, 0x02	; 2
     b9c:	b9 f1       	breq	.+110    	; 0xc0c <__fpcmp_parts_f+0xa8>
     b9e:	81 81       	ldd	r24, Z+1	; 0x01
     ba0:	88 23       	and	r24, r24
     ba2:	89 f1       	breq	.+98     	; 0xc06 <__fpcmp_parts_f+0xa2>
     ba4:	2d c0       	rjmp	.+90     	; 0xc00 <__fpcmp_parts_f+0x9c>
     ba6:	11 96       	adiw	r26, 0x01	; 1
     ba8:	1c 91       	ld	r17, X
     baa:	11 97       	sbiw	r26, 0x01	; 1
     bac:	82 30       	cpi	r24, 0x02	; 2
     bae:	f1 f0       	breq	.+60     	; 0xbec <__fpcmp_parts_f+0x88>
     bb0:	81 81       	ldd	r24, Z+1	; 0x01
     bb2:	18 17       	cp	r17, r24
     bb4:	d9 f4       	brne	.+54     	; 0xbec <__fpcmp_parts_f+0x88>
     bb6:	12 96       	adiw	r26, 0x02	; 2
     bb8:	2d 91       	ld	r18, X+
     bba:	3c 91       	ld	r19, X
     bbc:	13 97       	sbiw	r26, 0x03	; 3
     bbe:	82 81       	ldd	r24, Z+2	; 0x02
     bc0:	93 81       	ldd	r25, Z+3	; 0x03
     bc2:	82 17       	cp	r24, r18
     bc4:	93 07       	cpc	r25, r19
     bc6:	94 f0       	brlt	.+36     	; 0xbec <__fpcmp_parts_f+0x88>
     bc8:	28 17       	cp	r18, r24
     bca:	39 07       	cpc	r19, r25
     bcc:	bc f0       	brlt	.+46     	; 0xbfc <__fpcmp_parts_f+0x98>
     bce:	14 96       	adiw	r26, 0x04	; 4
     bd0:	8d 91       	ld	r24, X+
     bd2:	9d 91       	ld	r25, X+
     bd4:	0d 90       	ld	r0, X+
     bd6:	bc 91       	ld	r27, X
     bd8:	a0 2d       	mov	r26, r0
     bda:	24 81       	ldd	r18, Z+4	; 0x04
     bdc:	35 81       	ldd	r19, Z+5	; 0x05
     bde:	46 81       	ldd	r20, Z+6	; 0x06
     be0:	57 81       	ldd	r21, Z+7	; 0x07
     be2:	28 17       	cp	r18, r24
     be4:	39 07       	cpc	r19, r25
     be6:	4a 07       	cpc	r20, r26
     be8:	5b 07       	cpc	r21, r27
     bea:	18 f4       	brcc	.+6      	; 0xbf2 <__fpcmp_parts_f+0x8e>
     bec:	11 23       	and	r17, r17
     bee:	41 f0       	breq	.+16     	; 0xc00 <__fpcmp_parts_f+0x9c>
     bf0:	0a c0       	rjmp	.+20     	; 0xc06 <__fpcmp_parts_f+0xa2>
     bf2:	82 17       	cp	r24, r18
     bf4:	93 07       	cpc	r25, r19
     bf6:	a4 07       	cpc	r26, r20
     bf8:	b5 07       	cpc	r27, r21
     bfa:	40 f4       	brcc	.+16     	; 0xc0c <__fpcmp_parts_f+0xa8>
     bfc:	11 23       	and	r17, r17
     bfe:	19 f0       	breq	.+6      	; 0xc06 <__fpcmp_parts_f+0xa2>
     c00:	61 e0       	ldi	r22, 0x01	; 1
     c02:	70 e0       	ldi	r23, 0x00	; 0
     c04:	05 c0       	rjmp	.+10     	; 0xc10 <__fpcmp_parts_f+0xac>
     c06:	6f ef       	ldi	r22, 0xFF	; 255
     c08:	7f ef       	ldi	r23, 0xFF	; 255
     c0a:	02 c0       	rjmp	.+4      	; 0xc10 <__fpcmp_parts_f+0xac>
     c0c:	60 e0       	ldi	r22, 0x00	; 0
     c0e:	70 e0       	ldi	r23, 0x00	; 0
     c10:	cb 01       	movw	r24, r22
     c12:	1f 91       	pop	r17
     c14:	08 95       	ret

00000c16 <main>:

extern volatile u8 UART_RxBuffer[RX_BUFFER_SIZE];
extern volatile boolean Rx_Buffer_Ready;

int main ()
{
     c16:	cf 93       	push	r28
     c18:	df 93       	push	r29
	u8 uartResult = 0;
	Glbl_Interrupt_Enable();
     c1a:	0e 94 91 09 	call	0x1322	; 0x1322 <Glbl_Interrupt_Enable>
	Lcd_Init();
     c1e:	0e 94 ae 07 	call	0xf5c	; 0xf5c <Lcd_Init>
	Lcd_Cmd(_LCD_CURSOR_OFF);
     c22:	8c e0       	ldi	r24, 0x0C	; 12
     c24:	0e 94 86 07 	call	0xf0c	; 0xf0c <Lcd_Cmd>
	LED_Init();
     c28:	0e 94 d1 06 	call	0xda2	; 0xda2 <LED_Init>
	UART_Init(UART_BAUDRATE_9600);
     c2c:	87 e6       	ldi	r24, 0x67	; 103
     c2e:	90 e0       	ldi	r25, 0x00	; 0
     c30:	0e 94 97 08 	call	0x112e	; 0x112e <UART_Init>
	UART_TransmitStr("Hello UART.......");
     c34:	80 e6       	ldi	r24, 0x60	; 96
     c36:	90 e0       	ldi	r25, 0x00	; 0
     c38:	0e 94 b2 08 	call	0x1164	; 0x1164 <UART_TransmitStr>
		if (Rx_Buffer_Ready == TRUE)
		{
			Rx_Buffer_Ready = FALSE;
			Lcd_Cmd(_LCD_CLEAR);
			Lcd_Goto_Row_Column(0, 0);
			Lcd_DisplayStr(UART_RxBuffer);
     c3c:	cd eb       	ldi	r28, 0xBD	; 189
     c3e:	d1 e0       	ldi	r29, 0x01	; 1
	LED_Init();
	UART_Init(UART_BAUDRATE_9600);
	UART_TransmitStr("Hello UART.......");
	while (1)
	{
		if (Rx_Buffer_Ready == TRUE)
     c40:	80 91 bc 01 	lds	r24, 0x01BC
     c44:	81 30       	cpi	r24, 0x01	; 1
     c46:	e1 f7       	brne	.-8      	; 0xc40 <main+0x2a>
		{
			Rx_Buffer_Ready = FALSE;
     c48:	10 92 bc 01 	sts	0x01BC, r1
			Lcd_Cmd(_LCD_CLEAR);
     c4c:	0e 94 86 07 	call	0xf0c	; 0xf0c <Lcd_Cmd>
			Lcd_Goto_Row_Column(0, 0);
     c50:	80 e0       	ldi	r24, 0x00	; 0
     c52:	60 e0       	ldi	r22, 0x00	; 0
     c54:	0e 94 9f 07 	call	0xf3e	; 0xf3e <Lcd_Goto_Row_Column>
			Lcd_DisplayStr(UART_RxBuffer);
     c58:	ce 01       	movw	r24, r28
     c5a:	0e 94 77 07 	call	0xeee	; 0xeee <Lcd_DisplayStr>
     c5e:	f0 cf       	rjmp	.-32     	; 0xc40 <main+0x2a>

00000c60 <SSD_DisplayNumber>:
	/*	Configure Control Lines As Output	*/
	Dio_ConfigChannel(DIO_PORTB,DIO_PIN1,OUTPUT);
	Dio_ConfigChannel(DIO_PORTB,DIO_PIN2,OUTPUT);
}
void SSD_DisplayNumber(u8 num)
{
     c60:	ff 92       	push	r15
     c62:	0f 93       	push	r16
     c64:	1f 93       	push	r17
     c66:	f8 2e       	mov	r15, r24
	u8 loc_FirstDigit = (num/10)<<4;
	u8 loc_Second_Digit = (num%10)<<4;

	/*	Enable SSD1	*/
	Dio_WriteChannel(DIO_PORTB, DIO_PIN2, STD_HIGH);
     c68:	81 e0       	ldi	r24, 0x01	; 1
     c6a:	62 e0       	ldi	r22, 0x02	; 2
     c6c:	41 e0       	ldi	r20, 0x01	; 1
     c6e:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <Dio_WriteChannel>
	/*	Disable SSD2	*/
	Dio_WriteChannel(DIO_PORTB, DIO_PIN1, STD_LOW);
     c72:	81 e0       	ldi	r24, 0x01	; 1
     c74:	61 e0       	ldi	r22, 0x01	; 1
     c76:	40 e0       	ldi	r20, 0x00	; 0
     c78:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <Dio_WriteChannel>
	/*	Write Number To SSD	*/
	Dio_WriteGroup(DIO_PORTA,SSD_MASK,loc_FirstDigit);
     c7c:	8f 2d       	mov	r24, r15
     c7e:	6a e0       	ldi	r22, 0x0A	; 10
     c80:	0e 94 b2 0b 	call	0x1764	; 0x1764 <__udivmodqi4>
     c84:	48 2f       	mov	r20, r24
     c86:	42 95       	swap	r20
     c88:	40 7f       	andi	r20, 0xF0	; 240
     c8a:	80 e0       	ldi	r24, 0x00	; 0
     c8c:	60 ef       	ldi	r22, 0xF0	; 240
     c8e:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <Dio_WriteGroup>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c92:	00 ea       	ldi	r16, 0xA0	; 160
     c94:	1f e0       	ldi	r17, 0x0F	; 15
     c96:	c8 01       	movw	r24, r16
     c98:	01 97       	sbiw	r24, 0x01	; 1
     c9a:	f1 f7       	brne	.-4      	; 0xc98 <SSD_DisplayNumber+0x38>
	/*	wait(1m)	*/
	_delay_ms(1);

	/*	Disable SSD1	*/
	Dio_WriteChannel(DIO_PORTB, DIO_PIN2, STD_LOW);
     c9c:	81 e0       	ldi	r24, 0x01	; 1
     c9e:	62 e0       	ldi	r22, 0x02	; 2
     ca0:	40 e0       	ldi	r20, 0x00	; 0
     ca2:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <Dio_WriteChannel>
	/*	Enable SSD2	*/
	Dio_WriteChannel(DIO_PORTB, DIO_PIN1, STD_HIGH);
     ca6:	81 e0       	ldi	r24, 0x01	; 1
     ca8:	61 e0       	ldi	r22, 0x01	; 1
     caa:	41 e0       	ldi	r20, 0x01	; 1
     cac:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <Dio_WriteChannel>
	/*	Write Number To SSD	*/
	Dio_WriteGroup(DIO_PORTA,SSD_MASK,loc_Second_Digit);
     cb0:	8f 2d       	mov	r24, r15
     cb2:	6a e0       	ldi	r22, 0x0A	; 10
     cb4:	0e 94 b2 0b 	call	0x1764	; 0x1764 <__udivmodqi4>
     cb8:	92 95       	swap	r25
     cba:	90 7f       	andi	r25, 0xF0	; 240
     cbc:	80 e0       	ldi	r24, 0x00	; 0
     cbe:	60 ef       	ldi	r22, 0xF0	; 240
     cc0:	49 2f       	mov	r20, r25
     cc2:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <Dio_WriteGroup>
     cc6:	c8 01       	movw	r24, r16
     cc8:	01 97       	sbiw	r24, 0x01	; 1
     cca:	f1 f7       	brne	.-4      	; 0xcc8 <SSD_DisplayNumber+0x68>
	/*	wait(1m)	*/
	_delay_ms(1);
}
     ccc:	1f 91       	pop	r17
     cce:	0f 91       	pop	r16
     cd0:	ff 90       	pop	r15
     cd2:	08 95       	ret

00000cd4 <SSD_Init>:
 */
#include "SSD.h"
void SSD_Init(void)
{
	/*	Configure Data Lines As Output	*/
	Dio_ConfigChannel(DIO_PORTA,DIO_PIN4,OUTPUT);
     cd4:	80 e0       	ldi	r24, 0x00	; 0
     cd6:	64 e0       	ldi	r22, 0x04	; 4
     cd8:	41 e0       	ldi	r20, 0x01	; 1
     cda:	0e 94 f5 09 	call	0x13ea	; 0x13ea <Dio_ConfigChannel>
	Dio_ConfigChannel(DIO_PORTA,DIO_PIN5,OUTPUT);
     cde:	80 e0       	ldi	r24, 0x00	; 0
     ce0:	65 e0       	ldi	r22, 0x05	; 5
     ce2:	41 e0       	ldi	r20, 0x01	; 1
     ce4:	0e 94 f5 09 	call	0x13ea	; 0x13ea <Dio_ConfigChannel>
	Dio_ConfigChannel(DIO_PORTA,DIO_PIN6,OUTPUT);
     ce8:	80 e0       	ldi	r24, 0x00	; 0
     cea:	66 e0       	ldi	r22, 0x06	; 6
     cec:	41 e0       	ldi	r20, 0x01	; 1
     cee:	0e 94 f5 09 	call	0x13ea	; 0x13ea <Dio_ConfigChannel>
	Dio_ConfigChannel(DIO_PORTA,DIO_PIN7,OUTPUT);
     cf2:	80 e0       	ldi	r24, 0x00	; 0
     cf4:	67 e0       	ldi	r22, 0x07	; 7
     cf6:	41 e0       	ldi	r20, 0x01	; 1
     cf8:	0e 94 f5 09 	call	0x13ea	; 0x13ea <Dio_ConfigChannel>

	/*	Configure Control Lines As Output	*/
	Dio_ConfigChannel(DIO_PORTB,DIO_PIN1,OUTPUT);
     cfc:	81 e0       	ldi	r24, 0x01	; 1
     cfe:	61 e0       	ldi	r22, 0x01	; 1
     d00:	41 e0       	ldi	r20, 0x01	; 1
     d02:	0e 94 f5 09 	call	0x13ea	; 0x13ea <Dio_ConfigChannel>
	Dio_ConfigChannel(DIO_PORTB,DIO_PIN2,OUTPUT);
     d06:	81 e0       	ldi	r24, 0x01	; 1
     d08:	62 e0       	ldi	r22, 0x02	; 2
     d0a:	41 e0       	ldi	r20, 0x01	; 1
     d0c:	0e 94 f5 09 	call	0x13ea	; 0x13ea <Dio_ConfigChannel>
}
     d10:	08 95       	ret

00000d12 <LED_TOGGLE>:
		break;
	}
}
void LED_TOGGLE(led_type ledId)
{
	switch (ledId)
     d12:	81 30       	cpi	r24, 0x01	; 1
     d14:	51 f0       	breq	.+20     	; 0xd2a <LED_TOGGLE+0x18>
     d16:	81 30       	cpi	r24, 0x01	; 1
     d18:	18 f0       	brcs	.+6      	; 0xd20 <LED_TOGGLE+0xe>
     d1a:	82 30       	cpi	r24, 0x02	; 2
     d1c:	79 f4       	brne	.+30     	; 0xd3c <LED_TOGGLE+0x2a>
     d1e:	0a c0       	rjmp	.+20     	; 0xd34 <LED_TOGGLE+0x22>
	{
	case LED0:
		Dio_TogglChannel(LED0_PORT,LED0_PIN);
     d20:	82 e0       	ldi	r24, 0x02	; 2
     d22:	62 e0       	ldi	r22, 0x02	; 2
     d24:	0e 94 22 0b 	call	0x1644	; 0x1644 <Dio_TogglChannel>
     d28:	08 95       	ret
		break;

	case LED1:
		Dio_TogglChannel(LED1_PORT,LED1_PIN);
     d2a:	82 e0       	ldi	r24, 0x02	; 2
     d2c:	67 e0       	ldi	r22, 0x07	; 7
     d2e:	0e 94 22 0b 	call	0x1644	; 0x1644 <Dio_TogglChannel>
     d32:	08 95       	ret
		break;

	case LED2:
		Dio_TogglChannel(LED2_PORT,LED2_PIN);
     d34:	83 e0       	ldi	r24, 0x03	; 3
     d36:	63 e0       	ldi	r22, 0x03	; 3
     d38:	0e 94 22 0b 	call	0x1644	; 0x1644 <Dio_TogglChannel>
     d3c:	08 95       	ret

00000d3e <LED_OFF>:
	}
}

void LED_OFF(led_type ledId)
{
	switch (ledId)
     d3e:	81 30       	cpi	r24, 0x01	; 1
     d40:	59 f0       	breq	.+22     	; 0xd58 <LED_OFF+0x1a>
     d42:	81 30       	cpi	r24, 0x01	; 1
     d44:	18 f0       	brcs	.+6      	; 0xd4c <LED_OFF+0xe>
     d46:	82 30       	cpi	r24, 0x02	; 2
     d48:	91 f4       	brne	.+36     	; 0xd6e <LED_OFF+0x30>
     d4a:	0c c0       	rjmp	.+24     	; 0xd64 <LED_OFF+0x26>
	{
	case LED0:
		Dio_WriteChannel(LED0_PORT,LED0_PIN,STD_LOW);
     d4c:	82 e0       	ldi	r24, 0x02	; 2
     d4e:	62 e0       	ldi	r22, 0x02	; 2
     d50:	40 e0       	ldi	r20, 0x00	; 0
     d52:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <Dio_WriteChannel>
     d56:	08 95       	ret
		break;

	case LED1:
		Dio_WriteChannel(LED1_PORT,LED1_PIN,STD_LOW);
     d58:	82 e0       	ldi	r24, 0x02	; 2
     d5a:	67 e0       	ldi	r22, 0x07	; 7
     d5c:	40 e0       	ldi	r20, 0x00	; 0
     d5e:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <Dio_WriteChannel>
     d62:	08 95       	ret
		break;

	case LED2:
		Dio_WriteChannel(LED2_PORT,LED2_PIN,STD_LOW);
     d64:	83 e0       	ldi	r24, 0x03	; 3
     d66:	63 e0       	ldi	r22, 0x03	; 3
     d68:	40 e0       	ldi	r20, 0x00	; 0
     d6a:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <Dio_WriteChannel>
     d6e:	08 95       	ret

00000d70 <LED_ON>:
	Dio_ConfigChannel(LED2_PORT,LED2_PIN,OUTPUT);
}

void LED_ON(led_type ledId)
{
	switch (ledId)
     d70:	81 30       	cpi	r24, 0x01	; 1
     d72:	59 f0       	breq	.+22     	; 0xd8a <LED_ON+0x1a>
     d74:	81 30       	cpi	r24, 0x01	; 1
     d76:	18 f0       	brcs	.+6      	; 0xd7e <LED_ON+0xe>
     d78:	82 30       	cpi	r24, 0x02	; 2
     d7a:	91 f4       	brne	.+36     	; 0xda0 <LED_ON+0x30>
     d7c:	0c c0       	rjmp	.+24     	; 0xd96 <LED_ON+0x26>
	{
	case LED0:
		Dio_WriteChannel(LED0_PORT,LED0_PIN,STD_HIGH);
     d7e:	82 e0       	ldi	r24, 0x02	; 2
     d80:	62 e0       	ldi	r22, 0x02	; 2
     d82:	41 e0       	ldi	r20, 0x01	; 1
     d84:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <Dio_WriteChannel>
     d88:	08 95       	ret
		break;

	case LED1:
		Dio_WriteChannel(LED1_PORT,LED1_PIN,STD_HIGH);
     d8a:	82 e0       	ldi	r24, 0x02	; 2
     d8c:	67 e0       	ldi	r22, 0x07	; 7
     d8e:	41 e0       	ldi	r20, 0x01	; 1
     d90:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <Dio_WriteChannel>
     d94:	08 95       	ret
		break;

	case LED2:
		Dio_WriteChannel(LED2_PORT,LED2_PIN,STD_HIGH);
     d96:	83 e0       	ldi	r24, 0x03	; 3
     d98:	63 e0       	ldi	r22, 0x03	; 3
     d9a:	41 e0       	ldi	r20, 0x01	; 1
     d9c:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <Dio_WriteChannel>
     da0:	08 95       	ret

00000da2 <LED_Init>:

#include "Led.h"

void LED_Init(void)
{
	Dio_ConfigChannel(LED0_PORT,LED0_PIN,OUTPUT);
     da2:	82 e0       	ldi	r24, 0x02	; 2
     da4:	62 e0       	ldi	r22, 0x02	; 2
     da6:	41 e0       	ldi	r20, 0x01	; 1
     da8:	0e 94 f5 09 	call	0x13ea	; 0x13ea <Dio_ConfigChannel>
	Dio_ConfigChannel(LED1_PORT,LED1_PIN,OUTPUT);
     dac:	82 e0       	ldi	r24, 0x02	; 2
     dae:	67 e0       	ldi	r22, 0x07	; 7
     db0:	41 e0       	ldi	r20, 0x01	; 1
     db2:	0e 94 f5 09 	call	0x13ea	; 0x13ea <Dio_ConfigChannel>
	Dio_ConfigChannel(LED2_PORT,LED2_PIN,OUTPUT);
     db6:	83 e0       	ldi	r24, 0x03	; 3
     db8:	63 e0       	ldi	r22, 0x03	; 3
     dba:	41 e0       	ldi	r20, 0x01	; 1
     dbc:	0e 94 f5 09 	call	0x13ea	; 0x13ea <Dio_ConfigChannel>
}
     dc0:	08 95       	ret

00000dc2 <Enable_Pulse>:
	Lcd_Goto_Row_Column(0,0);
	Lcd_Cmd(_LCD_CURSOR_OFF);
}
static void Enable_Pulse(void)
{
	Dio_WriteChannel(DIO_PORTB, DIO_PIN3, STD_HIGH);
     dc2:	81 e0       	ldi	r24, 0x01	; 1
     dc4:	63 e0       	ldi	r22, 0x03	; 3
     dc6:	41 e0       	ldi	r20, 0x01	; 1
     dc8:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <Dio_WriteChannel>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     dcc:	85 e0       	ldi	r24, 0x05	; 5
     dce:	8a 95       	dec	r24
     dd0:	f1 f7       	brne	.-4      	; 0xdce <Enable_Pulse+0xc>
	_delay_us(1);
	Dio_WriteChannel(DIO_PORTB, DIO_PIN3, STD_LOW);
     dd2:	81 e0       	ldi	r24, 0x01	; 1
     dd4:	63 e0       	ldi	r22, 0x03	; 3
     dd6:	40 e0       	ldi	r20, 0x00	; 0
     dd8:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <Dio_WriteChannel>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     ddc:	80 e4       	ldi	r24, 0x40	; 64
     dde:	9f e1       	ldi	r25, 0x1F	; 31
     de0:	01 97       	sbiw	r24, 0x01	; 1
     de2:	f1 f7       	brne	.-4      	; 0xde0 <Enable_Pulse+0x1e>
	_delay_ms(2);
}
     de4:	08 95       	ret

00000de6 <Lcd_DisplayChr>:
	Dio_WriteGroup(DIO_PORTA,LCD_MASK,Low_Nibble);
	Enable_Pulse();
}

void Lcd_DisplayChr(u8 chr)
{
     de6:	1f 93       	push	r17
     de8:	18 2f       	mov	r17, r24

static void Lcd_Data(u8 data) /*	RS-> 1	*/
{
	u8 High_Nibble = data;    /*	MSB	*/
	u8 Low_Nibble = data<<4;		/*	LSB	*/
	Dio_WriteChannel(DIO_PORTB, DIO_PIN1, STD_HIGH);   /* Data Mode */
     dea:	81 e0       	ldi	r24, 0x01	; 1
     dec:	61 e0       	ldi	r22, 0x01	; 1
     dee:	41 e0       	ldi	r20, 0x01	; 1
     df0:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <Dio_WriteChannel>
	Dio_WriteGroup(DIO_PORTA,LCD_MASK,High_Nibble);
     df4:	80 e0       	ldi	r24, 0x00	; 0
     df6:	60 ef       	ldi	r22, 0xF0	; 240
     df8:	41 2f       	mov	r20, r17
     dfa:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <Dio_WriteGroup>
	Enable_Pulse();
     dfe:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <Enable_Pulse>

	Dio_WriteGroup(DIO_PORTA,LCD_MASK,Low_Nibble);
     e02:	12 95       	swap	r17
     e04:	10 7f       	andi	r17, 0xF0	; 240
     e06:	80 e0       	ldi	r24, 0x00	; 0
     e08:	60 ef       	ldi	r22, 0xF0	; 240
     e0a:	41 2f       	mov	r20, r17
     e0c:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <Dio_WriteGroup>
	Enable_Pulse();
     e10:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <Enable_Pulse>
}

void Lcd_DisplayChr(u8 chr)
{
	Lcd_Data(chr);
}
     e14:	1f 91       	pop	r17
     e16:	08 95       	ret

00000e18 <Lcd_DisplayNum>:
		Lcd_Cmd(0xC0+col);
		break;
	}
}
void Lcd_DisplayNum(u16 num)
{
     e18:	0f 93       	push	r16
     e1a:	1f 93       	push	r17
     e1c:	8c 01       	movw	r16, r24
	Lcd_DisplayChr(num/1000 + '0');
     e1e:	68 ee       	ldi	r22, 0xE8	; 232
     e20:	73 e0       	ldi	r23, 0x03	; 3
     e22:	0e 94 be 0b 	call	0x177c	; 0x177c <__udivmodhi4>
     e26:	86 2f       	mov	r24, r22
     e28:	80 5d       	subi	r24, 0xD0	; 208
     e2a:	0e 94 f3 06 	call	0xde6	; 0xde6 <Lcd_DisplayChr>
	Lcd_DisplayChr(num%1000/100 + '0');
     e2e:	c8 01       	movw	r24, r16
     e30:	68 ee       	ldi	r22, 0xE8	; 232
     e32:	73 e0       	ldi	r23, 0x03	; 3
     e34:	0e 94 be 0b 	call	0x177c	; 0x177c <__udivmodhi4>
     e38:	18 2f       	mov	r17, r24
     e3a:	09 2f       	mov	r16, r25
     e3c:	64 e6       	ldi	r22, 0x64	; 100
     e3e:	70 e0       	ldi	r23, 0x00	; 0
     e40:	0e 94 be 0b 	call	0x177c	; 0x177c <__udivmodhi4>
     e44:	86 2f       	mov	r24, r22
     e46:	80 5d       	subi	r24, 0xD0	; 208
     e48:	0e 94 f3 06 	call	0xde6	; 0xde6 <Lcd_DisplayChr>
	Lcd_DisplayChr(num%1000%100/10 + '0');
     e4c:	81 2f       	mov	r24, r17
     e4e:	90 2f       	mov	r25, r16
     e50:	64 e6       	ldi	r22, 0x64	; 100
     e52:	70 e0       	ldi	r23, 0x00	; 0
     e54:	0e 94 be 0b 	call	0x177c	; 0x177c <__udivmodhi4>
     e58:	18 2f       	mov	r17, r24
     e5a:	09 2f       	mov	r16, r25
     e5c:	6a e0       	ldi	r22, 0x0A	; 10
     e5e:	70 e0       	ldi	r23, 0x00	; 0
     e60:	0e 94 be 0b 	call	0x177c	; 0x177c <__udivmodhi4>
     e64:	86 2f       	mov	r24, r22
     e66:	80 5d       	subi	r24, 0xD0	; 208
     e68:	0e 94 f3 06 	call	0xde6	; 0xde6 <Lcd_DisplayChr>
	Lcd_DisplayChr(num%1000%100%10 + '0');
     e6c:	81 2f       	mov	r24, r17
     e6e:	90 2f       	mov	r25, r16
     e70:	6a e0       	ldi	r22, 0x0A	; 10
     e72:	70 e0       	ldi	r23, 0x00	; 0
     e74:	0e 94 be 0b 	call	0x177c	; 0x177c <__udivmodhi4>
     e78:	80 5d       	subi	r24, 0xD0	; 208
     e7a:	0e 94 f3 06 	call	0xde6	; 0xde6 <Lcd_DisplayChr>
}
     e7e:	1f 91       	pop	r17
     e80:	0f 91       	pop	r16
     e82:	08 95       	ret

00000e84 <LcdDisplayFloat>:

void LcdDisplayFloat(f64 floatNum)
{
     e84:	af 92       	push	r10
     e86:	bf 92       	push	r11
     e88:	cf 92       	push	r12
     e8a:	df 92       	push	r13
     e8c:	ef 92       	push	r14
     e8e:	ff 92       	push	r15
     e90:	0f 93       	push	r16
     e92:	1f 93       	push	r17
     e94:	5b 01       	movw	r10, r22
     e96:	6c 01       	movw	r12, r24
	u16 intPart = 0;
	f64 fractionTemp = 0;
	u16 fractionPart = 0;

	intPart = (u16)floatNum;
     e98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e9c:	dc 01       	movw	r26, r24
     e9e:	cb 01       	movw	r24, r22
     ea0:	7c 01       	movw	r14, r24
	fractionTemp = floatNum - intPart;
	fractionPart = fractionTemp * 100;

	Lcd_DisplayNum(intPart);
     ea2:	0e 94 0c 07 	call	0xe18	; 0xe18 <Lcd_DisplayNum>
	Lcd_DisplayChr('.');
     ea6:	8e e2       	ldi	r24, 0x2E	; 46
     ea8:	0e 94 f3 06 	call	0xde6	; 0xde6 <Lcd_DisplayChr>
	Lcd_DisplayNum(fractionPart);
     eac:	00 e0       	ldi	r16, 0x00	; 0
     eae:	10 e0       	ldi	r17, 0x00	; 0
     eb0:	c8 01       	movw	r24, r16
     eb2:	b7 01       	movw	r22, r14
     eb4:	0e 94 9d 03 	call	0x73a	; 0x73a <__floatunsisf>
     eb8:	9b 01       	movw	r18, r22
     eba:	ac 01       	movw	r20, r24
     ebc:	c6 01       	movw	r24, r12
     ebe:	b5 01       	movw	r22, r10
     ec0:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
     ec4:	20 e0       	ldi	r18, 0x00	; 0
     ec6:	30 e0       	ldi	r19, 0x00	; 0
     ec8:	48 ec       	ldi	r20, 0xC8	; 200
     eca:	52 e4       	ldi	r21, 0x42	; 66
     ecc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ed0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ed4:	dc 01       	movw	r26, r24
     ed6:	cb 01       	movw	r24, r22
     ed8:	0e 94 0c 07 	call	0xe18	; 0xe18 <Lcd_DisplayNum>
}
     edc:	1f 91       	pop	r17
     ede:	0f 91       	pop	r16
     ee0:	ff 90       	pop	r15
     ee2:	ef 90       	pop	r14
     ee4:	df 90       	pop	r13
     ee6:	cf 90       	pop	r12
     ee8:	bf 90       	pop	r11
     eea:	af 90       	pop	r10
     eec:	08 95       	ret

00000eee <Lcd_DisplayStr>:
{
	Lcd_Data(chr);
}

void Lcd_DisplayStr(u8* str)
{
     eee:	cf 93       	push	r28
     ef0:	df 93       	push	r29
     ef2:	ec 01       	movw	r28, r24
	while (*str != '\0')
     ef4:	88 81       	ld	r24, Y
     ef6:	88 23       	and	r24, r24
     ef8:	31 f0       	breq	.+12     	; 0xf06 <Lcd_DisplayStr+0x18>
	{
		Lcd_DisplayChr(*str);
     efa:	0e 94 f3 06 	call	0xde6	; 0xde6 <Lcd_DisplayChr>
		str++;
     efe:	21 96       	adiw	r28, 0x01	; 1
	Lcd_Data(chr);
}

void Lcd_DisplayStr(u8* str)
{
	while (*str != '\0')
     f00:	88 81       	ld	r24, Y
     f02:	88 23       	and	r24, r24
     f04:	d1 f7       	brne	.-12     	; 0xefa <Lcd_DisplayStr+0xc>
	{
		Lcd_DisplayChr(*str);
		str++;
	}
}
     f06:	df 91       	pop	r29
     f08:	cf 91       	pop	r28
     f0a:	08 95       	ret

00000f0c <Lcd_Cmd>:
	Dio_WriteGroup(DIO_PORTA,LCD_MASK,Low_Nibble);
	Enable_Pulse();
}

void Lcd_Cmd(lcd_Cmd_Type cmd)/*	RS-> 0	*/
{
     f0c:	1f 93       	push	r17
     f0e:	18 2f       	mov	r17, r24
	u8 High_Nibble = cmd;    /*	MSB	*/
	u8 Low_Nibble = cmd<<4;		/*	LSB	*/
	Dio_WriteChannel(DIO_PORTB, DIO_PIN1, STD_LOW);   /* Command Mode */
     f10:	81 e0       	ldi	r24, 0x01	; 1
     f12:	61 e0       	ldi	r22, 0x01	; 1
     f14:	40 e0       	ldi	r20, 0x00	; 0
     f16:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <Dio_WriteChannel>
	Dio_WriteGroup(DIO_PORTA,LCD_MASK,High_Nibble);
     f1a:	80 e0       	ldi	r24, 0x00	; 0
     f1c:	60 ef       	ldi	r22, 0xF0	; 240
     f1e:	41 2f       	mov	r20, r17
     f20:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <Dio_WriteGroup>
	Enable_Pulse();
     f24:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <Enable_Pulse>

	Dio_WriteGroup(DIO_PORTA,LCD_MASK,Low_Nibble);
     f28:	12 95       	swap	r17
     f2a:	10 7f       	andi	r17, 0xF0	; 240
     f2c:	80 e0       	ldi	r24, 0x00	; 0
     f2e:	60 ef       	ldi	r22, 0xF0	; 240
     f30:	41 2f       	mov	r20, r17
     f32:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <Dio_WriteGroup>
	Enable_Pulse();
     f36:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <Enable_Pulse>
}
     f3a:	1f 91       	pop	r17
     f3c:	08 95       	ret

00000f3e <Lcd_Goto_Row_Column>:
	}
}

void Lcd_Goto_Row_Column(u8 row, u8 col)
{
	switch (row)
     f3e:	88 23       	and	r24, r24
     f40:	19 f0       	breq	.+6      	; 0xf48 <Lcd_Goto_Row_Column+0xa>
     f42:	81 30       	cpi	r24, 0x01	; 1
     f44:	51 f4       	brne	.+20     	; 0xf5a <Lcd_Goto_Row_Column+0x1c>
     f46:	05 c0       	rjmp	.+10     	; 0xf52 <Lcd_Goto_Row_Column+0x14>
	{
	case 0:
		Lcd_Cmd(0x80+col);
     f48:	86 2f       	mov	r24, r22
     f4a:	80 58       	subi	r24, 0x80	; 128
     f4c:	0e 94 86 07 	call	0xf0c	; 0xf0c <Lcd_Cmd>
     f50:	08 95       	ret
		break;

	case 1:
		Lcd_Cmd(0xC0+col);
     f52:	86 2f       	mov	r24, r22
     f54:	80 54       	subi	r24, 0x40	; 64
     f56:	0e 94 86 07 	call	0xf0c	; 0xf0c <Lcd_Cmd>
     f5a:	08 95       	ret

00000f5c <Lcd_Init>:
			}
	}
}

void Lcd_Init(void)
{
     f5c:	af 92       	push	r10
     f5e:	bf 92       	push	r11
     f60:	cf 92       	push	r12
     f62:	df 92       	push	r13
     f64:	ef 92       	push	r14
     f66:	ff 92       	push	r15
     f68:	0f 93       	push	r16
     f6a:	1f 93       	push	r17
     f6c:	cf 93       	push	r28
     f6e:	df 93       	push	r29
	/*	Configure Data Lines As Output	*/
	Dio_ConfigChannel(DIO_PORTA,DIO_PIN4,OUTPUT);
     f70:	80 e0       	ldi	r24, 0x00	; 0
     f72:	64 e0       	ldi	r22, 0x04	; 4
     f74:	41 e0       	ldi	r20, 0x01	; 1
     f76:	0e 94 f5 09 	call	0x13ea	; 0x13ea <Dio_ConfigChannel>
	Dio_ConfigChannel(DIO_PORTA,DIO_PIN5,OUTPUT);
     f7a:	80 e0       	ldi	r24, 0x00	; 0
     f7c:	65 e0       	ldi	r22, 0x05	; 5
     f7e:	41 e0       	ldi	r20, 0x01	; 1
     f80:	0e 94 f5 09 	call	0x13ea	; 0x13ea <Dio_ConfigChannel>
	Dio_ConfigChannel(DIO_PORTA,DIO_PIN6,OUTPUT);
     f84:	80 e0       	ldi	r24, 0x00	; 0
     f86:	66 e0       	ldi	r22, 0x06	; 6
     f88:	41 e0       	ldi	r20, 0x01	; 1
     f8a:	0e 94 f5 09 	call	0x13ea	; 0x13ea <Dio_ConfigChannel>
	Dio_ConfigChannel(DIO_PORTA,DIO_PIN7,OUTPUT);
     f8e:	80 e0       	ldi	r24, 0x00	; 0
     f90:	67 e0       	ldi	r22, 0x07	; 7
     f92:	41 e0       	ldi	r20, 0x01	; 1
     f94:	0e 94 f5 09 	call	0x13ea	; 0x13ea <Dio_ConfigChannel>

	/*	Configure Control Lines As Output	*/
	Dio_ConfigChannel(DIO_PORTB,DIO_PIN1,OUTPUT);   /*	RS	*/
     f98:	81 e0       	ldi	r24, 0x01	; 1
     f9a:	61 e0       	ldi	r22, 0x01	; 1
     f9c:	41 e0       	ldi	r20, 0x01	; 1
     f9e:	0e 94 f5 09 	call	0x13ea	; 0x13ea <Dio_ConfigChannel>
	Dio_ConfigChannel(DIO_PORTB,DIO_PIN2,OUTPUT);	/*	RW	*/
     fa2:	81 e0       	ldi	r24, 0x01	; 1
     fa4:	62 e0       	ldi	r22, 0x02	; 2
     fa6:	41 e0       	ldi	r20, 0x01	; 1
     fa8:	0e 94 f5 09 	call	0x13ea	; 0x13ea <Dio_ConfigChannel>
	Dio_ConfigChannel(DIO_PORTB,DIO_PIN3,OUTPUT);	/*	En	*/
     fac:	81 e0       	ldi	r24, 0x01	; 1
     fae:	63 e0       	ldi	r22, 0x03	; 3
     fb0:	41 e0       	ldi	r20, 0x01	; 1
     fb2:	0e 94 f5 09 	call	0x13ea	; 0x13ea <Dio_ConfigChannel>

	Dio_WriteChannel(DIO_PORTB, DIO_PIN2, STD_LOW);
     fb6:	81 e0       	ldi	r24, 0x01	; 1
     fb8:	62 e0       	ldi	r22, 0x02	; 2
     fba:	40 e0       	ldi	r20, 0x00	; 0
     fbc:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <Dio_WriteChannel>
     fc0:	80 e6       	ldi	r24, 0x60	; 96
     fc2:	9a ee       	ldi	r25, 0xEA	; 234
     fc4:	01 97       	sbiw	r24, 0x01	; 1
     fc6:	f1 f7       	brne	.-4      	; 0xfc4 <Lcd_Init+0x68>

	_delay_ms(15);

	Lcd_Cmd(3);
     fc8:	83 e0       	ldi	r24, 0x03	; 3
     fca:	0e 94 86 07 	call	0xf0c	; 0xf0c <Lcd_Cmd>
     fce:	80 e2       	ldi	r24, 0x20	; 32
     fd0:	9e e4       	ldi	r25, 0x4E	; 78
     fd2:	01 97       	sbiw	r24, 0x01	; 1
     fd4:	f1 f7       	brne	.-4      	; 0xfd2 <Lcd_Init+0x76>
	_delay_ms(5);
	Lcd_Cmd(3);
     fd6:	83 e0       	ldi	r24, 0x03	; 3
     fd8:	0e 94 86 07 	call	0xf0c	; 0xf0c <Lcd_Cmd>
     fdc:	80 e9       	ldi	r24, 0x90	; 144
     fde:	91 e0       	ldi	r25, 0x01	; 1
     fe0:	01 97       	sbiw	r24, 0x01	; 1
     fe2:	f1 f7       	brne	.-4      	; 0xfe0 <Lcd_Init+0x84>
	_delay_us(100);
	Lcd_Cmd(3);
     fe4:	83 e0       	ldi	r24, 0x03	; 3
     fe6:	0e 94 86 07 	call	0xf0c	; 0xf0c <Lcd_Cmd>
	Lcd_Cmd(2);
     fea:	82 e0       	ldi	r24, 0x02	; 2
     fec:	0e 94 86 07 	call	0xf0c	; 0xf0c <Lcd_Cmd>
	Lcd_Cmd(_LCD_4BIT_MODE);
     ff0:	88 e2       	ldi	r24, 0x28	; 40
     ff2:	0e 94 86 07 	call	0xf0c	; 0xf0c <Lcd_Cmd>
     ff6:	ee 24       	eor	r14, r14
     ff8:	ff 24       	eor	r15, r15
     ffa:	cc 24       	eor	r12, r12
     ffc:	dd 24       	eor	r13, r13
     ffe:	68 94       	set
    1000:	c6 f8       	bld	r12, 6
{
	u8 loc_ByteIndex=0;
	u8 loc_CharIndx=0;
	for (loc_CharIndx=0;loc_CharIndx<NO_CSTOM_CHAR;loc_CharIndx++)
	{
		Lcd_Cmd(_LCD_CGRAM_START_ADDRESS +(loc_CharIndx*8));
    1002:	0f 2e       	mov	r0, r31
    1004:	fa e7       	ldi	r31, 0x7A	; 122
    1006:	af 2e       	mov	r10, r31
    1008:	f1 e0       	ldi	r31, 0x01	; 1
    100a:	bf 2e       	mov	r11, r31
    100c:	f0 2d       	mov	r31, r0
    100e:	00 e0       	ldi	r16, 0x00	; 0
    1010:	8c 2d       	mov	r24, r12
    1012:	0e 94 86 07 	call	0xf0c	; 0xf0c <Lcd_Cmd>
    1016:	97 01       	movw	r18, r14
    1018:	22 0f       	add	r18, r18
    101a:	33 1f       	adc	r19, r19
    101c:	22 0f       	add	r18, r18
    101e:	33 1f       	adc	r19, r19
    1020:	22 0f       	add	r18, r18
    1022:	33 1f       	adc	r19, r19
    1024:	e5 01       	movw	r28, r10
    1026:	c2 0f       	add	r28, r18
    1028:	d3 1f       	adc	r29, r19
    102a:	10 2f       	mov	r17, r16
			for (loc_ByteIndex =0; loc_ByteIndex<NO_CSTOM_CHAR_BYTES;loc_ByteIndex++)
			{
				Lcd_DisplayChr(customChar[loc_CharIndx][loc_ByteIndex]);
    102c:	89 91       	ld	r24, Y+
    102e:	0e 94 f3 06 	call	0xde6	; 0xde6 <Lcd_DisplayChr>
	u8 loc_ByteIndex=0;
	u8 loc_CharIndx=0;
	for (loc_CharIndx=0;loc_CharIndx<NO_CSTOM_CHAR;loc_CharIndx++)
	{
		Lcd_Cmd(_LCD_CGRAM_START_ADDRESS +(loc_CharIndx*8));
			for (loc_ByteIndex =0; loc_ByteIndex<NO_CSTOM_CHAR_BYTES;loc_ByteIndex++)
    1032:	1f 5f       	subi	r17, 0xFF	; 255
    1034:	18 30       	cpi	r17, 0x08	; 8
    1036:	d1 f7       	brne	.-12     	; 0x102c <Lcd_Init+0xd0>
    1038:	08 94       	sec
    103a:	e1 1c       	adc	r14, r1
    103c:	f1 1c       	adc	r15, r1
    103e:	88 e0       	ldi	r24, 0x08	; 8
    1040:	90 e0       	ldi	r25, 0x00	; 0
    1042:	c8 0e       	add	r12, r24
    1044:	d9 1e       	adc	r13, r25
extern u8 customChar[8][8];
static void Lcd_WriteCustom(void)
{
	u8 loc_ByteIndex=0;
	u8 loc_CharIndx=0;
	for (loc_CharIndx=0;loc_CharIndx<NO_CSTOM_CHAR;loc_CharIndx++)
    1046:	98 e0       	ldi	r25, 0x08	; 8
    1048:	e9 16       	cp	r14, r25
    104a:	f1 04       	cpc	r15, r1
    104c:	09 f7       	brne	.-62     	; 0x1010 <Lcd_Init+0xb4>
	_delay_us(100);
	Lcd_Cmd(3);
	Lcd_Cmd(2);
	Lcd_Cmd(_LCD_4BIT_MODE);
	Lcd_WriteCustom();
	Lcd_Goto_Row_Column(0,0);
    104e:	80 e0       	ldi	r24, 0x00	; 0
    1050:	60 e0       	ldi	r22, 0x00	; 0
    1052:	0e 94 9f 07 	call	0xf3e	; 0xf3e <Lcd_Goto_Row_Column>
	Lcd_Cmd(_LCD_CURSOR_OFF);
    1056:	8c e0       	ldi	r24, 0x0C	; 12
    1058:	0e 94 86 07 	call	0xf0c	; 0xf0c <Lcd_Cmd>
}
    105c:	df 91       	pop	r29
    105e:	cf 91       	pop	r28
    1060:	1f 91       	pop	r17
    1062:	0f 91       	pop	r16
    1064:	ff 90       	pop	r15
    1066:	ef 90       	pop	r14
    1068:	df 90       	pop	r13
    106a:	cf 90       	pop	r12
    106c:	bf 90       	pop	r11
    106e:	af 90       	pop	r10
    1070:	08 95       	ret

00001072 <Buzzer_Toggle>:
	Dio_WriteChannel(BUZZER_PORT,BUZZER_PIN,STD_LOW);
}

void Buzzer_Toggle()
{
	Dio_TogglChannel(BUZZER_PORT,BUZZER_PIN);
    1072:	80 e0       	ldi	r24, 0x00	; 0
    1074:	63 e0       	ldi	r22, 0x03	; 3
    1076:	0e 94 22 0b 	call	0x1644	; 0x1644 <Dio_TogglChannel>
}
    107a:	08 95       	ret

0000107c <Buzzer_OFF>:
	Dio_WriteChannel(BUZZER_PORT,BUZZER_PIN,STD_HIGH);
}

void Buzzer_OFF()
{
	Dio_WriteChannel(BUZZER_PORT,BUZZER_PIN,STD_LOW);
    107c:	80 e0       	ldi	r24, 0x00	; 0
    107e:	63 e0       	ldi	r22, 0x03	; 3
    1080:	40 e0       	ldi	r20, 0x00	; 0
    1082:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <Dio_WriteChannel>
}
    1086:	08 95       	ret

00001088 <Buzzer_ON>:
	Dio_ConfigChannel(BUZZER_PORT,BUZZER_PIN,OUTPUT);
}

void Buzzer_ON()
{
	Dio_WriteChannel(BUZZER_PORT,BUZZER_PIN,STD_HIGH);
    1088:	80 e0       	ldi	r24, 0x00	; 0
    108a:	63 e0       	ldi	r22, 0x03	; 3
    108c:	41 e0       	ldi	r20, 0x01	; 1
    108e:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <Dio_WriteChannel>
}
    1092:	08 95       	ret

00001094 <Buzzer_Init>:
 */
#include "Buzzer.h"

void Buzzer_Init()
{
	Dio_ConfigChannel(BUZZER_PORT,BUZZER_PIN,OUTPUT);
    1094:	80 e0       	ldi	r24, 0x00	; 0
    1096:	63 e0       	ldi	r22, 0x03	; 3
    1098:	41 e0       	ldi	r20, 0x01	; 1
    109a:	0e 94 f5 09 	call	0x13ea	; 0x13ea <Dio_ConfigChannel>
}
    109e:	08 95       	ret

000010a0 <Button_GetStatus>:
	Dio_ConfigChannel(BUTTON2_PORT,BUTTON2_PIN,INPUT);
}
button_type Button_GetStatus(buttonID_type button)
{
	button_type status = RELEASED;
	switch (button)
    10a0:	81 30       	cpi	r24, 0x01	; 1
    10a2:	79 f0       	breq	.+30     	; 0x10c2 <Button_GetStatus+0x22>
    10a4:	81 30       	cpi	r24, 0x01	; 1
    10a6:	20 f0       	brcs	.+8      	; 0x10b0 <Button_GetStatus+0x10>
    10a8:	82 30       	cpi	r24, 0x02	; 2
    10aa:	a1 f0       	breq	.+40     	; 0x10d4 <Button_GetStatus+0x34>
    10ac:	90 e0       	ldi	r25, 0x00	; 0
    10ae:	1a c0       	rjmp	.+52     	; 0x10e4 <Button_GetStatus+0x44>
	{
	case BUTTON0:
		if (Dio_ReadChannel(BUTTON0_PORT,BUTTON0_PIN) == STD_HIGH)
    10b0:	81 e0       	ldi	r24, 0x01	; 1
    10b2:	60 e0       	ldi	r22, 0x00	; 0
    10b4:	0e 94 5f 0b 	call	0x16be	; 0x16be <Dio_ReadChannel>
    10b8:	90 e0       	ldi	r25, 0x00	; 0
    10ba:	81 30       	cpi	r24, 0x01	; 1
    10bc:	99 f4       	brne	.+38     	; 0x10e4 <Button_GetStatus+0x44>
    10be:	91 e0       	ldi	r25, 0x01	; 1
    10c0:	11 c0       	rjmp	.+34     	; 0x10e4 <Button_GetStatus+0x44>
			status = RELEASED;
		}
		break;

	case BUTTON1:
		if (Dio_ReadChannel(BUTTON1_PORT,BUTTON1_PIN) == STD_HIGH)
    10c2:	81 e0       	ldi	r24, 0x01	; 1
    10c4:	64 e0       	ldi	r22, 0x04	; 4
    10c6:	0e 94 5f 0b 	call	0x16be	; 0x16be <Dio_ReadChannel>
    10ca:	90 e0       	ldi	r25, 0x00	; 0
    10cc:	81 30       	cpi	r24, 0x01	; 1
    10ce:	51 f4       	brne	.+20     	; 0x10e4 <Button_GetStatus+0x44>
    10d0:	91 e0       	ldi	r25, 0x01	; 1
    10d2:	08 c0       	rjmp	.+16     	; 0x10e4 <Button_GetStatus+0x44>
			status = RELEASED;
		}
		break;

	case BUTTON2:
		if (Dio_ReadChannel(BUTTON2_PORT,BUTTON2_PIN) == STD_HIGH)
    10d4:	83 e0       	ldi	r24, 0x03	; 3
    10d6:	62 e0       	ldi	r22, 0x02	; 2
    10d8:	0e 94 5f 0b 	call	0x16be	; 0x16be <Dio_ReadChannel>
    10dc:	90 e0       	ldi	r25, 0x00	; 0
    10de:	81 30       	cpi	r24, 0x01	; 1
    10e0:	09 f4       	brne	.+2      	; 0x10e4 <Button_GetStatus+0x44>
    10e2:	91 e0       	ldi	r25, 0x01	; 1
			status = RELEASED;
		}
		break;
	}
	return status;
}
    10e4:	89 2f       	mov	r24, r25
    10e6:	08 95       	ret

000010e8 <Button_Init>:
 */
#include "Button.h"

void Button_Init(void)
{
	Dio_ConfigChannel(BUTTON0_PORT,BUTTON0_PIN,INPUT);
    10e8:	81 e0       	ldi	r24, 0x01	; 1
    10ea:	60 e0       	ldi	r22, 0x00	; 0
    10ec:	40 e0       	ldi	r20, 0x00	; 0
    10ee:	0e 94 f5 09 	call	0x13ea	; 0x13ea <Dio_ConfigChannel>
	Dio_ConfigChannel(BUTTON1_PORT,BUTTON1_PIN,INPUT);
    10f2:	81 e0       	ldi	r24, 0x01	; 1
    10f4:	64 e0       	ldi	r22, 0x04	; 4
    10f6:	40 e0       	ldi	r20, 0x00	; 0
    10f8:	0e 94 f5 09 	call	0x13ea	; 0x13ea <Dio_ConfigChannel>
	Dio_ConfigChannel(BUTTON2_PORT,BUTTON2_PIN,INPUT);
    10fc:	83 e0       	ldi	r24, 0x03	; 3
    10fe:	62 e0       	ldi	r22, 0x02	; 2
    1100:	40 e0       	ldi	r20, 0x00	; 0
    1102:	0e 94 f5 09 	call	0x13ea	; 0x13ea <Dio_ConfigChannel>
}
    1106:	08 95       	ret

00001108 <WDG_ON>:
 *****************************************/
#include <Wdg.h>
void WDG_ON(void)
{
	/*	Set Watchdog Timer Window to 2.1 Sec	*/
	WDG_WDTCR_REG |= WDG_WINDOW_5V_2POINT1_SEC;
    1108:	e1 e4       	ldi	r30, 0x41	; 65
    110a:	f0 e0       	ldi	r31, 0x00	; 0
    110c:	80 81       	ld	r24, Z
    110e:	87 60       	ori	r24, 0x07	; 7
    1110:	80 83       	st	Z, r24
	/*	Enable Watchdog Timer	*/
	SET_BIT(WDG_WDTCR_REG,WDG_ENABLE_BIT);
    1112:	80 81       	ld	r24, Z
    1114:	88 60       	ori	r24, 0x08	; 8
    1116:	80 83       	st	Z, r24
}
    1118:	08 95       	ret

0000111a <WDG_OFF>:
void WDG_OFF(void)
{
	WDG_WDTCR_REG =(WDG_ENABLE)|(WDG_TURN_OFF_ENABLE);
    111a:	e1 e4       	ldi	r30, 0x41	; 65
    111c:	f0 e0       	ldi	r31, 0x00	; 0
    111e:	88 e1       	ldi	r24, 0x18	; 24
    1120:	80 83       	st	Z, r24
	CLR_BIT(WDG_WDTCR_REG,WDG_ENABLE_BIT);
    1122:	80 81       	ld	r24, Z
    1124:	87 7f       	andi	r24, 0xF7	; 247
    1126:	80 83       	st	Z, r24
}
    1128:	08 95       	ret

0000112a <WDG_Refresh>:
void WDG_Refresh(void)
{
	asm("WDR");
    112a:	a8 95       	wdr
}
    112c:	08 95       	ret

0000112e <UART_Init>:
volatile u8 UART_RxBuffer_Index = 0;
volatile boolean Rx_Buffer_Ready = FALSE;
void UART_Init(u16 baudRate)
{
	/* Set baud rate */
	UART_UBRRH_REG = (u8)(baudRate>>8);
    112e:	a0 e4       	ldi	r26, 0x40	; 64
    1130:	b0 e0       	ldi	r27, 0x00	; 0
    1132:	9c 93       	st	X, r25
	UART_UBRRL_REG = (u8)baudRate;
    1134:	89 b9       	out	0x09, r24	; 9
	/* Enable receiver and transmitter */
	SET_BIT(UART_UCSRB_REG,RXEN_BIT_NO);  /* Enable Receiver*/
    1136:	ea e2       	ldi	r30, 0x2A	; 42
    1138:	f0 e0       	ldi	r31, 0x00	; 0
    113a:	80 81       	ld	r24, Z
    113c:	80 61       	ori	r24, 0x10	; 16
    113e:	80 83       	st	Z, r24
	SET_BIT(UART_UCSRB_REG,TXEN_BIT_NO);  /* Enable Transmitter */
    1140:	80 81       	ld	r24, Z
    1142:	88 60       	ori	r24, 0x08	; 8
    1144:	80 83       	st	Z, r24
	/* Set frame format: 8data, 1stop bit, Even Parity */
	UART_UCSRC_REG |= (1 << URSEL_BIT_NO)|UART_8_BIT_DATA | UART_EVEN_PARITY;
    1146:	8c 91       	ld	r24, X
    1148:	86 6a       	ori	r24, 0xA6	; 166
    114a:	8c 93       	st	X, r24
	SET_BIT(UART_UCSRB_REG,7); /*	Enable Rx Complete Interrupt	*/
    114c:	80 81       	ld	r24, Z
    114e:	80 68       	ori	r24, 0x80	; 128
    1150:	80 83       	st	Z, r24
}
    1152:	08 95       	ret

00001154 <UART_TransmitChr>:

void UART_TransmitChr(u8 data)
{
    1154:	98 2f       	mov	r25, r24
	/* Wait for empty transmit buffer */
	while (!(CHK_BIT(UART_UCSRA_REG,UDRE_BIT_NO)))
    1156:	eb e2       	ldi	r30, 0x2B	; 43
    1158:	f0 e0       	ldi	r31, 0x00	; 0
    115a:	80 81       	ld	r24, Z
    115c:	85 ff       	sbrs	r24, 5
    115e:	fd cf       	rjmp	.-6      	; 0x115a <UART_TransmitChr+0x6>
			;
	/* Put data into buffer, sends the data */
	UART_UDR_REG = data;
    1160:	9c b9       	out	0x0c, r25	; 12
}
    1162:	08 95       	ret

00001164 <UART_TransmitStr>:

void UART_TransmitStr(u8 *str)
{
    1164:	cf 93       	push	r28
    1166:	df 93       	push	r29
    1168:	ec 01       	movw	r28, r24
	/* Wait for empty transmit buffer */
	while (*str != '\0')
    116a:	88 81       	ld	r24, Y
    116c:	88 23       	and	r24, r24
    116e:	31 f0       	breq	.+12     	; 0x117c <UART_TransmitStr+0x18>
	{
		UART_TransmitChr(*str);
    1170:	0e 94 aa 08 	call	0x1154	; 0x1154 <UART_TransmitChr>
		str++;
    1174:	21 96       	adiw	r28, 0x01	; 1
}

void UART_TransmitStr(u8 *str)
{
	/* Wait for empty transmit buffer */
	while (*str != '\0')
    1176:	88 81       	ld	r24, Y
    1178:	88 23       	and	r24, r24
    117a:	d1 f7       	brne	.-12     	; 0x1170 <UART_TransmitStr+0xc>
	{
		UART_TransmitChr(*str);
		str++;
	}
}
    117c:	df 91       	pop	r29
    117e:	cf 91       	pop	r28
    1180:	08 95       	ret

00001182 <UART_ReceiveChr>:
//}

u8 UART_ReceiveChr(void)
{
	/* Wait for data to be received */
	if ((CHK_BIT(UART_UCSRA_REG,RXC_BIT_NO)))
    1182:	8b b1       	in	r24, 0x0b	; 11
    1184:	88 23       	and	r24, r24
    1186:	14 f0       	brlt	.+4      	; 0x118c <UART_ReceiveChr+0xa>
    1188:	80 e0       	ldi	r24, 0x00	; 0
    118a:	08 95       	ret
	{
		return UART_UDR_REG;
    118c:	8c b1       	in	r24, 0x0c	; 12
	{
		return 0;
	}
	/* Get and return received data from buffer */

}
    118e:	08 95       	ret

00001190 <__vector_13>:
ISR(USART_RXC_vect)
{
    1190:	1f 92       	push	r1
    1192:	0f 92       	push	r0
    1194:	0f b6       	in	r0, 0x3f	; 63
    1196:	0f 92       	push	r0
    1198:	11 24       	eor	r1, r1
    119a:	2f 93       	push	r18
    119c:	3f 93       	push	r19
    119e:	4f 93       	push	r20
    11a0:	5f 93       	push	r21
    11a2:	6f 93       	push	r22
    11a4:	7f 93       	push	r23
    11a6:	8f 93       	push	r24
    11a8:	9f 93       	push	r25
    11aa:	af 93       	push	r26
    11ac:	bf 93       	push	r27
    11ae:	ef 93       	push	r30
    11b0:	ff 93       	push	r31
	UART_RxBuffer[UART_RxBuffer_Index] = UART_UDR_REG;
    11b2:	80 91 bb 01 	lds	r24, 0x01BB
    11b6:	9c b1       	in	r25, 0x0c	; 12
    11b8:	ed eb       	ldi	r30, 0xBD	; 189
    11ba:	f1 e0       	ldi	r31, 0x01	; 1
    11bc:	df 01       	movw	r26, r30
    11be:	a8 0f       	add	r26, r24
    11c0:	b1 1d       	adc	r27, r1
    11c2:	9c 93       	st	X, r25
	if (UART_RxBuffer[UART_RxBuffer_Index] == '\r')
    11c4:	80 91 bb 01 	lds	r24, 0x01BB
    11c8:	e8 0f       	add	r30, r24
    11ca:	f1 1d       	adc	r31, r1
    11cc:	80 81       	ld	r24, Z
    11ce:	8d 30       	cpi	r24, 0x0D	; 13
    11d0:	41 f4       	brne	.+16     	; 0x11e2 <__vector_13+0x52>
	{
		UART_RxBuffer_Index = 0;
    11d2:	10 92 bb 01 	sts	0x01BB, r1
		Rx_Buffer_Ready = TRUE;
    11d6:	81 e0       	ldi	r24, 0x01	; 1
    11d8:	80 93 bc 01 	sts	0x01BC, r24
		LED_TOGGLE(LED1);
    11dc:	0e 94 89 06 	call	0xd12	; 0xd12 <LED_TOGGLE>
    11e0:	08 c0       	rjmp	.+16     	; 0x11f2 <__vector_13+0x62>
	}
	else
	{
		UART_RxBuffer_Index++;
    11e2:	80 91 bb 01 	lds	r24, 0x01BB
    11e6:	8f 5f       	subi	r24, 0xFF	; 255
    11e8:	80 93 bb 01 	sts	0x01BB, r24
		LED_TOGGLE(LED0);
    11ec:	80 e0       	ldi	r24, 0x00	; 0
    11ee:	0e 94 89 06 	call	0xd12	; 0xd12 <LED_TOGGLE>
	}
}
    11f2:	ff 91       	pop	r31
    11f4:	ef 91       	pop	r30
    11f6:	bf 91       	pop	r27
    11f8:	af 91       	pop	r26
    11fa:	9f 91       	pop	r25
    11fc:	8f 91       	pop	r24
    11fe:	7f 91       	pop	r23
    1200:	6f 91       	pop	r22
    1202:	5f 91       	pop	r21
    1204:	4f 91       	pop	r20
    1206:	3f 91       	pop	r19
    1208:	2f 91       	pop	r18
    120a:	0f 90       	pop	r0
    120c:	0f be       	out	0x3f, r0	; 63
    120e:	0f 90       	pop	r0
    1210:	1f 90       	pop	r1
    1212:	18 95       	reti

00001214 <TIMER0_Init>:
 ********************************/
#include "Timer0.h"
void TIMER0_Init(void)
{
	#if (TIMER_OPERATION_MODE == TIMER0_MODE_INTERVAL)
		TIMER0_TCCR0_REG|= TIMER0_INTERVAL_MODE;
    1214:	e3 e5       	ldi	r30, 0x53	; 83
    1216:	f0 e0       	ldi	r31, 0x00	; 0
    1218:	80 81       	ld	r24, Z
    121a:	80 83       	st	Z, r24
	#elif (TIMER_OPERATION_MODE == TIMER0_MODE_PWM_PHASE_CORRECT)
		TIMER0_TCCR0_REG|= TIMER0_PWM_PHASE_CORRECT;
	#else
	#error "You Shall Define Timer Operation Mode In Timer0_Cfg.h"
	#endif
}
    121c:	08 95       	ret

0000121e <TIMER0_Start>:
#if ((TIMER_OPERATION_MODE == TIMER0_MODE_INTERVAL) || (TIMER_OPERATION_MODE == TIMER0_MODE_CTC))
void TIMER0_Start(u8 prescaler)
{
	TIMER0_TCCR0_REG |=prescaler;
    121e:	e3 e5       	ldi	r30, 0x53	; 83
    1220:	f0 e0       	ldi	r31, 0x00	; 0
    1222:	90 81       	ld	r25, Z
    1224:	89 2b       	or	r24, r25
    1226:	80 83       	st	Z, r24
}
    1228:	08 95       	ret

0000122a <TIMER0_Stop>:

void TIMER0_Stop(void)
{
	TIMER0_TCCR0_REG &=0xFC;
    122a:	e3 e5       	ldi	r30, 0x53	; 83
    122c:	f0 e0       	ldi	r31, 0x00	; 0
    122e:	80 81       	ld	r24, Z
    1230:	8c 7f       	andi	r24, 0xFC	; 252
    1232:	80 83       	st	Z, r24
}
    1234:	08 95       	ret

00001236 <TIMER0_SetPreload>:

void TIMER0_SetPreload(u8 preLoadValue)
{
	TIMER0_TCNT0_REG = preLoadValue;
    1236:	82 bf       	out	0x32, r24	; 50
}
    1238:	08 95       	ret

0000123a <TIMER0_GetPreload>:
u8 TIMER0_GetPreload()
{
	return TIMER0_TCNT0_REG;
    123a:	82 b7       	in	r24, 0x32	; 50
}
    123c:	08 95       	ret

0000123e <TIMER0_EnableInterrupt>:
void TIMER0_EnableInterrupt(void)
{
#if (TIMER_OPERATION_MODE == TIMER0_MODE_INTERVAL)
	SET_BIT(TIMER0_TIMSK_REG,TIMER0_INTERVAL_INT_ENABLE_BIT_NO);
    123e:	e9 e5       	ldi	r30, 0x59	; 89
    1240:	f0 e0       	ldi	r31, 0x00	; 0
    1242:	80 81       	ld	r24, Z
    1244:	81 60       	ori	r24, 0x01	; 1
    1246:	80 83       	st	Z, r24
#elif (TIMER_OPERATION_MODE == TIMER0_MODE_CTC)
	SET_BIT(TIMER0_TIMSK_REG,TIMER0_CTC_INT_ENABLE_BIT_NO);
#endif
}
    1248:	08 95       	ret

0000124a <TIMER0_DisableInterrupt>:
void TIMER0_DisableInterrupt(void)
{
#if (TIMER_OPERATION_MODE == TIMER0_MODE_INTERVAL)
	CLR_BIT(TIMER0_TIMSK_REG,TIMER0_INTERVAL_INT_ENABLE_BIT_NO);
    124a:	e9 e5       	ldi	r30, 0x59	; 89
    124c:	f0 e0       	ldi	r31, 0x00	; 0
    124e:	80 81       	ld	r24, Z
    1250:	8e 7f       	andi	r24, 0xFE	; 254
    1252:	80 83       	st	Z, r24
#elif (TIMER_OPERATION_MODE == TIMER0_MODE_CTC)
	CLR_BIT(TIMER0_TIMSK_REG,TIMER0_CTC_INT_ENABLE_BIT_NO);
#endif
}
    1254:	08 95       	ret

00001256 <TIMER0_SetCompareValue>:
void TIMER0_SetCompareValue(u8 compareValue)
{
	TIMER0_OCR0_REG = compareValue;
    1256:	8c bf       	out	0x3c, r24	; 60
}
    1258:	08 95       	ret

0000125a <Spi_MasterWrite>:

void Spi_MasterWrite(u8 data)
{
	u8 loc_flush_byte;
	/*	load SPI data register with a byte to send	*/
	SPI_SPDR_REG = data;
    125a:	8f b9       	out	0x0f, r24	; 15
	/*	wait until byte sent	*/
	while(!(CHK_BIT(SPI_SPSR_REG,SPI_SPIF_BIT_NO)))
    125c:	ee e2       	ldi	r30, 0x2E	; 46
    125e:	f0 e0       	ldi	r31, 0x00	; 0
    1260:	80 81       	ld	r24, Z
    1262:	88 23       	and	r24, r24
    1264:	ec f7       	brge	.-6      	; 0x1260 <Spi_MasterWrite+0x6>
	{
		;
	}
		/*	flush the data register	*/
	loc_flush_byte = SPI_SPDR_REG;
    1266:	8f b1       	in	r24, 0x0f	; 15
}
    1268:	08 95       	ret

0000126a <Spi_MasterRead>:
u8 Spi_MasterRead(void)
{
	u8 loc_dummy_byte=0xFF;
	/*	load SPI data register with a byte to send	*/
	SPI_SPDR_REG = loc_dummy_byte;
    126a:	8f ef       	ldi	r24, 0xFF	; 255
    126c:	8f b9       	out	0x0f, r24	; 15
	/*	wait until byte received	*/
	while(!(CHK_BIT(SPI_SPSR_REG,SPI_SPIF_BIT_NO)))
    126e:	ee e2       	ldi	r30, 0x2E	; 46
    1270:	f0 e0       	ldi	r31, 0x00	; 0
    1272:	80 81       	ld	r24, Z
    1274:	88 23       	and	r24, r24
    1276:	ec f7       	brge	.-6      	; 0x1272 <Spi_MasterRead+0x8>
	{
		;
	}
		/*	read the data register	*/
	return SPI_SPDR_REG;
    1278:	8f b1       	in	r24, 0x0f	; 15
}
    127a:	08 95       	ret

0000127c <Spi_MasterTranseve>:

u8 Spi_MasterTranseve(u8 data)
{
	/*	load SPI data register with a byte to send	*/
	SPI_SPDR_REG = data;
    127c:	8f b9       	out	0x0f, r24	; 15
	/*	wait until byte sent	*/
	while(!(CHK_BIT(SPI_SPSR_REG,SPI_SPIF_BIT_NO)))
    127e:	ee e2       	ldi	r30, 0x2E	; 46
    1280:	f0 e0       	ldi	r31, 0x00	; 0
    1282:	80 81       	ld	r24, Z
    1284:	88 23       	and	r24, r24
    1286:	ec f7       	brge	.-6      	; 0x1282 <Spi_MasterTranseve+0x6>
	{
		;
	}
	/*	flush the data register	*/
	return SPI_SPDR_REG;
    1288:	8f b1       	in	r24, 0x0f	; 15
}
    128a:	08 95       	ret

0000128c <Spi_SlaveRead>:
u8 Spi_SlaveRead(void)
{
	/*	wait until byte received	*/
	while(!(CHK_BIT(SPI_SPSR_REG,SPI_SPIF_BIT_NO)))
    128c:	ee e2       	ldi	r30, 0x2E	; 46
    128e:	f0 e0       	ldi	r31, 0x00	; 0
    1290:	80 81       	ld	r24, Z
    1292:	88 23       	and	r24, r24
    1294:	ec f7       	brge	.-6      	; 0x1290 <Spi_SlaveRead+0x4>
	{
		;
	}
		/*	read the data register	*/
	return SPI_SPDR_REG;
    1296:	8f b1       	in	r24, 0x0f	; 15
}
    1298:	08 95       	ret

0000129a <Spi_SlaveWrite>:
void Spi_SlaveWrite(u8 data)
{
	SPI_SPDR_REG = data;
    129a:	8f b9       	out	0x0f, r24	; 15
}
    129c:	08 95       	ret

0000129e <Spi_SlaveInit>:
}

void Spi_SlaveInit(void)
{
	/*	configure SPI MOSI Pin as input	*/
	Dio_ConfigChannel(SPI_MOSI_PORT, SPI_MOSI_CHANNEL, INPUT);
    129e:	81 e0       	ldi	r24, 0x01	; 1
    12a0:	65 e0       	ldi	r22, 0x05	; 5
    12a2:	40 e0       	ldi	r20, 0x00	; 0
    12a4:	0e 94 f5 09 	call	0x13ea	; 0x13ea <Dio_ConfigChannel>
	/*	configure SPI SS Pin as input	*/
	Dio_ConfigChannel(SPI_SS_PORT, SPI_SS_CHANNEL, INPUT);
    12a8:	81 e0       	ldi	r24, 0x01	; 1
    12aa:	64 e0       	ldi	r22, 0x04	; 4
    12ac:	40 e0       	ldi	r20, 0x00	; 0
    12ae:	0e 94 f5 09 	call	0x13ea	; 0x13ea <Dio_ConfigChannel>
	/*	configure SPI SCK Pin as input	*/
	Dio_ConfigChannel(SPI_SCK_PORT, SPI_SCK_CHANNEL, INPUT);
    12b2:	81 e0       	ldi	r24, 0x01	; 1
    12b4:	67 e0       	ldi	r22, 0x07	; 7
    12b6:	40 e0       	ldi	r20, 0x00	; 0
    12b8:	0e 94 f5 09 	call	0x13ea	; 0x13ea <Dio_ConfigChannel>
	/*	configure SPI MISO Pin as output	*/
	Dio_ConfigChannel(SPI_MISO_PORT, SPI_MISO_CHANNEL, OUTPUT);
    12bc:	81 e0       	ldi	r24, 0x01	; 1
    12be:	66 e0       	ldi	r22, 0x06	; 6
    12c0:	41 e0       	ldi	r20, 0x01	; 1
    12c2:	0e 94 f5 09 	call	0x13ea	; 0x13ea <Dio_ConfigChannel>
	/*	enable SPI Module	*/
	SET_BIT(SPI_SPCR_REG,SPI_SPE_BIT_NO);
    12c6:	ed e2       	ldi	r30, 0x2D	; 45
    12c8:	f0 e0       	ldi	r31, 0x00	; 0
    12ca:	80 81       	ld	r24, Z
    12cc:	80 64       	ori	r24, 0x40	; 64
    12ce:	80 83       	st	Z, r24
	/*	enable SPI Module in Slave mode	*/
	CLR_BIT(SPI_SPCR_REG,SPI_MSTR_BIT_NO);
    12d0:	80 81       	ld	r24, Z
    12d2:	8f 7e       	andi	r24, 0xEF	; 239
    12d4:	80 83       	st	Z, r24
}
    12d6:	08 95       	ret

000012d8 <Spi_MasterInit>:
 *************************************************/
#include "Spi.h"
void Spi_MasterInit(void)
{
	/*	configure SPI MOSI Pin as output	*/
	Dio_ConfigChannel(SPI_MOSI_PORT, SPI_MOSI_CHANNEL, OUTPUT);
    12d8:	81 e0       	ldi	r24, 0x01	; 1
    12da:	65 e0       	ldi	r22, 0x05	; 5
    12dc:	41 e0       	ldi	r20, 0x01	; 1
    12de:	0e 94 f5 09 	call	0x13ea	; 0x13ea <Dio_ConfigChannel>
	/*	configure SPI SS Pin as output	*/
	Dio_ConfigChannel(SPI_SS_PORT, SPI_SS_CHANNEL, OUTPUT);
    12e2:	81 e0       	ldi	r24, 0x01	; 1
    12e4:	64 e0       	ldi	r22, 0x04	; 4
    12e6:	41 e0       	ldi	r20, 0x01	; 1
    12e8:	0e 94 f5 09 	call	0x13ea	; 0x13ea <Dio_ConfigChannel>
	/*	configure SPI SCK Pin as output	*/
	Dio_ConfigChannel(SPI_SCK_PORT, SPI_SCK_CHANNEL, OUTPUT);
    12ec:	81 e0       	ldi	r24, 0x01	; 1
    12ee:	67 e0       	ldi	r22, 0x07	; 7
    12f0:	41 e0       	ldi	r20, 0x01	; 1
    12f2:	0e 94 f5 09 	call	0x13ea	; 0x13ea <Dio_ConfigChannel>
	/*	configure SPI MISO Pin as input	*/
	Dio_ConfigChannel(SPI_MISO_PORT, SPI_MISO_CHANNEL, INPUT);
    12f6:	81 e0       	ldi	r24, 0x01	; 1
    12f8:	66 e0       	ldi	r22, 0x06	; 6
    12fa:	40 e0       	ldi	r20, 0x00	; 0
    12fc:	0e 94 f5 09 	call	0x13ea	; 0x13ea <Dio_ConfigChannel>
	/*	initialize SPI SS pin with HIGH (No slave selected) */
	Dio_WriteChannel(SPI_SS_PORT, SPI_SS_CHANNEL, STD_HIGH);
    1300:	81 e0       	ldi	r24, 0x01	; 1
    1302:	64 e0       	ldi	r22, 0x04	; 4
    1304:	41 e0       	ldi	r20, 0x01	; 1
    1306:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <Dio_WriteChannel>
	/*	enable SPI Module	*/
	SET_BIT(SPI_SPCR_REG,SPI_SPE_BIT_NO);
    130a:	ed e2       	ldi	r30, 0x2D	; 45
    130c:	f0 e0       	ldi	r31, 0x00	; 0
    130e:	80 81       	ld	r24, Z
    1310:	80 64       	ori	r24, 0x40	; 64
    1312:	80 83       	st	Z, r24
	/*	enable SPI Module in Master mode	*/
	SET_BIT(SPI_SPCR_REG,SPI_MSTR_BIT_NO);
    1314:	80 81       	ld	r24, Z
    1316:	80 61       	ori	r24, 0x10	; 16
    1318:	80 83       	st	Z, r24
	/*	set SCK frequency by F_CPU/16	*/
	SPI_SPCR_REG|=SPI_SCK_FREQ_FCPU_DIV_16;
    131a:	80 81       	ld	r24, Z
    131c:	81 60       	ori	r24, 0x01	; 1
    131e:	80 83       	st	Z, r24
}
    1320:	08 95       	ret

00001322 <Glbl_Interrupt_Enable>:

#include "Glbl_INT.h"

void Glbl_Interrupt_Enable()
{
	SET_BIT(GLBL_SREG_REG,7);
    1322:	ef e5       	ldi	r30, 0x5F	; 95
    1324:	f0 e0       	ldi	r31, 0x00	; 0
    1326:	80 81       	ld	r24, Z
    1328:	80 68       	ori	r24, 0x80	; 128
    132a:	80 83       	st	Z, r24
}
    132c:	08 95       	ret

0000132e <Glbl_Interrupt_Disable>:
void Glbl_Interrupt_Disable()
{
	CLR_BIT(GLBL_SREG_REG,7);
    132e:	ef e5       	ldi	r30, 0x5F	; 95
    1330:	f0 e0       	ldi	r31, 0x00	; 0
    1332:	80 81       	ld	r24, Z
    1334:	8f 77       	andi	r24, 0x7F	; 127
    1336:	80 83       	st	Z, r24
}
    1338:	08 95       	ret

0000133a <Ext_Interrupt_Enable>:
#include "Ext_INT.h"


void Ext_Interrupt_Enable(ext_Int_t intID)
{
	switch (intID)
    133a:	81 30       	cpi	r24, 0x01	; 1
    133c:	59 f0       	breq	.+22     	; 0x1354 <Ext_Interrupt_Enable+0x1a>
    133e:	81 30       	cpi	r24, 0x01	; 1
    1340:	18 f0       	brcs	.+6      	; 0x1348 <Ext_Interrupt_Enable+0xe>
    1342:	82 30       	cpi	r24, 0x02	; 2
    1344:	91 f4       	brne	.+36     	; 0x136a <Ext_Interrupt_Enable+0x30>
    1346:	0c c0       	rjmp	.+24     	; 0x1360 <Ext_Interrupt_Enable+0x26>
	{
	case EXT_INT0:
			SET_BIT(EXT_INT_GICR_REG,6);
    1348:	eb e5       	ldi	r30, 0x5B	; 91
    134a:	f0 e0       	ldi	r31, 0x00	; 0
    134c:	80 81       	ld	r24, Z
    134e:	80 64       	ori	r24, 0x40	; 64
    1350:	80 83       	st	Z, r24
    1352:	08 95       	ret
			break;

	case EXT_INT1:
			SET_BIT(EXT_INT_GICR_REG,7);
    1354:	eb e5       	ldi	r30, 0x5B	; 91
    1356:	f0 e0       	ldi	r31, 0x00	; 0
    1358:	80 81       	ld	r24, Z
    135a:	80 68       	ori	r24, 0x80	; 128
    135c:	80 83       	st	Z, r24
    135e:	08 95       	ret
			break;

	case EXT_INT2:
			SET_BIT(EXT_INT_GICR_REG,5);
    1360:	eb e5       	ldi	r30, 0x5B	; 91
    1362:	f0 e0       	ldi	r31, 0x00	; 0
    1364:	80 81       	ld	r24, Z
    1366:	80 62       	ori	r24, 0x20	; 32
    1368:	80 83       	st	Z, r24
    136a:	08 95       	ret

0000136c <Ext_Interrupt_Disable>:
			break;
	}
}
void Ext_Interrupt_Disable(ext_Int_t intID)
{
	switch (intID)
    136c:	81 30       	cpi	r24, 0x01	; 1
    136e:	59 f0       	breq	.+22     	; 0x1386 <Ext_Interrupt_Disable+0x1a>
    1370:	81 30       	cpi	r24, 0x01	; 1
    1372:	18 f0       	brcs	.+6      	; 0x137a <Ext_Interrupt_Disable+0xe>
    1374:	82 30       	cpi	r24, 0x02	; 2
    1376:	91 f4       	brne	.+36     	; 0x139c <Ext_Interrupt_Disable+0x30>
    1378:	0c c0       	rjmp	.+24     	; 0x1392 <Ext_Interrupt_Disable+0x26>
	{
	case EXT_INT0:
			CLR_BIT(EXT_INT_GICR_REG,6);
    137a:	eb e5       	ldi	r30, 0x5B	; 91
    137c:	f0 e0       	ldi	r31, 0x00	; 0
    137e:	80 81       	ld	r24, Z
    1380:	8f 7b       	andi	r24, 0xBF	; 191
    1382:	80 83       	st	Z, r24
    1384:	08 95       	ret
			break;

	case EXT_INT1:
			CLR_BIT(EXT_INT_GICR_REG,7);
    1386:	eb e5       	ldi	r30, 0x5B	; 91
    1388:	f0 e0       	ldi	r31, 0x00	; 0
    138a:	80 81       	ld	r24, Z
    138c:	8f 77       	andi	r24, 0x7F	; 127
    138e:	80 83       	st	Z, r24
    1390:	08 95       	ret
			break;

	case EXT_INT2:
			CLR_BIT(EXT_INT_GICR_REG,5);
    1392:	eb e5       	ldi	r30, 0x5B	; 91
    1394:	f0 e0       	ldi	r31, 0x00	; 0
    1396:	80 81       	ld	r24, Z
    1398:	8f 7d       	andi	r24, 0xDF	; 223
    139a:	80 83       	st	Z, r24
    139c:	08 95       	ret

0000139e <Ext_Interrupt_SncControl>:

}

void Ext_Interrupt_SncControl(ext_Int_t intID, snc_mode_t mode)
{
	switch (intID)
    139e:	81 30       	cpi	r24, 0x01	; 1
    13a0:	59 f0       	breq	.+22     	; 0x13b8 <Ext_Interrupt_SncControl+0x1a>
    13a2:	81 30       	cpi	r24, 0x01	; 1
    13a4:	18 f0       	brcs	.+6      	; 0x13ac <Ext_Interrupt_SncControl+0xe>
    13a6:	82 30       	cpi	r24, 0x02	; 2
    13a8:	f9 f4       	brne	.+62     	; 0x13e8 <Ext_Interrupt_SncControl+0x4a>
    13aa:	0f c0       	rjmp	.+30     	; 0x13ca <Ext_Interrupt_SncControl+0x2c>
	{
		case EXT_INT0:
			EXT_INT_MCUCR_REG |=(mode<<0);
    13ac:	e5 e5       	ldi	r30, 0x55	; 85
    13ae:	f0 e0       	ldi	r31, 0x00	; 0
    13b0:	80 81       	ld	r24, Z
    13b2:	86 2b       	or	r24, r22
    13b4:	80 83       	st	Z, r24
    13b6:	08 95       	ret
			break;

		case EXT_INT1:
			EXT_INT_MCUCR_REG |=(mode<<2);
    13b8:	e5 e5       	ldi	r30, 0x55	; 85
    13ba:	f0 e0       	ldi	r31, 0x00	; 0
    13bc:	90 81       	ld	r25, Z
    13be:	86 2f       	mov	r24, r22
    13c0:	88 0f       	add	r24, r24
    13c2:	88 0f       	add	r24, r24
    13c4:	89 2b       	or	r24, r25
    13c6:	80 83       	st	Z, r24
    13c8:	08 95       	ret
			break;

		case EXT_INT2:
			if (mode == FAILING_EDGE)
    13ca:	62 30       	cpi	r22, 0x02	; 2
    13cc:	31 f4       	brne	.+12     	; 0x13da <Ext_Interrupt_SncControl+0x3c>
			{
				CLR_BIT(EXT_INT_MCUCSR_REG,6);
    13ce:	e4 e5       	ldi	r30, 0x54	; 84
    13d0:	f0 e0       	ldi	r31, 0x00	; 0
    13d2:	80 81       	ld	r24, Z
    13d4:	8f 7b       	andi	r24, 0xBF	; 191
    13d6:	80 83       	st	Z, r24
    13d8:	08 95       	ret
			}
			else if (mode == RISING_EDGE)
    13da:	63 30       	cpi	r22, 0x03	; 3
    13dc:	29 f4       	brne	.+10     	; 0x13e8 <Ext_Interrupt_SncControl+0x4a>
			{
				SET_BIT(EXT_INT_MCUCSR_REG,6);
    13de:	e4 e5       	ldi	r30, 0x54	; 84
    13e0:	f0 e0       	ldi	r31, 0x00	; 0
    13e2:	80 81       	ld	r24, Z
    13e4:	80 64       	ori	r24, 0x40	; 64
    13e6:	80 83       	st	Z, r24
    13e8:	08 95       	ret

000013ea <Dio_ConfigChannel>:
#include "Dio.h"

/*DDRx      DDRA, DDRB, DDRC, DDRD*/
void Dio_ConfigChannel(port_type port,pin_type pin,direction_type direction)
{
	switch (port)
    13ea:	81 30       	cpi	r24, 0x01	; 1
    13ec:	31 f1       	breq	.+76     	; 0x143a <Dio_ConfigChannel+0x50>
    13ee:	81 30       	cpi	r24, 0x01	; 1
    13f0:	38 f0       	brcs	.+14     	; 0x1400 <Dio_ConfigChannel+0x16>
    13f2:	82 30       	cpi	r24, 0x02	; 2
    13f4:	09 f4       	brne	.+2      	; 0x13f8 <Dio_ConfigChannel+0xe>
    13f6:	3e c0       	rjmp	.+124    	; 0x1474 <Dio_ConfigChannel+0x8a>
    13f8:	83 30       	cpi	r24, 0x03	; 3
    13fa:	09 f0       	breq	.+2      	; 0x13fe <Dio_ConfigChannel+0x14>
    13fc:	74 c0       	rjmp	.+232    	; 0x14e6 <Dio_ConfigChannel+0xfc>
    13fe:	57 c0       	rjmp	.+174    	; 0x14ae <Dio_ConfigChannel+0xc4>
	{
	case DIO_PORTA:
		if (direction == INPUT)
    1400:	44 23       	and	r20, r20
    1402:	71 f4       	brne	.+28     	; 0x1420 <Dio_ConfigChannel+0x36>
		{
			CLR_BIT(DIO_DDRA_REG,pin);
    1404:	ea e3       	ldi	r30, 0x3A	; 58
    1406:	f0 e0       	ldi	r31, 0x00	; 0
    1408:	20 81       	ld	r18, Z
    140a:	81 e0       	ldi	r24, 0x01	; 1
    140c:	90 e0       	ldi	r25, 0x00	; 0
    140e:	02 c0       	rjmp	.+4      	; 0x1414 <Dio_ConfigChannel+0x2a>
    1410:	88 0f       	add	r24, r24
    1412:	99 1f       	adc	r25, r25
    1414:	6a 95       	dec	r22
    1416:	e2 f7       	brpl	.-8      	; 0x1410 <Dio_ConfigChannel+0x26>
    1418:	80 95       	com	r24
    141a:	82 23       	and	r24, r18
    141c:	80 83       	st	Z, r24
    141e:	08 95       	ret
		}
		else
		{
			SET_BIT(DIO_DDRA_REG,pin);
    1420:	ea e3       	ldi	r30, 0x3A	; 58
    1422:	f0 e0       	ldi	r31, 0x00	; 0
    1424:	20 81       	ld	r18, Z
    1426:	81 e0       	ldi	r24, 0x01	; 1
    1428:	90 e0       	ldi	r25, 0x00	; 0
    142a:	02 c0       	rjmp	.+4      	; 0x1430 <Dio_ConfigChannel+0x46>
    142c:	88 0f       	add	r24, r24
    142e:	99 1f       	adc	r25, r25
    1430:	6a 95       	dec	r22
    1432:	e2 f7       	brpl	.-8      	; 0x142c <Dio_ConfigChannel+0x42>
    1434:	28 2b       	or	r18, r24
    1436:	20 83       	st	Z, r18
    1438:	08 95       	ret
		}
		break;

	case DIO_PORTB:
		if (direction == INPUT)
    143a:	44 23       	and	r20, r20
    143c:	71 f4       	brne	.+28     	; 0x145a <Dio_ConfigChannel+0x70>
		{
			CLR_BIT(DIO_DDRB_REG,pin);
    143e:	e7 e3       	ldi	r30, 0x37	; 55
    1440:	f0 e0       	ldi	r31, 0x00	; 0
    1442:	20 81       	ld	r18, Z
    1444:	81 e0       	ldi	r24, 0x01	; 1
    1446:	90 e0       	ldi	r25, 0x00	; 0
    1448:	02 c0       	rjmp	.+4      	; 0x144e <Dio_ConfigChannel+0x64>
    144a:	88 0f       	add	r24, r24
    144c:	99 1f       	adc	r25, r25
    144e:	6a 95       	dec	r22
    1450:	e2 f7       	brpl	.-8      	; 0x144a <Dio_ConfigChannel+0x60>
    1452:	80 95       	com	r24
    1454:	82 23       	and	r24, r18
    1456:	80 83       	st	Z, r24
    1458:	08 95       	ret
		}
		else
		{
			SET_BIT(DIO_DDRB_REG,pin);
    145a:	e7 e3       	ldi	r30, 0x37	; 55
    145c:	f0 e0       	ldi	r31, 0x00	; 0
    145e:	20 81       	ld	r18, Z
    1460:	81 e0       	ldi	r24, 0x01	; 1
    1462:	90 e0       	ldi	r25, 0x00	; 0
    1464:	02 c0       	rjmp	.+4      	; 0x146a <Dio_ConfigChannel+0x80>
    1466:	88 0f       	add	r24, r24
    1468:	99 1f       	adc	r25, r25
    146a:	6a 95       	dec	r22
    146c:	e2 f7       	brpl	.-8      	; 0x1466 <Dio_ConfigChannel+0x7c>
    146e:	28 2b       	or	r18, r24
    1470:	20 83       	st	Z, r18
    1472:	08 95       	ret
		}
		break;

	case DIO_PORTC:
		if (direction == INPUT)
    1474:	44 23       	and	r20, r20
    1476:	71 f4       	brne	.+28     	; 0x1494 <Dio_ConfigChannel+0xaa>
		{
			CLR_BIT(DIO_DDRC_REG,pin);
    1478:	e4 e3       	ldi	r30, 0x34	; 52
    147a:	f0 e0       	ldi	r31, 0x00	; 0
    147c:	20 81       	ld	r18, Z
    147e:	81 e0       	ldi	r24, 0x01	; 1
    1480:	90 e0       	ldi	r25, 0x00	; 0
    1482:	02 c0       	rjmp	.+4      	; 0x1488 <Dio_ConfigChannel+0x9e>
    1484:	88 0f       	add	r24, r24
    1486:	99 1f       	adc	r25, r25
    1488:	6a 95       	dec	r22
    148a:	e2 f7       	brpl	.-8      	; 0x1484 <Dio_ConfigChannel+0x9a>
    148c:	80 95       	com	r24
    148e:	82 23       	and	r24, r18
    1490:	80 83       	st	Z, r24
    1492:	08 95       	ret
		}
		else
		{
			SET_BIT(DIO_DDRC_REG,pin);
    1494:	e4 e3       	ldi	r30, 0x34	; 52
    1496:	f0 e0       	ldi	r31, 0x00	; 0
    1498:	20 81       	ld	r18, Z
    149a:	81 e0       	ldi	r24, 0x01	; 1
    149c:	90 e0       	ldi	r25, 0x00	; 0
    149e:	02 c0       	rjmp	.+4      	; 0x14a4 <Dio_ConfigChannel+0xba>
    14a0:	88 0f       	add	r24, r24
    14a2:	99 1f       	adc	r25, r25
    14a4:	6a 95       	dec	r22
    14a6:	e2 f7       	brpl	.-8      	; 0x14a0 <Dio_ConfigChannel+0xb6>
    14a8:	28 2b       	or	r18, r24
    14aa:	20 83       	st	Z, r18
    14ac:	08 95       	ret
		}
		break;

	case DIO_PORTD:
		if (direction == INPUT)
    14ae:	44 23       	and	r20, r20
    14b0:	71 f4       	brne	.+28     	; 0x14ce <Dio_ConfigChannel+0xe4>
		{
			CLR_BIT(DIO_DDRD_REG,pin);
    14b2:	e1 e3       	ldi	r30, 0x31	; 49
    14b4:	f0 e0       	ldi	r31, 0x00	; 0
    14b6:	20 81       	ld	r18, Z
    14b8:	81 e0       	ldi	r24, 0x01	; 1
    14ba:	90 e0       	ldi	r25, 0x00	; 0
    14bc:	02 c0       	rjmp	.+4      	; 0x14c2 <Dio_ConfigChannel+0xd8>
    14be:	88 0f       	add	r24, r24
    14c0:	99 1f       	adc	r25, r25
    14c2:	6a 95       	dec	r22
    14c4:	e2 f7       	brpl	.-8      	; 0x14be <Dio_ConfigChannel+0xd4>
    14c6:	80 95       	com	r24
    14c8:	82 23       	and	r24, r18
    14ca:	80 83       	st	Z, r24
    14cc:	08 95       	ret
		}
		else
		{
			SET_BIT(DIO_DDRD_REG,pin);
    14ce:	e1 e3       	ldi	r30, 0x31	; 49
    14d0:	f0 e0       	ldi	r31, 0x00	; 0
    14d2:	20 81       	ld	r18, Z
    14d4:	81 e0       	ldi	r24, 0x01	; 1
    14d6:	90 e0       	ldi	r25, 0x00	; 0
    14d8:	02 c0       	rjmp	.+4      	; 0x14de <Dio_ConfigChannel+0xf4>
    14da:	88 0f       	add	r24, r24
    14dc:	99 1f       	adc	r25, r25
    14de:	6a 95       	dec	r22
    14e0:	e2 f7       	brpl	.-8      	; 0x14da <Dio_ConfigChannel+0xf0>
    14e2:	28 2b       	or	r18, r24
    14e4:	20 83       	st	Z, r18
    14e6:	08 95       	ret

000014e8 <Dio_WriteChannel>:
		break;
	}
}
void Dio_WriteChannel(port_type port,pin_type pin,level_type level)
{
	switch (port)
    14e8:	81 30       	cpi	r24, 0x01	; 1
    14ea:	31 f1       	breq	.+76     	; 0x1538 <Dio_WriteChannel+0x50>
    14ec:	81 30       	cpi	r24, 0x01	; 1
    14ee:	38 f0       	brcs	.+14     	; 0x14fe <Dio_WriteChannel+0x16>
    14f0:	82 30       	cpi	r24, 0x02	; 2
    14f2:	09 f4       	brne	.+2      	; 0x14f6 <Dio_WriteChannel+0xe>
    14f4:	3e c0       	rjmp	.+124    	; 0x1572 <Dio_WriteChannel+0x8a>
    14f6:	83 30       	cpi	r24, 0x03	; 3
    14f8:	09 f0       	breq	.+2      	; 0x14fc <Dio_WriteChannel+0x14>
    14fa:	74 c0       	rjmp	.+232    	; 0x15e4 <Dio_WriteChannel+0xfc>
    14fc:	57 c0       	rjmp	.+174    	; 0x15ac <Dio_WriteChannel+0xc4>
	{
	case DIO_PORTA:
		if (level == STD_HIGH)
    14fe:	41 30       	cpi	r20, 0x01	; 1
    1500:	69 f4       	brne	.+26     	; 0x151c <Dio_WriteChannel+0x34>
		{
			SET_BIT(DIO_PORTA_REG,pin);
    1502:	eb e3       	ldi	r30, 0x3B	; 59
    1504:	f0 e0       	ldi	r31, 0x00	; 0
    1506:	20 81       	ld	r18, Z
    1508:	81 e0       	ldi	r24, 0x01	; 1
    150a:	90 e0       	ldi	r25, 0x00	; 0
    150c:	02 c0       	rjmp	.+4      	; 0x1512 <Dio_WriteChannel+0x2a>
    150e:	88 0f       	add	r24, r24
    1510:	99 1f       	adc	r25, r25
    1512:	6a 95       	dec	r22
    1514:	e2 f7       	brpl	.-8      	; 0x150e <Dio_WriteChannel+0x26>
    1516:	28 2b       	or	r18, r24
    1518:	20 83       	st	Z, r18
    151a:	08 95       	ret
		}
		else
		{
			CLR_BIT(DIO_PORTA_REG,pin);
    151c:	eb e3       	ldi	r30, 0x3B	; 59
    151e:	f0 e0       	ldi	r31, 0x00	; 0
    1520:	20 81       	ld	r18, Z
    1522:	81 e0       	ldi	r24, 0x01	; 1
    1524:	90 e0       	ldi	r25, 0x00	; 0
    1526:	02 c0       	rjmp	.+4      	; 0x152c <Dio_WriteChannel+0x44>
    1528:	88 0f       	add	r24, r24
    152a:	99 1f       	adc	r25, r25
    152c:	6a 95       	dec	r22
    152e:	e2 f7       	brpl	.-8      	; 0x1528 <Dio_WriteChannel+0x40>
    1530:	80 95       	com	r24
    1532:	82 23       	and	r24, r18
    1534:	80 83       	st	Z, r24
    1536:	08 95       	ret
		}
		break;

	case DIO_PORTB:
		if (level == STD_HIGH)
    1538:	41 30       	cpi	r20, 0x01	; 1
    153a:	69 f4       	brne	.+26     	; 0x1556 <Dio_WriteChannel+0x6e>
		{
			SET_BIT(DIO_PORTB_REG,pin);
    153c:	e8 e3       	ldi	r30, 0x38	; 56
    153e:	f0 e0       	ldi	r31, 0x00	; 0
    1540:	20 81       	ld	r18, Z
    1542:	81 e0       	ldi	r24, 0x01	; 1
    1544:	90 e0       	ldi	r25, 0x00	; 0
    1546:	02 c0       	rjmp	.+4      	; 0x154c <Dio_WriteChannel+0x64>
    1548:	88 0f       	add	r24, r24
    154a:	99 1f       	adc	r25, r25
    154c:	6a 95       	dec	r22
    154e:	e2 f7       	brpl	.-8      	; 0x1548 <Dio_WriteChannel+0x60>
    1550:	28 2b       	or	r18, r24
    1552:	20 83       	st	Z, r18
    1554:	08 95       	ret
		}
		else
		{
			CLR_BIT(DIO_PORTB_REG,pin);
    1556:	e8 e3       	ldi	r30, 0x38	; 56
    1558:	f0 e0       	ldi	r31, 0x00	; 0
    155a:	20 81       	ld	r18, Z
    155c:	81 e0       	ldi	r24, 0x01	; 1
    155e:	90 e0       	ldi	r25, 0x00	; 0
    1560:	02 c0       	rjmp	.+4      	; 0x1566 <Dio_WriteChannel+0x7e>
    1562:	88 0f       	add	r24, r24
    1564:	99 1f       	adc	r25, r25
    1566:	6a 95       	dec	r22
    1568:	e2 f7       	brpl	.-8      	; 0x1562 <Dio_WriteChannel+0x7a>
    156a:	80 95       	com	r24
    156c:	82 23       	and	r24, r18
    156e:	80 83       	st	Z, r24
    1570:	08 95       	ret
		}
		break;

	case DIO_PORTC:
		if (level == STD_HIGH)
    1572:	41 30       	cpi	r20, 0x01	; 1
    1574:	69 f4       	brne	.+26     	; 0x1590 <Dio_WriteChannel+0xa8>
		{
			SET_BIT(DIO_PORTC_REG,pin);
    1576:	e5 e3       	ldi	r30, 0x35	; 53
    1578:	f0 e0       	ldi	r31, 0x00	; 0
    157a:	20 81       	ld	r18, Z
    157c:	81 e0       	ldi	r24, 0x01	; 1
    157e:	90 e0       	ldi	r25, 0x00	; 0
    1580:	02 c0       	rjmp	.+4      	; 0x1586 <Dio_WriteChannel+0x9e>
    1582:	88 0f       	add	r24, r24
    1584:	99 1f       	adc	r25, r25
    1586:	6a 95       	dec	r22
    1588:	e2 f7       	brpl	.-8      	; 0x1582 <Dio_WriteChannel+0x9a>
    158a:	28 2b       	or	r18, r24
    158c:	20 83       	st	Z, r18
    158e:	08 95       	ret
		}
		else
		{
			CLR_BIT(DIO_PORTC_REG,pin);
    1590:	e5 e3       	ldi	r30, 0x35	; 53
    1592:	f0 e0       	ldi	r31, 0x00	; 0
    1594:	20 81       	ld	r18, Z
    1596:	81 e0       	ldi	r24, 0x01	; 1
    1598:	90 e0       	ldi	r25, 0x00	; 0
    159a:	02 c0       	rjmp	.+4      	; 0x15a0 <Dio_WriteChannel+0xb8>
    159c:	88 0f       	add	r24, r24
    159e:	99 1f       	adc	r25, r25
    15a0:	6a 95       	dec	r22
    15a2:	e2 f7       	brpl	.-8      	; 0x159c <Dio_WriteChannel+0xb4>
    15a4:	80 95       	com	r24
    15a6:	82 23       	and	r24, r18
    15a8:	80 83       	st	Z, r24
    15aa:	08 95       	ret
		}
		break;

	case DIO_PORTD:
		if (level == STD_HIGH)
    15ac:	41 30       	cpi	r20, 0x01	; 1
    15ae:	69 f4       	brne	.+26     	; 0x15ca <Dio_WriteChannel+0xe2>
		{
			SET_BIT(DIO_PORTD_REG,pin);
    15b0:	e2 e3       	ldi	r30, 0x32	; 50
    15b2:	f0 e0       	ldi	r31, 0x00	; 0
    15b4:	20 81       	ld	r18, Z
    15b6:	81 e0       	ldi	r24, 0x01	; 1
    15b8:	90 e0       	ldi	r25, 0x00	; 0
    15ba:	02 c0       	rjmp	.+4      	; 0x15c0 <Dio_WriteChannel+0xd8>
    15bc:	88 0f       	add	r24, r24
    15be:	99 1f       	adc	r25, r25
    15c0:	6a 95       	dec	r22
    15c2:	e2 f7       	brpl	.-8      	; 0x15bc <Dio_WriteChannel+0xd4>
    15c4:	28 2b       	or	r18, r24
    15c6:	20 83       	st	Z, r18
    15c8:	08 95       	ret
		}
		else
		{
			CLR_BIT(DIO_PORTD_REG,pin);
    15ca:	e2 e3       	ldi	r30, 0x32	; 50
    15cc:	f0 e0       	ldi	r31, 0x00	; 0
    15ce:	20 81       	ld	r18, Z
    15d0:	81 e0       	ldi	r24, 0x01	; 1
    15d2:	90 e0       	ldi	r25, 0x00	; 0
    15d4:	02 c0       	rjmp	.+4      	; 0x15da <Dio_WriteChannel+0xf2>
    15d6:	88 0f       	add	r24, r24
    15d8:	99 1f       	adc	r25, r25
    15da:	6a 95       	dec	r22
    15dc:	e2 f7       	brpl	.-8      	; 0x15d6 <Dio_WriteChannel+0xee>
    15de:	80 95       	com	r24
    15e0:	82 23       	and	r24, r18
    15e2:	80 83       	st	Z, r24
    15e4:	08 95       	ret

000015e6 <Dio_WriteGroup>:
		break;
	}
}
void Dio_WriteGroup(port_type port,u8 mask,u8 data)
{
	switch(port)
    15e6:	81 30       	cpi	r24, 0x01	; 1
    15e8:	91 f0       	breq	.+36     	; 0x160e <Dio_WriteGroup+0x28>
    15ea:	81 30       	cpi	r24, 0x01	; 1
    15ec:	28 f0       	brcs	.+10     	; 0x15f8 <Dio_WriteGroup+0x12>
    15ee:	82 30       	cpi	r24, 0x02	; 2
    15f0:	b9 f0       	breq	.+46     	; 0x1620 <Dio_WriteGroup+0x3a>
    15f2:	83 30       	cpi	r24, 0x03	; 3
    15f4:	31 f5       	brne	.+76     	; 0x1642 <Dio_WriteGroup+0x5c>
    15f6:	1d c0       	rjmp	.+58     	; 0x1632 <Dio_WriteGroup+0x4c>
	{
	case DIO_PORTA:
		DIO_PORTA_REG = (DIO_PORTA_REG&~mask)|(data & mask);
    15f8:	eb e3       	ldi	r30, 0x3B	; 59
    15fa:	f0 e0       	ldi	r31, 0x00	; 0
    15fc:	20 81       	ld	r18, Z
    15fe:	94 2f       	mov	r25, r20
    1600:	96 23       	and	r25, r22
    1602:	86 2f       	mov	r24, r22
    1604:	80 95       	com	r24
    1606:	82 23       	and	r24, r18
    1608:	98 2b       	or	r25, r24
    160a:	90 83       	st	Z, r25
    160c:	08 95       	ret
		break;

	case DIO_PORTB:
		DIO_PORTB_REG = (DIO_PORTA_REG&~mask)|(data & mask);
    160e:	2b b3       	in	r18, 0x1b	; 27
    1610:	94 2f       	mov	r25, r20
    1612:	96 23       	and	r25, r22
    1614:	86 2f       	mov	r24, r22
    1616:	80 95       	com	r24
    1618:	82 23       	and	r24, r18
    161a:	98 2b       	or	r25, r24
    161c:	98 bb       	out	0x18, r25	; 24
    161e:	08 95       	ret
		break;

	case DIO_PORTC:
		DIO_PORTC_REG = (DIO_PORTA_REG&~mask)|(data & mask);
    1620:	2b b3       	in	r18, 0x1b	; 27
    1622:	94 2f       	mov	r25, r20
    1624:	96 23       	and	r25, r22
    1626:	86 2f       	mov	r24, r22
    1628:	80 95       	com	r24
    162a:	82 23       	and	r24, r18
    162c:	98 2b       	or	r25, r24
    162e:	95 bb       	out	0x15, r25	; 21
    1630:	08 95       	ret
		break;

	case DIO_PORTD:
		DIO_PORTD_REG = (DIO_PORTA_REG&~mask)|(data & mask);
    1632:	2b b3       	in	r18, 0x1b	; 27
    1634:	94 2f       	mov	r25, r20
    1636:	96 23       	and	r25, r22
    1638:	86 2f       	mov	r24, r22
    163a:	80 95       	com	r24
    163c:	82 23       	and	r24, r18
    163e:	98 2b       	or	r25, r24
    1640:	92 bb       	out	0x12, r25	; 18
    1642:	08 95       	ret

00001644 <Dio_TogglChannel>:
		break;
	}
}
void Dio_TogglChannel(port_type port,pin_type pin)
{
	switch (port)
    1644:	81 30       	cpi	r24, 0x01	; 1
    1646:	a1 f0       	breq	.+40     	; 0x1670 <Dio_TogglChannel+0x2c>
    1648:	81 30       	cpi	r24, 0x01	; 1
    164a:	28 f0       	brcs	.+10     	; 0x1656 <Dio_TogglChannel+0x12>
    164c:	82 30       	cpi	r24, 0x02	; 2
    164e:	e9 f0       	breq	.+58     	; 0x168a <Dio_TogglChannel+0x46>
    1650:	83 30       	cpi	r24, 0x03	; 3
    1652:	a1 f5       	brne	.+104    	; 0x16bc <Dio_TogglChannel+0x78>
    1654:	27 c0       	rjmp	.+78     	; 0x16a4 <Dio_TogglChannel+0x60>
	{
	case DIO_PORTA:
		TOGGLE_BIT(DIO_PORTA_REG,pin);
    1656:	eb e3       	ldi	r30, 0x3B	; 59
    1658:	f0 e0       	ldi	r31, 0x00	; 0
    165a:	20 81       	ld	r18, Z
    165c:	81 e0       	ldi	r24, 0x01	; 1
    165e:	90 e0       	ldi	r25, 0x00	; 0
    1660:	02 c0       	rjmp	.+4      	; 0x1666 <Dio_TogglChannel+0x22>
    1662:	88 0f       	add	r24, r24
    1664:	99 1f       	adc	r25, r25
    1666:	6a 95       	dec	r22
    1668:	e2 f7       	brpl	.-8      	; 0x1662 <Dio_TogglChannel+0x1e>
    166a:	28 27       	eor	r18, r24
    166c:	20 83       	st	Z, r18
    166e:	08 95       	ret
		break;

	case DIO_PORTB:
		TOGGLE_BIT(DIO_PORTB_REG,pin);
    1670:	e8 e3       	ldi	r30, 0x38	; 56
    1672:	f0 e0       	ldi	r31, 0x00	; 0
    1674:	20 81       	ld	r18, Z
    1676:	81 e0       	ldi	r24, 0x01	; 1
    1678:	90 e0       	ldi	r25, 0x00	; 0
    167a:	02 c0       	rjmp	.+4      	; 0x1680 <Dio_TogglChannel+0x3c>
    167c:	88 0f       	add	r24, r24
    167e:	99 1f       	adc	r25, r25
    1680:	6a 95       	dec	r22
    1682:	e2 f7       	brpl	.-8      	; 0x167c <Dio_TogglChannel+0x38>
    1684:	28 27       	eor	r18, r24
    1686:	20 83       	st	Z, r18
    1688:	08 95       	ret
		break;

	case DIO_PORTC:
		TOGGLE_BIT(DIO_PORTC_REG,pin);
    168a:	e5 e3       	ldi	r30, 0x35	; 53
    168c:	f0 e0       	ldi	r31, 0x00	; 0
    168e:	20 81       	ld	r18, Z
    1690:	81 e0       	ldi	r24, 0x01	; 1
    1692:	90 e0       	ldi	r25, 0x00	; 0
    1694:	02 c0       	rjmp	.+4      	; 0x169a <Dio_TogglChannel+0x56>
    1696:	88 0f       	add	r24, r24
    1698:	99 1f       	adc	r25, r25
    169a:	6a 95       	dec	r22
    169c:	e2 f7       	brpl	.-8      	; 0x1696 <Dio_TogglChannel+0x52>
    169e:	28 27       	eor	r18, r24
    16a0:	20 83       	st	Z, r18
    16a2:	08 95       	ret
		break;

	case DIO_PORTD:
		TOGGLE_BIT(DIO_PORTD_REG,pin);
    16a4:	e2 e3       	ldi	r30, 0x32	; 50
    16a6:	f0 e0       	ldi	r31, 0x00	; 0
    16a8:	20 81       	ld	r18, Z
    16aa:	81 e0       	ldi	r24, 0x01	; 1
    16ac:	90 e0       	ldi	r25, 0x00	; 0
    16ae:	02 c0       	rjmp	.+4      	; 0x16b4 <Dio_TogglChannel+0x70>
    16b0:	88 0f       	add	r24, r24
    16b2:	99 1f       	adc	r25, r25
    16b4:	6a 95       	dec	r22
    16b6:	e2 f7       	brpl	.-8      	; 0x16b0 <Dio_TogglChannel+0x6c>
    16b8:	28 27       	eor	r18, r24
    16ba:	20 83       	st	Z, r18
    16bc:	08 95       	ret

000016be <Dio_ReadChannel>:
	}
}
level_type Dio_ReadChannel(port_type port,pin_type pin)
{
	level_type result = STD_LOW;
	switch (port)
    16be:	81 30       	cpi	r24, 0x01	; 1
    16c0:	89 f0       	breq	.+34     	; 0x16e4 <Dio_ReadChannel+0x26>
    16c2:	81 30       	cpi	r24, 0x01	; 1
    16c4:	30 f0       	brcs	.+12     	; 0x16d2 <Dio_ReadChannel+0x14>
    16c6:	82 30       	cpi	r24, 0x02	; 2
    16c8:	b1 f0       	breq	.+44     	; 0x16f6 <Dio_ReadChannel+0x38>
    16ca:	83 30       	cpi	r24, 0x03	; 3
    16cc:	e9 f0       	breq	.+58     	; 0x1708 <Dio_ReadChannel+0x4a>
    16ce:	80 e0       	ldi	r24, 0x00	; 0
    16d0:	08 95       	ret
	{
	case DIO_PORTA:
		if CHK_BIT(DIO_PINA_REG,pin)
    16d2:	89 b3       	in	r24, 0x19	; 25
    16d4:	90 e0       	ldi	r25, 0x00	; 0
    16d6:	02 c0       	rjmp	.+4      	; 0x16dc <Dio_ReadChannel+0x1e>
    16d8:	95 95       	asr	r25
    16da:	87 95       	ror	r24
    16dc:	6a 95       	dec	r22
    16de:	e2 f7       	brpl	.-8      	; 0x16d8 <Dio_ReadChannel+0x1a>
    16e0:	81 70       	andi	r24, 0x01	; 1
    16e2:	08 95       	ret
		{
			result = STD_LOW;
		}
		break;
	case DIO_PORTB:
		if CHK_BIT(DIO_PINB_REG,pin)
    16e4:	86 b3       	in	r24, 0x16	; 22
    16e6:	90 e0       	ldi	r25, 0x00	; 0
    16e8:	02 c0       	rjmp	.+4      	; 0x16ee <Dio_ReadChannel+0x30>
    16ea:	95 95       	asr	r25
    16ec:	87 95       	ror	r24
    16ee:	6a 95       	dec	r22
    16f0:	e2 f7       	brpl	.-8      	; 0x16ea <Dio_ReadChannel+0x2c>
    16f2:	81 70       	andi	r24, 0x01	; 1
    16f4:	08 95       	ret
		{
			result = STD_LOW;
		}
		break;
	case DIO_PORTC:
		if CHK_BIT(DIO_PINC_REG,pin)
    16f6:	83 b3       	in	r24, 0x13	; 19
    16f8:	90 e0       	ldi	r25, 0x00	; 0
    16fa:	02 c0       	rjmp	.+4      	; 0x1700 <Dio_ReadChannel+0x42>
    16fc:	95 95       	asr	r25
    16fe:	87 95       	ror	r24
    1700:	6a 95       	dec	r22
    1702:	e2 f7       	brpl	.-8      	; 0x16fc <Dio_ReadChannel+0x3e>
    1704:	81 70       	andi	r24, 0x01	; 1
    1706:	08 95       	ret
		{
			result = STD_LOW;
		}
		break;
	case DIO_PORTD:
		if CHK_BIT(DIO_PIND_REG,pin)
    1708:	80 b3       	in	r24, 0x10	; 16
    170a:	90 e0       	ldi	r25, 0x00	; 0
    170c:	02 c0       	rjmp	.+4      	; 0x1712 <Dio_ReadChannel+0x54>
    170e:	95 95       	asr	r25
    1710:	87 95       	ror	r24
    1712:	6a 95       	dec	r22
    1714:	e2 f7       	brpl	.-8      	; 0x170e <Dio_ReadChannel+0x50>
    1716:	81 70       	andi	r24, 0x01	; 1
			result = STD_LOW;
		}
		break;
	}
	return result;
}
    1718:	08 95       	ret

0000171a <adcInit>:
 ********************************/
#include "Adc.h"

void adcInit(void)
{
	ADC_ADMUX_REG|=(AVCC5V_REF<<6);  /*	AVCC aas Vref	*/
    171a:	e7 e2       	ldi	r30, 0x27	; 39
    171c:	f0 e0       	ldi	r31, 0x00	; 0
    171e:	80 81       	ld	r24, Z
    1720:	80 64       	ori	r24, 0x40	; 64
    1722:	80 83       	st	Z, r24
	ADC_ADCSRA_REG=(ADC_ENABLE)|(ADCPS_128);
    1724:	87 e8       	ldi	r24, 0x87	; 135
    1726:	86 b9       	out	0x06, r24	; 6
}
    1728:	08 95       	ret

0000172a <adcRead>:
u16 adcRead(u8 chnlNo)
{
    u16 result;
    ADC_ADMUX_REG = (ADC_ADMUX_REG & 0xF8)|(chnlNo);
    172a:	e7 e2       	ldi	r30, 0x27	; 39
    172c:	f0 e0       	ldi	r31, 0x00	; 0
    172e:	90 81       	ld	r25, Z
    1730:	98 7f       	andi	r25, 0xF8	; 248
    1732:	89 2b       	or	r24, r25
    1734:	80 83       	st	Z, r24
    ADC_ADCSRA_REG|=(ADC_START_CONVERSION);
    1736:	e6 e2       	ldi	r30, 0x26	; 38
    1738:	f0 e0       	ldi	r31, 0x00	; 0
    173a:	80 81       	ld	r24, Z
    173c:	80 64       	ori	r24, 0x40	; 64
    173e:	80 83       	st	Z, r24
 	while(!(CHK_BIT(ADC_ADCSRA_REG,ADIF_BIT_NO)))
    1740:	80 81       	ld	r24, Z
    1742:	84 ff       	sbrs	r24, 4
    1744:	fd cf       	rjmp	.-6      	; 0x1740 <adcRead+0x16>
 		  {
 		  	  /*	Do Nothing	*/
 		  	  	  ;
 		  }
 	/*	Clear Interrupt Flag To Be Ready For Another Conversion	*/
 	 ADC_ADCSRA_REG|=(1<<ADIF_BIT_NO);
    1746:	e6 e2       	ldi	r30, 0x26	; 38
    1748:	f0 e0       	ldi	r31, 0x00	; 0
    174a:	80 81       	ld	r24, Z
    174c:	80 61       	ori	r24, 0x10	; 16
    174e:	80 83       	st	Z, r24
    result=(ADC_ADCL_REG|(ADC_ADCH_REG<<8));
    1750:	84 b1       	in	r24, 0x04	; 4
    1752:	45 b1       	in	r20, 0x05	; 5
    1754:	34 2f       	mov	r19, r20
    1756:	20 e0       	ldi	r18, 0x00	; 0
    1758:	90 e0       	ldi	r25, 0x00	; 0
    175a:	28 2b       	or	r18, r24
    175c:	39 2b       	or	r19, r25
 	return result;
}
    175e:	82 2f       	mov	r24, r18
    1760:	93 2f       	mov	r25, r19
    1762:	08 95       	ret

00001764 <__udivmodqi4>:
    1764:	99 1b       	sub	r25, r25
    1766:	79 e0       	ldi	r23, 0x09	; 9
    1768:	04 c0       	rjmp	.+8      	; 0x1772 <__udivmodqi4_ep>

0000176a <__udivmodqi4_loop>:
    176a:	99 1f       	adc	r25, r25
    176c:	96 17       	cp	r25, r22
    176e:	08 f0       	brcs	.+2      	; 0x1772 <__udivmodqi4_ep>
    1770:	96 1b       	sub	r25, r22

00001772 <__udivmodqi4_ep>:
    1772:	88 1f       	adc	r24, r24
    1774:	7a 95       	dec	r23
    1776:	c9 f7       	brne	.-14     	; 0x176a <__udivmodqi4_loop>
    1778:	80 95       	com	r24
    177a:	08 95       	ret

0000177c <__udivmodhi4>:
    177c:	aa 1b       	sub	r26, r26
    177e:	bb 1b       	sub	r27, r27
    1780:	51 e1       	ldi	r21, 0x11	; 17
    1782:	07 c0       	rjmp	.+14     	; 0x1792 <__udivmodhi4_ep>

00001784 <__udivmodhi4_loop>:
    1784:	aa 1f       	adc	r26, r26
    1786:	bb 1f       	adc	r27, r27
    1788:	a6 17       	cp	r26, r22
    178a:	b7 07       	cpc	r27, r23
    178c:	10 f0       	brcs	.+4      	; 0x1792 <__udivmodhi4_ep>
    178e:	a6 1b       	sub	r26, r22
    1790:	b7 0b       	sbc	r27, r23

00001792 <__udivmodhi4_ep>:
    1792:	88 1f       	adc	r24, r24
    1794:	99 1f       	adc	r25, r25
    1796:	5a 95       	dec	r21
    1798:	a9 f7       	brne	.-22     	; 0x1784 <__udivmodhi4_loop>
    179a:	80 95       	com	r24
    179c:	90 95       	com	r25
    179e:	bc 01       	movw	r22, r24
    17a0:	cd 01       	movw	r24, r26
    17a2:	08 95       	ret

000017a4 <__prologue_saves__>:
    17a4:	2f 92       	push	r2
    17a6:	3f 92       	push	r3
    17a8:	4f 92       	push	r4
    17aa:	5f 92       	push	r5
    17ac:	6f 92       	push	r6
    17ae:	7f 92       	push	r7
    17b0:	8f 92       	push	r8
    17b2:	9f 92       	push	r9
    17b4:	af 92       	push	r10
    17b6:	bf 92       	push	r11
    17b8:	cf 92       	push	r12
    17ba:	df 92       	push	r13
    17bc:	ef 92       	push	r14
    17be:	ff 92       	push	r15
    17c0:	0f 93       	push	r16
    17c2:	1f 93       	push	r17
    17c4:	cf 93       	push	r28
    17c6:	df 93       	push	r29
    17c8:	cd b7       	in	r28, 0x3d	; 61
    17ca:	de b7       	in	r29, 0x3e	; 62
    17cc:	ca 1b       	sub	r28, r26
    17ce:	db 0b       	sbc	r29, r27
    17d0:	0f b6       	in	r0, 0x3f	; 63
    17d2:	f8 94       	cli
    17d4:	de bf       	out	0x3e, r29	; 62
    17d6:	0f be       	out	0x3f, r0	; 63
    17d8:	cd bf       	out	0x3d, r28	; 61
    17da:	09 94       	ijmp

000017dc <__epilogue_restores__>:
    17dc:	2a 88       	ldd	r2, Y+18	; 0x12
    17de:	39 88       	ldd	r3, Y+17	; 0x11
    17e0:	48 88       	ldd	r4, Y+16	; 0x10
    17e2:	5f 84       	ldd	r5, Y+15	; 0x0f
    17e4:	6e 84       	ldd	r6, Y+14	; 0x0e
    17e6:	7d 84       	ldd	r7, Y+13	; 0x0d
    17e8:	8c 84       	ldd	r8, Y+12	; 0x0c
    17ea:	9b 84       	ldd	r9, Y+11	; 0x0b
    17ec:	aa 84       	ldd	r10, Y+10	; 0x0a
    17ee:	b9 84       	ldd	r11, Y+9	; 0x09
    17f0:	c8 84       	ldd	r12, Y+8	; 0x08
    17f2:	df 80       	ldd	r13, Y+7	; 0x07
    17f4:	ee 80       	ldd	r14, Y+6	; 0x06
    17f6:	fd 80       	ldd	r15, Y+5	; 0x05
    17f8:	0c 81       	ldd	r16, Y+4	; 0x04
    17fa:	1b 81       	ldd	r17, Y+3	; 0x03
    17fc:	aa 81       	ldd	r26, Y+2	; 0x02
    17fe:	b9 81       	ldd	r27, Y+1	; 0x01
    1800:	ce 0f       	add	r28, r30
    1802:	d1 1d       	adc	r29, r1
    1804:	0f b6       	in	r0, 0x3f	; 63
    1806:	f8 94       	cli
    1808:	de bf       	out	0x3e, r29	; 62
    180a:	0f be       	out	0x3f, r0	; 63
    180c:	cd bf       	out	0x3d, r28	; 61
    180e:	ed 01       	movw	r28, r26
    1810:	08 95       	ret

00001812 <_exit>:
    1812:	f8 94       	cli

00001814 <__stop_program>:
    1814:	ff cf       	rjmp	.-2      	; 0x1814 <__stop_program>
