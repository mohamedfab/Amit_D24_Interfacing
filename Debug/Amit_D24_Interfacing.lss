
Amit_D24_Interfacing.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002870  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000148  00800060  00002870  000028e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00002874  00000000  00000000  00002a2c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00001720  00000000  00000000  000052a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000001a0  00000000  00000000  000069c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000001f2  00000000  00000000  00006b60  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000240b  00000000  00000000  00006d52  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001386  00000000  00000000  0000915d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000011d6  00000000  00000000  0000a4e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c0  00000000  00000000  0000b6bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002f6  00000000  00000000  0000b87c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000096e  00000000  00000000  0000bb72  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000c4e0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e7       	ldi	r30, 0x70	; 112
      68:	f8 e2       	ldi	r31, 0x28	; 40
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 3a       	cpi	r26, 0xA8	; 168
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 0f 07 	call	0xe1e	; 0xe1e <main>
      7a:	0c 94 36 14 	jmp	0x286c	; 0x286c <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 ff 13 	jmp	0x27fe	; 0x27fe <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 1b 14 	jmp	0x2836	; 0x2836 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 0b 14 	jmp	0x2816	; 0x2816 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 27 14 	jmp	0x284e	; 0x284e <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 0b 14 	jmp	0x2816	; 0x2816 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 27 14 	jmp	0x284e	; 0x284e <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 ff 13 	jmp	0x27fe	; 0x27fe <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 1b 14 	jmp	0x2836	; 0x2836 <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 07 14 	jmp	0x280e	; 0x280e <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	60 e6       	ldi	r22, 0x60	; 96
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 23 14 	jmp	0x2846	; 0x2846 <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 0b 14 	jmp	0x2816	; 0x2816 <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 27 14 	jmp	0x284e	; 0x284e <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 0b 14 	jmp	0x2816	; 0x2816 <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 27 14 	jmp	0x284e	; 0x284e <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 0b 14 	jmp	0x2816	; 0x2816 <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 27 14 	jmp	0x284e	; 0x284e <__epilogue_restores__+0x18>

0000089a <__fixsfsi>:
     89a:	ac e0       	ldi	r26, 0x0C	; 12
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 0f 14 	jmp	0x281e	; 0x281e <__prologue_saves__+0x20>
     8a6:	69 83       	std	Y+1, r22	; 0x01
     8a8:	7a 83       	std	Y+2, r23	; 0x02
     8aa:	8b 83       	std	Y+3, r24	; 0x03
     8ac:	9c 83       	std	Y+4, r25	; 0x04
     8ae:	ce 01       	movw	r24, r28
     8b0:	01 96       	adiw	r24, 0x01	; 1
     8b2:	be 01       	movw	r22, r28
     8b4:	6b 5f       	subi	r22, 0xFB	; 251
     8b6:	7f 4f       	sbci	r23, 0xFF	; 255
     8b8:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     8bc:	8d 81       	ldd	r24, Y+5	; 0x05
     8be:	82 30       	cpi	r24, 0x02	; 2
     8c0:	61 f1       	breq	.+88     	; 0x91a <__fixsfsi+0x80>
     8c2:	82 30       	cpi	r24, 0x02	; 2
     8c4:	50 f1       	brcs	.+84     	; 0x91a <__fixsfsi+0x80>
     8c6:	84 30       	cpi	r24, 0x04	; 4
     8c8:	21 f4       	brne	.+8      	; 0x8d2 <__fixsfsi+0x38>
     8ca:	8e 81       	ldd	r24, Y+6	; 0x06
     8cc:	88 23       	and	r24, r24
     8ce:	51 f1       	breq	.+84     	; 0x924 <__fixsfsi+0x8a>
     8d0:	2e c0       	rjmp	.+92     	; 0x92e <__fixsfsi+0x94>
     8d2:	2f 81       	ldd	r18, Y+7	; 0x07
     8d4:	38 85       	ldd	r19, Y+8	; 0x08
     8d6:	37 fd       	sbrc	r19, 7
     8d8:	20 c0       	rjmp	.+64     	; 0x91a <__fixsfsi+0x80>
     8da:	6e 81       	ldd	r22, Y+6	; 0x06
     8dc:	2f 31       	cpi	r18, 0x1F	; 31
     8de:	31 05       	cpc	r19, r1
     8e0:	1c f0       	brlt	.+6      	; 0x8e8 <__fixsfsi+0x4e>
     8e2:	66 23       	and	r22, r22
     8e4:	f9 f0       	breq	.+62     	; 0x924 <__fixsfsi+0x8a>
     8e6:	23 c0       	rjmp	.+70     	; 0x92e <__fixsfsi+0x94>
     8e8:	8e e1       	ldi	r24, 0x1E	; 30
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	82 1b       	sub	r24, r18
     8ee:	93 0b       	sbc	r25, r19
     8f0:	29 85       	ldd	r18, Y+9	; 0x09
     8f2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8f4:	4b 85       	ldd	r20, Y+11	; 0x0b
     8f6:	5c 85       	ldd	r21, Y+12	; 0x0c
     8f8:	04 c0       	rjmp	.+8      	; 0x902 <__fixsfsi+0x68>
     8fa:	56 95       	lsr	r21
     8fc:	47 95       	ror	r20
     8fe:	37 95       	ror	r19
     900:	27 95       	ror	r18
     902:	8a 95       	dec	r24
     904:	d2 f7       	brpl	.-12     	; 0x8fa <__fixsfsi+0x60>
     906:	66 23       	and	r22, r22
     908:	b1 f0       	breq	.+44     	; 0x936 <__fixsfsi+0x9c>
     90a:	50 95       	com	r21
     90c:	40 95       	com	r20
     90e:	30 95       	com	r19
     910:	21 95       	neg	r18
     912:	3f 4f       	sbci	r19, 0xFF	; 255
     914:	4f 4f       	sbci	r20, 0xFF	; 255
     916:	5f 4f       	sbci	r21, 0xFF	; 255
     918:	0e c0       	rjmp	.+28     	; 0x936 <__fixsfsi+0x9c>
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	09 c0       	rjmp	.+18     	; 0x936 <__fixsfsi+0x9c>
     924:	2f ef       	ldi	r18, 0xFF	; 255
     926:	3f ef       	ldi	r19, 0xFF	; 255
     928:	4f ef       	ldi	r20, 0xFF	; 255
     92a:	5f e7       	ldi	r21, 0x7F	; 127
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__fixsfsi+0x9c>
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	50 e8       	ldi	r21, 0x80	; 128
     936:	b9 01       	movw	r22, r18
     938:	ca 01       	movw	r24, r20
     93a:	2c 96       	adiw	r28, 0x0c	; 12
     93c:	e2 e0       	ldi	r30, 0x02	; 2
     93e:	0c 94 2b 14 	jmp	0x2856	; 0x2856 <__epilogue_restores__+0x20>

00000942 <__floatunsisf>:
     942:	a8 e0       	ldi	r26, 0x08	; 8
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e7 ea       	ldi	r30, 0xA7	; 167
     948:	f4 e0       	ldi	r31, 0x04	; 4
     94a:	0c 94 07 14 	jmp	0x280e	; 0x280e <__prologue_saves__+0x10>
     94e:	7b 01       	movw	r14, r22
     950:	8c 01       	movw	r16, r24
     952:	61 15       	cp	r22, r1
     954:	71 05       	cpc	r23, r1
     956:	81 05       	cpc	r24, r1
     958:	91 05       	cpc	r25, r1
     95a:	19 f4       	brne	.+6      	; 0x962 <__floatunsisf+0x20>
     95c:	82 e0       	ldi	r24, 0x02	; 2
     95e:	89 83       	std	Y+1, r24	; 0x01
     960:	60 c0       	rjmp	.+192    	; 0xa22 <__floatunsisf+0xe0>
     962:	83 e0       	ldi	r24, 0x03	; 3
     964:	89 83       	std	Y+1, r24	; 0x01
     966:	8e e1       	ldi	r24, 0x1E	; 30
     968:	c8 2e       	mov	r12, r24
     96a:	d1 2c       	mov	r13, r1
     96c:	dc 82       	std	Y+4, r13	; 0x04
     96e:	cb 82       	std	Y+3, r12	; 0x03
     970:	ed 82       	std	Y+5, r14	; 0x05
     972:	fe 82       	std	Y+6, r15	; 0x06
     974:	0f 83       	std	Y+7, r16	; 0x07
     976:	18 87       	std	Y+8, r17	; 0x08
     978:	c8 01       	movw	r24, r16
     97a:	b7 01       	movw	r22, r14
     97c:	0e 94 1a 05 	call	0xa34	; 0xa34 <__clzsi2>
     980:	fc 01       	movw	r30, r24
     982:	31 97       	sbiw	r30, 0x01	; 1
     984:	f7 ff       	sbrs	r31, 7
     986:	3b c0       	rjmp	.+118    	; 0x9fe <__floatunsisf+0xbc>
     988:	22 27       	eor	r18, r18
     98a:	33 27       	eor	r19, r19
     98c:	2e 1b       	sub	r18, r30
     98e:	3f 0b       	sbc	r19, r31
     990:	57 01       	movw	r10, r14
     992:	68 01       	movw	r12, r16
     994:	02 2e       	mov	r0, r18
     996:	04 c0       	rjmp	.+8      	; 0x9a0 <__floatunsisf+0x5e>
     998:	d6 94       	lsr	r13
     99a:	c7 94       	ror	r12
     99c:	b7 94       	ror	r11
     99e:	a7 94       	ror	r10
     9a0:	0a 94       	dec	r0
     9a2:	d2 f7       	brpl	.-12     	; 0x998 <__floatunsisf+0x56>
     9a4:	40 e0       	ldi	r20, 0x00	; 0
     9a6:	50 e0       	ldi	r21, 0x00	; 0
     9a8:	60 e0       	ldi	r22, 0x00	; 0
     9aa:	70 e0       	ldi	r23, 0x00	; 0
     9ac:	81 e0       	ldi	r24, 0x01	; 1
     9ae:	90 e0       	ldi	r25, 0x00	; 0
     9b0:	a0 e0       	ldi	r26, 0x00	; 0
     9b2:	b0 e0       	ldi	r27, 0x00	; 0
     9b4:	04 c0       	rjmp	.+8      	; 0x9be <__floatunsisf+0x7c>
     9b6:	88 0f       	add	r24, r24
     9b8:	99 1f       	adc	r25, r25
     9ba:	aa 1f       	adc	r26, r26
     9bc:	bb 1f       	adc	r27, r27
     9be:	2a 95       	dec	r18
     9c0:	d2 f7       	brpl	.-12     	; 0x9b6 <__floatunsisf+0x74>
     9c2:	01 97       	sbiw	r24, 0x01	; 1
     9c4:	a1 09       	sbc	r26, r1
     9c6:	b1 09       	sbc	r27, r1
     9c8:	8e 21       	and	r24, r14
     9ca:	9f 21       	and	r25, r15
     9cc:	a0 23       	and	r26, r16
     9ce:	b1 23       	and	r27, r17
     9d0:	00 97       	sbiw	r24, 0x00	; 0
     9d2:	a1 05       	cpc	r26, r1
     9d4:	b1 05       	cpc	r27, r1
     9d6:	21 f0       	breq	.+8      	; 0x9e0 <__floatunsisf+0x9e>
     9d8:	41 e0       	ldi	r20, 0x01	; 1
     9da:	50 e0       	ldi	r21, 0x00	; 0
     9dc:	60 e0       	ldi	r22, 0x00	; 0
     9de:	70 e0       	ldi	r23, 0x00	; 0
     9e0:	4a 29       	or	r20, r10
     9e2:	5b 29       	or	r21, r11
     9e4:	6c 29       	or	r22, r12
     9e6:	7d 29       	or	r23, r13
     9e8:	4d 83       	std	Y+5, r20	; 0x05
     9ea:	5e 83       	std	Y+6, r21	; 0x06
     9ec:	6f 83       	std	Y+7, r22	; 0x07
     9ee:	78 87       	std	Y+8, r23	; 0x08
     9f0:	8e e1       	ldi	r24, 0x1E	; 30
     9f2:	90 e0       	ldi	r25, 0x00	; 0
     9f4:	8e 1b       	sub	r24, r30
     9f6:	9f 0b       	sbc	r25, r31
     9f8:	9c 83       	std	Y+4, r25	; 0x04
     9fa:	8b 83       	std	Y+3, r24	; 0x03
     9fc:	12 c0       	rjmp	.+36     	; 0xa22 <__floatunsisf+0xe0>
     9fe:	30 97       	sbiw	r30, 0x00	; 0
     a00:	81 f0       	breq	.+32     	; 0xa22 <__floatunsisf+0xe0>
     a02:	0e 2e       	mov	r0, r30
     a04:	04 c0       	rjmp	.+8      	; 0xa0e <__floatunsisf+0xcc>
     a06:	ee 0c       	add	r14, r14
     a08:	ff 1c       	adc	r15, r15
     a0a:	00 1f       	adc	r16, r16
     a0c:	11 1f       	adc	r17, r17
     a0e:	0a 94       	dec	r0
     a10:	d2 f7       	brpl	.-12     	; 0xa06 <__floatunsisf+0xc4>
     a12:	ed 82       	std	Y+5, r14	; 0x05
     a14:	fe 82       	std	Y+6, r15	; 0x06
     a16:	0f 83       	std	Y+7, r16	; 0x07
     a18:	18 87       	std	Y+8, r17	; 0x08
     a1a:	ce 1a       	sub	r12, r30
     a1c:	df 0a       	sbc	r13, r31
     a1e:	dc 82       	std	Y+4, r13	; 0x04
     a20:	cb 82       	std	Y+3, r12	; 0x03
     a22:	1a 82       	std	Y+2, r1	; 0x02
     a24:	ce 01       	movw	r24, r28
     a26:	01 96       	adiw	r24, 0x01	; 1
     a28:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     a2c:	28 96       	adiw	r28, 0x08	; 8
     a2e:	ea e0       	ldi	r30, 0x0A	; 10
     a30:	0c 94 23 14 	jmp	0x2846	; 0x2846 <__epilogue_restores__+0x10>

00000a34 <__clzsi2>:
     a34:	ef 92       	push	r14
     a36:	ff 92       	push	r15
     a38:	0f 93       	push	r16
     a3a:	1f 93       	push	r17
     a3c:	7b 01       	movw	r14, r22
     a3e:	8c 01       	movw	r16, r24
     a40:	80 e0       	ldi	r24, 0x00	; 0
     a42:	e8 16       	cp	r14, r24
     a44:	80 e0       	ldi	r24, 0x00	; 0
     a46:	f8 06       	cpc	r15, r24
     a48:	81 e0       	ldi	r24, 0x01	; 1
     a4a:	08 07       	cpc	r16, r24
     a4c:	80 e0       	ldi	r24, 0x00	; 0
     a4e:	18 07       	cpc	r17, r24
     a50:	88 f4       	brcc	.+34     	; 0xa74 <__clzsi2+0x40>
     a52:	8f ef       	ldi	r24, 0xFF	; 255
     a54:	e8 16       	cp	r14, r24
     a56:	f1 04       	cpc	r15, r1
     a58:	01 05       	cpc	r16, r1
     a5a:	11 05       	cpc	r17, r1
     a5c:	31 f0       	breq	.+12     	; 0xa6a <__clzsi2+0x36>
     a5e:	28 f0       	brcs	.+10     	; 0xa6a <__clzsi2+0x36>
     a60:	88 e0       	ldi	r24, 0x08	; 8
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	a0 e0       	ldi	r26, 0x00	; 0
     a66:	b0 e0       	ldi	r27, 0x00	; 0
     a68:	17 c0       	rjmp	.+46     	; 0xa98 <__clzsi2+0x64>
     a6a:	80 e0       	ldi	r24, 0x00	; 0
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	a0 e0       	ldi	r26, 0x00	; 0
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	12 c0       	rjmp	.+36     	; 0xa98 <__clzsi2+0x64>
     a74:	80 e0       	ldi	r24, 0x00	; 0
     a76:	e8 16       	cp	r14, r24
     a78:	80 e0       	ldi	r24, 0x00	; 0
     a7a:	f8 06       	cpc	r15, r24
     a7c:	80 e0       	ldi	r24, 0x00	; 0
     a7e:	08 07       	cpc	r16, r24
     a80:	81 e0       	ldi	r24, 0x01	; 1
     a82:	18 07       	cpc	r17, r24
     a84:	28 f0       	brcs	.+10     	; 0xa90 <__clzsi2+0x5c>
     a86:	88 e1       	ldi	r24, 0x18	; 24
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	b0 e0       	ldi	r27, 0x00	; 0
     a8e:	04 c0       	rjmp	.+8      	; 0xa98 <__clzsi2+0x64>
     a90:	80 e1       	ldi	r24, 0x10	; 16
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	a0 e0       	ldi	r26, 0x00	; 0
     a96:	b0 e0       	ldi	r27, 0x00	; 0
     a98:	20 e2       	ldi	r18, 0x20	; 32
     a9a:	30 e0       	ldi	r19, 0x00	; 0
     a9c:	40 e0       	ldi	r20, 0x00	; 0
     a9e:	50 e0       	ldi	r21, 0x00	; 0
     aa0:	28 1b       	sub	r18, r24
     aa2:	39 0b       	sbc	r19, r25
     aa4:	4a 0b       	sbc	r20, r26
     aa6:	5b 0b       	sbc	r21, r27
     aa8:	04 c0       	rjmp	.+8      	; 0xab2 <__clzsi2+0x7e>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	8a 95       	dec	r24
     ab4:	d2 f7       	brpl	.-12     	; 0xaaa <__clzsi2+0x76>
     ab6:	f7 01       	movw	r30, r14
     ab8:	e8 59       	subi	r30, 0x98	; 152
     aba:	ff 4f       	sbci	r31, 0xFF	; 255
     abc:	80 81       	ld	r24, Z
     abe:	28 1b       	sub	r18, r24
     ac0:	31 09       	sbc	r19, r1
     ac2:	41 09       	sbc	r20, r1
     ac4:	51 09       	sbc	r21, r1
     ac6:	c9 01       	movw	r24, r18
     ac8:	1f 91       	pop	r17
     aca:	0f 91       	pop	r16
     acc:	ff 90       	pop	r15
     ace:	ef 90       	pop	r14
     ad0:	08 95       	ret

00000ad2 <__pack_f>:
     ad2:	df 92       	push	r13
     ad4:	ef 92       	push	r14
     ad6:	ff 92       	push	r15
     ad8:	0f 93       	push	r16
     ada:	1f 93       	push	r17
     adc:	fc 01       	movw	r30, r24
     ade:	e4 80       	ldd	r14, Z+4	; 0x04
     ae0:	f5 80       	ldd	r15, Z+5	; 0x05
     ae2:	06 81       	ldd	r16, Z+6	; 0x06
     ae4:	17 81       	ldd	r17, Z+7	; 0x07
     ae6:	d1 80       	ldd	r13, Z+1	; 0x01
     ae8:	80 81       	ld	r24, Z
     aea:	82 30       	cpi	r24, 0x02	; 2
     aec:	48 f4       	brcc	.+18     	; 0xb00 <__pack_f+0x2e>
     aee:	80 e0       	ldi	r24, 0x00	; 0
     af0:	90 e0       	ldi	r25, 0x00	; 0
     af2:	a0 e1       	ldi	r26, 0x10	; 16
     af4:	b0 e0       	ldi	r27, 0x00	; 0
     af6:	e8 2a       	or	r14, r24
     af8:	f9 2a       	or	r15, r25
     afa:	0a 2b       	or	r16, r26
     afc:	1b 2b       	or	r17, r27
     afe:	a5 c0       	rjmp	.+330    	; 0xc4a <__pack_f+0x178>
     b00:	84 30       	cpi	r24, 0x04	; 4
     b02:	09 f4       	brne	.+2      	; 0xb06 <__pack_f+0x34>
     b04:	9f c0       	rjmp	.+318    	; 0xc44 <__pack_f+0x172>
     b06:	82 30       	cpi	r24, 0x02	; 2
     b08:	21 f4       	brne	.+8      	; 0xb12 <__pack_f+0x40>
     b0a:	ee 24       	eor	r14, r14
     b0c:	ff 24       	eor	r15, r15
     b0e:	87 01       	movw	r16, r14
     b10:	05 c0       	rjmp	.+10     	; 0xb1c <__pack_f+0x4a>
     b12:	e1 14       	cp	r14, r1
     b14:	f1 04       	cpc	r15, r1
     b16:	01 05       	cpc	r16, r1
     b18:	11 05       	cpc	r17, r1
     b1a:	19 f4       	brne	.+6      	; 0xb22 <__pack_f+0x50>
     b1c:	e0 e0       	ldi	r30, 0x00	; 0
     b1e:	f0 e0       	ldi	r31, 0x00	; 0
     b20:	96 c0       	rjmp	.+300    	; 0xc4e <__pack_f+0x17c>
     b22:	62 81       	ldd	r22, Z+2	; 0x02
     b24:	73 81       	ldd	r23, Z+3	; 0x03
     b26:	9f ef       	ldi	r25, 0xFF	; 255
     b28:	62 38       	cpi	r22, 0x82	; 130
     b2a:	79 07       	cpc	r23, r25
     b2c:	0c f0       	brlt	.+2      	; 0xb30 <__pack_f+0x5e>
     b2e:	5b c0       	rjmp	.+182    	; 0xbe6 <__pack_f+0x114>
     b30:	22 e8       	ldi	r18, 0x82	; 130
     b32:	3f ef       	ldi	r19, 0xFF	; 255
     b34:	26 1b       	sub	r18, r22
     b36:	37 0b       	sbc	r19, r23
     b38:	2a 31       	cpi	r18, 0x1A	; 26
     b3a:	31 05       	cpc	r19, r1
     b3c:	2c f0       	brlt	.+10     	; 0xb48 <__pack_f+0x76>
     b3e:	20 e0       	ldi	r18, 0x00	; 0
     b40:	30 e0       	ldi	r19, 0x00	; 0
     b42:	40 e0       	ldi	r20, 0x00	; 0
     b44:	50 e0       	ldi	r21, 0x00	; 0
     b46:	2a c0       	rjmp	.+84     	; 0xb9c <__pack_f+0xca>
     b48:	b8 01       	movw	r22, r16
     b4a:	a7 01       	movw	r20, r14
     b4c:	02 2e       	mov	r0, r18
     b4e:	04 c0       	rjmp	.+8      	; 0xb58 <__pack_f+0x86>
     b50:	76 95       	lsr	r23
     b52:	67 95       	ror	r22
     b54:	57 95       	ror	r21
     b56:	47 95       	ror	r20
     b58:	0a 94       	dec	r0
     b5a:	d2 f7       	brpl	.-12     	; 0xb50 <__pack_f+0x7e>
     b5c:	81 e0       	ldi	r24, 0x01	; 1
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	04 c0       	rjmp	.+8      	; 0xb6e <__pack_f+0x9c>
     b66:	88 0f       	add	r24, r24
     b68:	99 1f       	adc	r25, r25
     b6a:	aa 1f       	adc	r26, r26
     b6c:	bb 1f       	adc	r27, r27
     b6e:	2a 95       	dec	r18
     b70:	d2 f7       	brpl	.-12     	; 0xb66 <__pack_f+0x94>
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	a1 09       	sbc	r26, r1
     b76:	b1 09       	sbc	r27, r1
     b78:	8e 21       	and	r24, r14
     b7a:	9f 21       	and	r25, r15
     b7c:	a0 23       	and	r26, r16
     b7e:	b1 23       	and	r27, r17
     b80:	00 97       	sbiw	r24, 0x00	; 0
     b82:	a1 05       	cpc	r26, r1
     b84:	b1 05       	cpc	r27, r1
     b86:	21 f0       	breq	.+8      	; 0xb90 <__pack_f+0xbe>
     b88:	81 e0       	ldi	r24, 0x01	; 1
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	a0 e0       	ldi	r26, 0x00	; 0
     b8e:	b0 e0       	ldi	r27, 0x00	; 0
     b90:	9a 01       	movw	r18, r20
     b92:	ab 01       	movw	r20, r22
     b94:	28 2b       	or	r18, r24
     b96:	39 2b       	or	r19, r25
     b98:	4a 2b       	or	r20, r26
     b9a:	5b 2b       	or	r21, r27
     b9c:	da 01       	movw	r26, r20
     b9e:	c9 01       	movw	r24, r18
     ba0:	8f 77       	andi	r24, 0x7F	; 127
     ba2:	90 70       	andi	r25, 0x00	; 0
     ba4:	a0 70       	andi	r26, 0x00	; 0
     ba6:	b0 70       	andi	r27, 0x00	; 0
     ba8:	80 34       	cpi	r24, 0x40	; 64
     baa:	91 05       	cpc	r25, r1
     bac:	a1 05       	cpc	r26, r1
     bae:	b1 05       	cpc	r27, r1
     bb0:	39 f4       	brne	.+14     	; 0xbc0 <__pack_f+0xee>
     bb2:	27 ff       	sbrs	r18, 7
     bb4:	09 c0       	rjmp	.+18     	; 0xbc8 <__pack_f+0xf6>
     bb6:	20 5c       	subi	r18, 0xC0	; 192
     bb8:	3f 4f       	sbci	r19, 0xFF	; 255
     bba:	4f 4f       	sbci	r20, 0xFF	; 255
     bbc:	5f 4f       	sbci	r21, 0xFF	; 255
     bbe:	04 c0       	rjmp	.+8      	; 0xbc8 <__pack_f+0xf6>
     bc0:	21 5c       	subi	r18, 0xC1	; 193
     bc2:	3f 4f       	sbci	r19, 0xFF	; 255
     bc4:	4f 4f       	sbci	r20, 0xFF	; 255
     bc6:	5f 4f       	sbci	r21, 0xFF	; 255
     bc8:	e0 e0       	ldi	r30, 0x00	; 0
     bca:	f0 e0       	ldi	r31, 0x00	; 0
     bcc:	20 30       	cpi	r18, 0x00	; 0
     bce:	a0 e0       	ldi	r26, 0x00	; 0
     bd0:	3a 07       	cpc	r19, r26
     bd2:	a0 e0       	ldi	r26, 0x00	; 0
     bd4:	4a 07       	cpc	r20, r26
     bd6:	a0 e4       	ldi	r26, 0x40	; 64
     bd8:	5a 07       	cpc	r21, r26
     bda:	10 f0       	brcs	.+4      	; 0xbe0 <__pack_f+0x10e>
     bdc:	e1 e0       	ldi	r30, 0x01	; 1
     bde:	f0 e0       	ldi	r31, 0x00	; 0
     be0:	79 01       	movw	r14, r18
     be2:	8a 01       	movw	r16, r20
     be4:	27 c0       	rjmp	.+78     	; 0xc34 <__pack_f+0x162>
     be6:	60 38       	cpi	r22, 0x80	; 128
     be8:	71 05       	cpc	r23, r1
     bea:	64 f5       	brge	.+88     	; 0xc44 <__pack_f+0x172>
     bec:	fb 01       	movw	r30, r22
     bee:	e1 58       	subi	r30, 0x81	; 129
     bf0:	ff 4f       	sbci	r31, 0xFF	; 255
     bf2:	d8 01       	movw	r26, r16
     bf4:	c7 01       	movw	r24, r14
     bf6:	8f 77       	andi	r24, 0x7F	; 127
     bf8:	90 70       	andi	r25, 0x00	; 0
     bfa:	a0 70       	andi	r26, 0x00	; 0
     bfc:	b0 70       	andi	r27, 0x00	; 0
     bfe:	80 34       	cpi	r24, 0x40	; 64
     c00:	91 05       	cpc	r25, r1
     c02:	a1 05       	cpc	r26, r1
     c04:	b1 05       	cpc	r27, r1
     c06:	39 f4       	brne	.+14     	; 0xc16 <__pack_f+0x144>
     c08:	e7 fe       	sbrs	r14, 7
     c0a:	0d c0       	rjmp	.+26     	; 0xc26 <__pack_f+0x154>
     c0c:	80 e4       	ldi	r24, 0x40	; 64
     c0e:	90 e0       	ldi	r25, 0x00	; 0
     c10:	a0 e0       	ldi	r26, 0x00	; 0
     c12:	b0 e0       	ldi	r27, 0x00	; 0
     c14:	04 c0       	rjmp	.+8      	; 0xc1e <__pack_f+0x14c>
     c16:	8f e3       	ldi	r24, 0x3F	; 63
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	a0 e0       	ldi	r26, 0x00	; 0
     c1c:	b0 e0       	ldi	r27, 0x00	; 0
     c1e:	e8 0e       	add	r14, r24
     c20:	f9 1e       	adc	r15, r25
     c22:	0a 1f       	adc	r16, r26
     c24:	1b 1f       	adc	r17, r27
     c26:	17 ff       	sbrs	r17, 7
     c28:	05 c0       	rjmp	.+10     	; 0xc34 <__pack_f+0x162>
     c2a:	16 95       	lsr	r17
     c2c:	07 95       	ror	r16
     c2e:	f7 94       	ror	r15
     c30:	e7 94       	ror	r14
     c32:	31 96       	adiw	r30, 0x01	; 1
     c34:	87 e0       	ldi	r24, 0x07	; 7
     c36:	16 95       	lsr	r17
     c38:	07 95       	ror	r16
     c3a:	f7 94       	ror	r15
     c3c:	e7 94       	ror	r14
     c3e:	8a 95       	dec	r24
     c40:	d1 f7       	brne	.-12     	; 0xc36 <__pack_f+0x164>
     c42:	05 c0       	rjmp	.+10     	; 0xc4e <__pack_f+0x17c>
     c44:	ee 24       	eor	r14, r14
     c46:	ff 24       	eor	r15, r15
     c48:	87 01       	movw	r16, r14
     c4a:	ef ef       	ldi	r30, 0xFF	; 255
     c4c:	f0 e0       	ldi	r31, 0x00	; 0
     c4e:	6e 2f       	mov	r22, r30
     c50:	67 95       	ror	r22
     c52:	66 27       	eor	r22, r22
     c54:	67 95       	ror	r22
     c56:	90 2f       	mov	r25, r16
     c58:	9f 77       	andi	r25, 0x7F	; 127
     c5a:	d7 94       	ror	r13
     c5c:	dd 24       	eor	r13, r13
     c5e:	d7 94       	ror	r13
     c60:	8e 2f       	mov	r24, r30
     c62:	86 95       	lsr	r24
     c64:	49 2f       	mov	r20, r25
     c66:	46 2b       	or	r20, r22
     c68:	58 2f       	mov	r21, r24
     c6a:	5d 29       	or	r21, r13
     c6c:	b7 01       	movw	r22, r14
     c6e:	ca 01       	movw	r24, r20
     c70:	1f 91       	pop	r17
     c72:	0f 91       	pop	r16
     c74:	ff 90       	pop	r15
     c76:	ef 90       	pop	r14
     c78:	df 90       	pop	r13
     c7a:	08 95       	ret

00000c7c <__unpack_f>:
     c7c:	fc 01       	movw	r30, r24
     c7e:	db 01       	movw	r26, r22
     c80:	40 81       	ld	r20, Z
     c82:	51 81       	ldd	r21, Z+1	; 0x01
     c84:	22 81       	ldd	r18, Z+2	; 0x02
     c86:	62 2f       	mov	r22, r18
     c88:	6f 77       	andi	r22, 0x7F	; 127
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	22 1f       	adc	r18, r18
     c8e:	22 27       	eor	r18, r18
     c90:	22 1f       	adc	r18, r18
     c92:	93 81       	ldd	r25, Z+3	; 0x03
     c94:	89 2f       	mov	r24, r25
     c96:	88 0f       	add	r24, r24
     c98:	82 2b       	or	r24, r18
     c9a:	28 2f       	mov	r18, r24
     c9c:	30 e0       	ldi	r19, 0x00	; 0
     c9e:	99 1f       	adc	r25, r25
     ca0:	99 27       	eor	r25, r25
     ca2:	99 1f       	adc	r25, r25
     ca4:	11 96       	adiw	r26, 0x01	; 1
     ca6:	9c 93       	st	X, r25
     ca8:	11 97       	sbiw	r26, 0x01	; 1
     caa:	21 15       	cp	r18, r1
     cac:	31 05       	cpc	r19, r1
     cae:	a9 f5       	brne	.+106    	; 0xd1a <__unpack_f+0x9e>
     cb0:	41 15       	cp	r20, r1
     cb2:	51 05       	cpc	r21, r1
     cb4:	61 05       	cpc	r22, r1
     cb6:	71 05       	cpc	r23, r1
     cb8:	11 f4       	brne	.+4      	; 0xcbe <__unpack_f+0x42>
     cba:	82 e0       	ldi	r24, 0x02	; 2
     cbc:	37 c0       	rjmp	.+110    	; 0xd2c <__unpack_f+0xb0>
     cbe:	82 e8       	ldi	r24, 0x82	; 130
     cc0:	9f ef       	ldi	r25, 0xFF	; 255
     cc2:	13 96       	adiw	r26, 0x03	; 3
     cc4:	9c 93       	st	X, r25
     cc6:	8e 93       	st	-X, r24
     cc8:	12 97       	sbiw	r26, 0x02	; 2
     cca:	9a 01       	movw	r18, r20
     ccc:	ab 01       	movw	r20, r22
     cce:	67 e0       	ldi	r22, 0x07	; 7
     cd0:	22 0f       	add	r18, r18
     cd2:	33 1f       	adc	r19, r19
     cd4:	44 1f       	adc	r20, r20
     cd6:	55 1f       	adc	r21, r21
     cd8:	6a 95       	dec	r22
     cda:	d1 f7       	brne	.-12     	; 0xcd0 <__unpack_f+0x54>
     cdc:	83 e0       	ldi	r24, 0x03	; 3
     cde:	8c 93       	st	X, r24
     ce0:	0d c0       	rjmp	.+26     	; 0xcfc <__unpack_f+0x80>
     ce2:	22 0f       	add	r18, r18
     ce4:	33 1f       	adc	r19, r19
     ce6:	44 1f       	adc	r20, r20
     ce8:	55 1f       	adc	r21, r21
     cea:	12 96       	adiw	r26, 0x02	; 2
     cec:	8d 91       	ld	r24, X+
     cee:	9c 91       	ld	r25, X
     cf0:	13 97       	sbiw	r26, 0x03	; 3
     cf2:	01 97       	sbiw	r24, 0x01	; 1
     cf4:	13 96       	adiw	r26, 0x03	; 3
     cf6:	9c 93       	st	X, r25
     cf8:	8e 93       	st	-X, r24
     cfa:	12 97       	sbiw	r26, 0x02	; 2
     cfc:	20 30       	cpi	r18, 0x00	; 0
     cfe:	80 e0       	ldi	r24, 0x00	; 0
     d00:	38 07       	cpc	r19, r24
     d02:	80 e0       	ldi	r24, 0x00	; 0
     d04:	48 07       	cpc	r20, r24
     d06:	80 e4       	ldi	r24, 0x40	; 64
     d08:	58 07       	cpc	r21, r24
     d0a:	58 f3       	brcs	.-42     	; 0xce2 <__unpack_f+0x66>
     d0c:	14 96       	adiw	r26, 0x04	; 4
     d0e:	2d 93       	st	X+, r18
     d10:	3d 93       	st	X+, r19
     d12:	4d 93       	st	X+, r20
     d14:	5c 93       	st	X, r21
     d16:	17 97       	sbiw	r26, 0x07	; 7
     d18:	08 95       	ret
     d1a:	2f 3f       	cpi	r18, 0xFF	; 255
     d1c:	31 05       	cpc	r19, r1
     d1e:	79 f4       	brne	.+30     	; 0xd3e <__unpack_f+0xc2>
     d20:	41 15       	cp	r20, r1
     d22:	51 05       	cpc	r21, r1
     d24:	61 05       	cpc	r22, r1
     d26:	71 05       	cpc	r23, r1
     d28:	19 f4       	brne	.+6      	; 0xd30 <__unpack_f+0xb4>
     d2a:	84 e0       	ldi	r24, 0x04	; 4
     d2c:	8c 93       	st	X, r24
     d2e:	08 95       	ret
     d30:	64 ff       	sbrs	r22, 4
     d32:	03 c0       	rjmp	.+6      	; 0xd3a <__unpack_f+0xbe>
     d34:	81 e0       	ldi	r24, 0x01	; 1
     d36:	8c 93       	st	X, r24
     d38:	12 c0       	rjmp	.+36     	; 0xd5e <__unpack_f+0xe2>
     d3a:	1c 92       	st	X, r1
     d3c:	10 c0       	rjmp	.+32     	; 0xd5e <__unpack_f+0xe2>
     d3e:	2f 57       	subi	r18, 0x7F	; 127
     d40:	30 40       	sbci	r19, 0x00	; 0
     d42:	13 96       	adiw	r26, 0x03	; 3
     d44:	3c 93       	st	X, r19
     d46:	2e 93       	st	-X, r18
     d48:	12 97       	sbiw	r26, 0x02	; 2
     d4a:	83 e0       	ldi	r24, 0x03	; 3
     d4c:	8c 93       	st	X, r24
     d4e:	87 e0       	ldi	r24, 0x07	; 7
     d50:	44 0f       	add	r20, r20
     d52:	55 1f       	adc	r21, r21
     d54:	66 1f       	adc	r22, r22
     d56:	77 1f       	adc	r23, r23
     d58:	8a 95       	dec	r24
     d5a:	d1 f7       	brne	.-12     	; 0xd50 <__unpack_f+0xd4>
     d5c:	70 64       	ori	r23, 0x40	; 64
     d5e:	14 96       	adiw	r26, 0x04	; 4
     d60:	4d 93       	st	X+, r20
     d62:	5d 93       	st	X+, r21
     d64:	6d 93       	st	X+, r22
     d66:	7c 93       	st	X, r23
     d68:	17 97       	sbiw	r26, 0x07	; 7
     d6a:	08 95       	ret

00000d6c <__fpcmp_parts_f>:
     d6c:	1f 93       	push	r17
     d6e:	dc 01       	movw	r26, r24
     d70:	fb 01       	movw	r30, r22
     d72:	9c 91       	ld	r25, X
     d74:	92 30       	cpi	r25, 0x02	; 2
     d76:	08 f4       	brcc	.+2      	; 0xd7a <__fpcmp_parts_f+0xe>
     d78:	47 c0       	rjmp	.+142    	; 0xe08 <__fpcmp_parts_f+0x9c>
     d7a:	80 81       	ld	r24, Z
     d7c:	82 30       	cpi	r24, 0x02	; 2
     d7e:	08 f4       	brcc	.+2      	; 0xd82 <__fpcmp_parts_f+0x16>
     d80:	43 c0       	rjmp	.+134    	; 0xe08 <__fpcmp_parts_f+0x9c>
     d82:	94 30       	cpi	r25, 0x04	; 4
     d84:	51 f4       	brne	.+20     	; 0xd9a <__fpcmp_parts_f+0x2e>
     d86:	11 96       	adiw	r26, 0x01	; 1
     d88:	1c 91       	ld	r17, X
     d8a:	84 30       	cpi	r24, 0x04	; 4
     d8c:	99 f5       	brne	.+102    	; 0xdf4 <__fpcmp_parts_f+0x88>
     d8e:	81 81       	ldd	r24, Z+1	; 0x01
     d90:	68 2f       	mov	r22, r24
     d92:	70 e0       	ldi	r23, 0x00	; 0
     d94:	61 1b       	sub	r22, r17
     d96:	71 09       	sbc	r23, r1
     d98:	3f c0       	rjmp	.+126    	; 0xe18 <__fpcmp_parts_f+0xac>
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	21 f0       	breq	.+8      	; 0xda6 <__fpcmp_parts_f+0x3a>
     d9e:	92 30       	cpi	r25, 0x02	; 2
     da0:	31 f4       	brne	.+12     	; 0xdae <__fpcmp_parts_f+0x42>
     da2:	82 30       	cpi	r24, 0x02	; 2
     da4:	b9 f1       	breq	.+110    	; 0xe14 <__fpcmp_parts_f+0xa8>
     da6:	81 81       	ldd	r24, Z+1	; 0x01
     da8:	88 23       	and	r24, r24
     daa:	89 f1       	breq	.+98     	; 0xe0e <__fpcmp_parts_f+0xa2>
     dac:	2d c0       	rjmp	.+90     	; 0xe08 <__fpcmp_parts_f+0x9c>
     dae:	11 96       	adiw	r26, 0x01	; 1
     db0:	1c 91       	ld	r17, X
     db2:	11 97       	sbiw	r26, 0x01	; 1
     db4:	82 30       	cpi	r24, 0x02	; 2
     db6:	f1 f0       	breq	.+60     	; 0xdf4 <__fpcmp_parts_f+0x88>
     db8:	81 81       	ldd	r24, Z+1	; 0x01
     dba:	18 17       	cp	r17, r24
     dbc:	d9 f4       	brne	.+54     	; 0xdf4 <__fpcmp_parts_f+0x88>
     dbe:	12 96       	adiw	r26, 0x02	; 2
     dc0:	2d 91       	ld	r18, X+
     dc2:	3c 91       	ld	r19, X
     dc4:	13 97       	sbiw	r26, 0x03	; 3
     dc6:	82 81       	ldd	r24, Z+2	; 0x02
     dc8:	93 81       	ldd	r25, Z+3	; 0x03
     dca:	82 17       	cp	r24, r18
     dcc:	93 07       	cpc	r25, r19
     dce:	94 f0       	brlt	.+36     	; 0xdf4 <__fpcmp_parts_f+0x88>
     dd0:	28 17       	cp	r18, r24
     dd2:	39 07       	cpc	r19, r25
     dd4:	bc f0       	brlt	.+46     	; 0xe04 <__fpcmp_parts_f+0x98>
     dd6:	14 96       	adiw	r26, 0x04	; 4
     dd8:	8d 91       	ld	r24, X+
     dda:	9d 91       	ld	r25, X+
     ddc:	0d 90       	ld	r0, X+
     dde:	bc 91       	ld	r27, X
     de0:	a0 2d       	mov	r26, r0
     de2:	24 81       	ldd	r18, Z+4	; 0x04
     de4:	35 81       	ldd	r19, Z+5	; 0x05
     de6:	46 81       	ldd	r20, Z+6	; 0x06
     de8:	57 81       	ldd	r21, Z+7	; 0x07
     dea:	28 17       	cp	r18, r24
     dec:	39 07       	cpc	r19, r25
     dee:	4a 07       	cpc	r20, r26
     df0:	5b 07       	cpc	r21, r27
     df2:	18 f4       	brcc	.+6      	; 0xdfa <__fpcmp_parts_f+0x8e>
     df4:	11 23       	and	r17, r17
     df6:	41 f0       	breq	.+16     	; 0xe08 <__fpcmp_parts_f+0x9c>
     df8:	0a c0       	rjmp	.+20     	; 0xe0e <__fpcmp_parts_f+0xa2>
     dfa:	82 17       	cp	r24, r18
     dfc:	93 07       	cpc	r25, r19
     dfe:	a4 07       	cpc	r26, r20
     e00:	b5 07       	cpc	r27, r21
     e02:	40 f4       	brcc	.+16     	; 0xe14 <__fpcmp_parts_f+0xa8>
     e04:	11 23       	and	r17, r17
     e06:	19 f0       	breq	.+6      	; 0xe0e <__fpcmp_parts_f+0xa2>
     e08:	61 e0       	ldi	r22, 0x01	; 1
     e0a:	70 e0       	ldi	r23, 0x00	; 0
     e0c:	05 c0       	rjmp	.+10     	; 0xe18 <__fpcmp_parts_f+0xac>
     e0e:	6f ef       	ldi	r22, 0xFF	; 255
     e10:	7f ef       	ldi	r23, 0xFF	; 255
     e12:	02 c0       	rjmp	.+4      	; 0xe18 <__fpcmp_parts_f+0xac>
     e14:	60 e0       	ldi	r22, 0x00	; 0
     e16:	70 e0       	ldi	r23, 0x00	; 0
     e18:	cb 01       	movw	r24, r22
     e1a:	1f 91       	pop	r17
     e1c:	08 95       	ret

00000e1e <main>:
#define CS00_BIT						(0)
#define COM01_BIT							(5)
#define WGM01_BIT							(3)
#define WGM00_BIT							(6)
int main ()
{
     e1e:	df 93       	push	r29
     e20:	cf 93       	push	r28
     e22:	cd b7       	in	r28, 0x3d	; 61
     e24:	de b7       	in	r29, 0x3e	; 62
     e26:	6d 97       	sbiw	r28, 0x1d	; 29
     e28:	0f b6       	in	r0, 0x3f	; 63
     e2a:	f8 94       	cli
     e2c:	de bf       	out	0x3e, r29	; 62
     e2e:	0f be       	out	0x3f, r0	; 63
     e30:	cd bf       	out	0x3d, r28	; 61
	u8 duty = 0;
     e32:	1d 8e       	std	Y+29, r1	; 0x1d
	/*	Fast PWM - Non-inverted - No Prescaler 	*/
	TIMER0_TCCR0_REG = (1<<WGM00_BIT) | (1<<WGM01_BIT) | (1<<COM01_BIT) | (1<<CS00_BIT);
     e34:	e3 e5       	ldi	r30, 0x53	; 83
     e36:	f0 e0       	ldi	r31, 0x00	; 0
     e38:	89 e6       	ldi	r24, 0x69	; 105
     e3a:	80 83       	st	Z, r24
	Dio_ConfigChannel(DIO_PORTB, DIO_PIN3, OUTPUT);
     e3c:	81 e0       	ldi	r24, 0x01	; 1
     e3e:	63 e0       	ldi	r22, 0x03	; 3
     e40:	41 e0       	ldi	r20, 0x01	; 1
     e42:	0e 94 45 10 	call	0x208a	; 0x208a <Dio_ConfigChannel>
	while (1)
	{
		for(duty=0; duty<255; duty++)
     e46:	1d 8e       	std	Y+29, r1	; 0x1d
     e48:	79 c0       	rjmp	.+242    	; 0xf3c <main+0x11e>
				{
					OCR0=duty;  /*increase the LED light intensity*/
     e4a:	ec e5       	ldi	r30, 0x5C	; 92
     e4c:	f0 e0       	ldi	r31, 0x00	; 0
     e4e:	8d 8d       	ldd	r24, Y+29	; 0x1d
     e50:	80 83       	st	Z, r24
     e52:	80 e0       	ldi	r24, 0x00	; 0
     e54:	90 e0       	ldi	r25, 0x00	; 0
     e56:	a0 e2       	ldi	r26, 0x20	; 32
     e58:	b1 e4       	ldi	r27, 0x41	; 65
     e5a:	89 8f       	std	Y+25, r24	; 0x19
     e5c:	9a 8f       	std	Y+26, r25	; 0x1a
     e5e:	ab 8f       	std	Y+27, r26	; 0x1b
     e60:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e62:	69 8d       	ldd	r22, Y+25	; 0x19
     e64:	7a 8d       	ldd	r23, Y+26	; 0x1a
     e66:	8b 8d       	ldd	r24, Y+27	; 0x1b
     e68:	9c 8d       	ldd	r25, Y+28	; 0x1c
     e6a:	20 e0       	ldi	r18, 0x00	; 0
     e6c:	30 e0       	ldi	r19, 0x00	; 0
     e6e:	4a e7       	ldi	r20, 0x7A	; 122
     e70:	55 e4       	ldi	r21, 0x45	; 69
     e72:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     e76:	dc 01       	movw	r26, r24
     e78:	cb 01       	movw	r24, r22
     e7a:	8d 8b       	std	Y+21, r24	; 0x15
     e7c:	9e 8b       	std	Y+22, r25	; 0x16
     e7e:	af 8b       	std	Y+23, r26	; 0x17
     e80:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     e82:	6d 89       	ldd	r22, Y+21	; 0x15
     e84:	7e 89       	ldd	r23, Y+22	; 0x16
     e86:	8f 89       	ldd	r24, Y+23	; 0x17
     e88:	98 8d       	ldd	r25, Y+24	; 0x18
     e8a:	20 e0       	ldi	r18, 0x00	; 0
     e8c:	30 e0       	ldi	r19, 0x00	; 0
     e8e:	40 e8       	ldi	r20, 0x80	; 128
     e90:	5f e3       	ldi	r21, 0x3F	; 63
     e92:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
     e96:	88 23       	and	r24, r24
     e98:	2c f4       	brge	.+10     	; 0xea4 <main+0x86>
		__ticks = 1;
     e9a:	81 e0       	ldi	r24, 0x01	; 1
     e9c:	90 e0       	ldi	r25, 0x00	; 0
     e9e:	9c 8b       	std	Y+20, r25	; 0x14
     ea0:	8b 8b       	std	Y+19, r24	; 0x13
     ea2:	3f c0       	rjmp	.+126    	; 0xf22 <main+0x104>
	else if (__tmp > 65535)
     ea4:	6d 89       	ldd	r22, Y+21	; 0x15
     ea6:	7e 89       	ldd	r23, Y+22	; 0x16
     ea8:	8f 89       	ldd	r24, Y+23	; 0x17
     eaa:	98 8d       	ldd	r25, Y+24	; 0x18
     eac:	20 e0       	ldi	r18, 0x00	; 0
     eae:	3f ef       	ldi	r19, 0xFF	; 255
     eb0:	4f e7       	ldi	r20, 0x7F	; 127
     eb2:	57 e4       	ldi	r21, 0x47	; 71
     eb4:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
     eb8:	18 16       	cp	r1, r24
     eba:	4c f5       	brge	.+82     	; 0xf0e <main+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ebc:	69 8d       	ldd	r22, Y+25	; 0x19
     ebe:	7a 8d       	ldd	r23, Y+26	; 0x1a
     ec0:	8b 8d       	ldd	r24, Y+27	; 0x1b
     ec2:	9c 8d       	ldd	r25, Y+28	; 0x1c
     ec4:	20 e0       	ldi	r18, 0x00	; 0
     ec6:	30 e0       	ldi	r19, 0x00	; 0
     ec8:	40 e2       	ldi	r20, 0x20	; 32
     eca:	51 e4       	ldi	r21, 0x41	; 65
     ecc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     ed0:	dc 01       	movw	r26, r24
     ed2:	cb 01       	movw	r24, r22
     ed4:	bc 01       	movw	r22, r24
     ed6:	cd 01       	movw	r24, r26
     ed8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     edc:	dc 01       	movw	r26, r24
     ede:	cb 01       	movw	r24, r22
     ee0:	9c 8b       	std	Y+20, r25	; 0x14
     ee2:	8b 8b       	std	Y+19, r24	; 0x13
     ee4:	0f c0       	rjmp	.+30     	; 0xf04 <main+0xe6>
     ee6:	80 e9       	ldi	r24, 0x90	; 144
     ee8:	91 e0       	ldi	r25, 0x01	; 1
     eea:	9a 8b       	std	Y+18, r25	; 0x12
     eec:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     eee:	89 89       	ldd	r24, Y+17	; 0x11
     ef0:	9a 89       	ldd	r25, Y+18	; 0x12
     ef2:	01 97       	sbiw	r24, 0x01	; 1
     ef4:	f1 f7       	brne	.-4      	; 0xef2 <main+0xd4>
     ef6:	9a 8b       	std	Y+18, r25	; 0x12
     ef8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     efa:	8b 89       	ldd	r24, Y+19	; 0x13
     efc:	9c 89       	ldd	r25, Y+20	; 0x14
     efe:	01 97       	sbiw	r24, 0x01	; 1
     f00:	9c 8b       	std	Y+20, r25	; 0x14
     f02:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f04:	8b 89       	ldd	r24, Y+19	; 0x13
     f06:	9c 89       	ldd	r25, Y+20	; 0x14
     f08:	00 97       	sbiw	r24, 0x00	; 0
     f0a:	69 f7       	brne	.-38     	; 0xee6 <main+0xc8>
     f0c:	14 c0       	rjmp	.+40     	; 0xf36 <main+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f0e:	6d 89       	ldd	r22, Y+21	; 0x15
     f10:	7e 89       	ldd	r23, Y+22	; 0x16
     f12:	8f 89       	ldd	r24, Y+23	; 0x17
     f14:	98 8d       	ldd	r25, Y+24	; 0x18
     f16:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     f1a:	dc 01       	movw	r26, r24
     f1c:	cb 01       	movw	r24, r22
     f1e:	9c 8b       	std	Y+20, r25	; 0x14
     f20:	8b 8b       	std	Y+19, r24	; 0x13
     f22:	8b 89       	ldd	r24, Y+19	; 0x13
     f24:	9c 89       	ldd	r25, Y+20	; 0x14
     f26:	98 8b       	std	Y+16, r25	; 0x10
     f28:	8f 87       	std	Y+15, r24	; 0x0f
     f2a:	8f 85       	ldd	r24, Y+15	; 0x0f
     f2c:	98 89       	ldd	r25, Y+16	; 0x10
     f2e:	01 97       	sbiw	r24, 0x01	; 1
     f30:	f1 f7       	brne	.-4      	; 0xf2e <main+0x110>
     f32:	98 8b       	std	Y+16, r25	; 0x10
     f34:	8f 87       	std	Y+15, r24	; 0x0f
	/*	Fast PWM - Non-inverted - No Prescaler 	*/
	TIMER0_TCCR0_REG = (1<<WGM00_BIT) | (1<<WGM01_BIT) | (1<<COM01_BIT) | (1<<CS00_BIT);
	Dio_ConfigChannel(DIO_PORTB, DIO_PIN3, OUTPUT);
	while (1)
	{
		for(duty=0; duty<255; duty++)
     f36:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f38:	8f 5f       	subi	r24, 0xFF	; 255
     f3a:	8d 8f       	std	Y+29, r24	; 0x1d
     f3c:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f3e:	8f 3f       	cpi	r24, 0xFF	; 255
     f40:	09 f0       	breq	.+2      	; 0xf44 <main+0x126>
     f42:	83 cf       	rjmp	.-250    	; 0xe4a <main+0x2c>
				{
					OCR0=duty;  /*increase the LED light intensity*/
					_delay_ms(10);
				}
				for(duty=255; duty>1; duty--)
     f44:	8f ef       	ldi	r24, 0xFF	; 255
     f46:	8d 8f       	std	Y+29, r24	; 0x1d
     f48:	79 c0       	rjmp	.+242    	; 0x103c <main+0x21e>
				{
					OCR0=duty;  /*decrease the LED light intensity*/
     f4a:	ec e5       	ldi	r30, 0x5C	; 92
     f4c:	f0 e0       	ldi	r31, 0x00	; 0
     f4e:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f50:	80 83       	st	Z, r24
     f52:	80 e0       	ldi	r24, 0x00	; 0
     f54:	90 e0       	ldi	r25, 0x00	; 0
     f56:	a0 e2       	ldi	r26, 0x20	; 32
     f58:	b1 e4       	ldi	r27, 0x41	; 65
     f5a:	8b 87       	std	Y+11, r24	; 0x0b
     f5c:	9c 87       	std	Y+12, r25	; 0x0c
     f5e:	ad 87       	std	Y+13, r26	; 0x0d
     f60:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f62:	6b 85       	ldd	r22, Y+11	; 0x0b
     f64:	7c 85       	ldd	r23, Y+12	; 0x0c
     f66:	8d 85       	ldd	r24, Y+13	; 0x0d
     f68:	9e 85       	ldd	r25, Y+14	; 0x0e
     f6a:	20 e0       	ldi	r18, 0x00	; 0
     f6c:	30 e0       	ldi	r19, 0x00	; 0
     f6e:	4a e7       	ldi	r20, 0x7A	; 122
     f70:	55 e4       	ldi	r21, 0x45	; 69
     f72:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     f76:	dc 01       	movw	r26, r24
     f78:	cb 01       	movw	r24, r22
     f7a:	8f 83       	std	Y+7, r24	; 0x07
     f7c:	98 87       	std	Y+8, r25	; 0x08
     f7e:	a9 87       	std	Y+9, r26	; 0x09
     f80:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     f82:	6f 81       	ldd	r22, Y+7	; 0x07
     f84:	78 85       	ldd	r23, Y+8	; 0x08
     f86:	89 85       	ldd	r24, Y+9	; 0x09
     f88:	9a 85       	ldd	r25, Y+10	; 0x0a
     f8a:	20 e0       	ldi	r18, 0x00	; 0
     f8c:	30 e0       	ldi	r19, 0x00	; 0
     f8e:	40 e8       	ldi	r20, 0x80	; 128
     f90:	5f e3       	ldi	r21, 0x3F	; 63
     f92:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
     f96:	88 23       	and	r24, r24
     f98:	2c f4       	brge	.+10     	; 0xfa4 <main+0x186>
		__ticks = 1;
     f9a:	81 e0       	ldi	r24, 0x01	; 1
     f9c:	90 e0       	ldi	r25, 0x00	; 0
     f9e:	9e 83       	std	Y+6, r25	; 0x06
     fa0:	8d 83       	std	Y+5, r24	; 0x05
     fa2:	3f c0       	rjmp	.+126    	; 0x1022 <main+0x204>
	else if (__tmp > 65535)
     fa4:	6f 81       	ldd	r22, Y+7	; 0x07
     fa6:	78 85       	ldd	r23, Y+8	; 0x08
     fa8:	89 85       	ldd	r24, Y+9	; 0x09
     faa:	9a 85       	ldd	r25, Y+10	; 0x0a
     fac:	20 e0       	ldi	r18, 0x00	; 0
     fae:	3f ef       	ldi	r19, 0xFF	; 255
     fb0:	4f e7       	ldi	r20, 0x7F	; 127
     fb2:	57 e4       	ldi	r21, 0x47	; 71
     fb4:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
     fb8:	18 16       	cp	r1, r24
     fba:	4c f5       	brge	.+82     	; 0x100e <main+0x1f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fbc:	6b 85       	ldd	r22, Y+11	; 0x0b
     fbe:	7c 85       	ldd	r23, Y+12	; 0x0c
     fc0:	8d 85       	ldd	r24, Y+13	; 0x0d
     fc2:	9e 85       	ldd	r25, Y+14	; 0x0e
     fc4:	20 e0       	ldi	r18, 0x00	; 0
     fc6:	30 e0       	ldi	r19, 0x00	; 0
     fc8:	40 e2       	ldi	r20, 0x20	; 32
     fca:	51 e4       	ldi	r21, 0x41	; 65
     fcc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     fd0:	dc 01       	movw	r26, r24
     fd2:	cb 01       	movw	r24, r22
     fd4:	bc 01       	movw	r22, r24
     fd6:	cd 01       	movw	r24, r26
     fd8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     fdc:	dc 01       	movw	r26, r24
     fde:	cb 01       	movw	r24, r22
     fe0:	9e 83       	std	Y+6, r25	; 0x06
     fe2:	8d 83       	std	Y+5, r24	; 0x05
     fe4:	0f c0       	rjmp	.+30     	; 0x1004 <main+0x1e6>
     fe6:	80 e9       	ldi	r24, 0x90	; 144
     fe8:	91 e0       	ldi	r25, 0x01	; 1
     fea:	9c 83       	std	Y+4, r25	; 0x04
     fec:	8b 83       	std	Y+3, r24	; 0x03
     fee:	8b 81       	ldd	r24, Y+3	; 0x03
     ff0:	9c 81       	ldd	r25, Y+4	; 0x04
     ff2:	01 97       	sbiw	r24, 0x01	; 1
     ff4:	f1 f7       	brne	.-4      	; 0xff2 <main+0x1d4>
     ff6:	9c 83       	std	Y+4, r25	; 0x04
     ff8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ffa:	8d 81       	ldd	r24, Y+5	; 0x05
     ffc:	9e 81       	ldd	r25, Y+6	; 0x06
     ffe:	01 97       	sbiw	r24, 0x01	; 1
    1000:	9e 83       	std	Y+6, r25	; 0x06
    1002:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1004:	8d 81       	ldd	r24, Y+5	; 0x05
    1006:	9e 81       	ldd	r25, Y+6	; 0x06
    1008:	00 97       	sbiw	r24, 0x00	; 0
    100a:	69 f7       	brne	.-38     	; 0xfe6 <main+0x1c8>
    100c:	14 c0       	rjmp	.+40     	; 0x1036 <main+0x218>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    100e:	6f 81       	ldd	r22, Y+7	; 0x07
    1010:	78 85       	ldd	r23, Y+8	; 0x08
    1012:	89 85       	ldd	r24, Y+9	; 0x09
    1014:	9a 85       	ldd	r25, Y+10	; 0x0a
    1016:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    101a:	dc 01       	movw	r26, r24
    101c:	cb 01       	movw	r24, r22
    101e:	9e 83       	std	Y+6, r25	; 0x06
    1020:	8d 83       	std	Y+5, r24	; 0x05
    1022:	8d 81       	ldd	r24, Y+5	; 0x05
    1024:	9e 81       	ldd	r25, Y+6	; 0x06
    1026:	9a 83       	std	Y+2, r25	; 0x02
    1028:	89 83       	std	Y+1, r24	; 0x01
    102a:	89 81       	ldd	r24, Y+1	; 0x01
    102c:	9a 81       	ldd	r25, Y+2	; 0x02
    102e:	01 97       	sbiw	r24, 0x01	; 1
    1030:	f1 f7       	brne	.-4      	; 0x102e <main+0x210>
    1032:	9a 83       	std	Y+2, r25	; 0x02
    1034:	89 83       	std	Y+1, r24	; 0x01
		for(duty=0; duty<255; duty++)
				{
					OCR0=duty;  /*increase the LED light intensity*/
					_delay_ms(10);
				}
				for(duty=255; duty>1; duty--)
    1036:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1038:	81 50       	subi	r24, 0x01	; 1
    103a:	8d 8f       	std	Y+29, r24	; 0x1d
    103c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    103e:	82 30       	cpi	r24, 0x02	; 2
    1040:	08 f0       	brcs	.+2      	; 0x1044 <main+0x226>
    1042:	83 cf       	rjmp	.-250    	; 0xf4a <main+0x12c>
    1044:	00 cf       	rjmp	.-512    	; 0xe46 <main+0x28>

00001046 <SSD_Init>:
 *  Created on: Nov 20, 2021
 *      Author: Eng_Fawzi
 */
#include "SSD.h"
void SSD_Init(void)
{
    1046:	df 93       	push	r29
    1048:	cf 93       	push	r28
    104a:	cd b7       	in	r28, 0x3d	; 61
    104c:	de b7       	in	r29, 0x3e	; 62
	/*	Configure Data Lines As Output	*/
	Dio_ConfigChannel(DIO_PORTA,DIO_PIN4,OUTPUT);
    104e:	80 e0       	ldi	r24, 0x00	; 0
    1050:	64 e0       	ldi	r22, 0x04	; 4
    1052:	41 e0       	ldi	r20, 0x01	; 1
    1054:	0e 94 45 10 	call	0x208a	; 0x208a <Dio_ConfigChannel>
	Dio_ConfigChannel(DIO_PORTA,DIO_PIN5,OUTPUT);
    1058:	80 e0       	ldi	r24, 0x00	; 0
    105a:	65 e0       	ldi	r22, 0x05	; 5
    105c:	41 e0       	ldi	r20, 0x01	; 1
    105e:	0e 94 45 10 	call	0x208a	; 0x208a <Dio_ConfigChannel>
	Dio_ConfigChannel(DIO_PORTA,DIO_PIN6,OUTPUT);
    1062:	80 e0       	ldi	r24, 0x00	; 0
    1064:	66 e0       	ldi	r22, 0x06	; 6
    1066:	41 e0       	ldi	r20, 0x01	; 1
    1068:	0e 94 45 10 	call	0x208a	; 0x208a <Dio_ConfigChannel>
	Dio_ConfigChannel(DIO_PORTA,DIO_PIN7,OUTPUT);
    106c:	80 e0       	ldi	r24, 0x00	; 0
    106e:	67 e0       	ldi	r22, 0x07	; 7
    1070:	41 e0       	ldi	r20, 0x01	; 1
    1072:	0e 94 45 10 	call	0x208a	; 0x208a <Dio_ConfigChannel>

	/*	Configure Control Lines As Output	*/
	Dio_ConfigChannel(DIO_PORTB,DIO_PIN1,OUTPUT);
    1076:	81 e0       	ldi	r24, 0x01	; 1
    1078:	61 e0       	ldi	r22, 0x01	; 1
    107a:	41 e0       	ldi	r20, 0x01	; 1
    107c:	0e 94 45 10 	call	0x208a	; 0x208a <Dio_ConfigChannel>
	Dio_ConfigChannel(DIO_PORTB,DIO_PIN2,OUTPUT);
    1080:	81 e0       	ldi	r24, 0x01	; 1
    1082:	62 e0       	ldi	r22, 0x02	; 2
    1084:	41 e0       	ldi	r20, 0x01	; 1
    1086:	0e 94 45 10 	call	0x208a	; 0x208a <Dio_ConfigChannel>
}
    108a:	cf 91       	pop	r28
    108c:	df 91       	pop	r29
    108e:	08 95       	ret

00001090 <SSD_DisplayNumber>:
void SSD_DisplayNumber(u8 num)
{
    1090:	df 93       	push	r29
    1092:	cf 93       	push	r28
    1094:	cd b7       	in	r28, 0x3d	; 61
    1096:	de b7       	in	r29, 0x3e	; 62
    1098:	6f 97       	sbiw	r28, 0x1f	; 31
    109a:	0f b6       	in	r0, 0x3f	; 63
    109c:	f8 94       	cli
    109e:	de bf       	out	0x3e, r29	; 62
    10a0:	0f be       	out	0x3f, r0	; 63
    10a2:	cd bf       	out	0x3d, r28	; 61
    10a4:	8f 8f       	std	Y+31, r24	; 0x1f
	u8 loc_FirstDigit = (num/10)<<4;
    10a6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    10a8:	9a e0       	ldi	r25, 0x0A	; 10
    10aa:	69 2f       	mov	r22, r25
    10ac:	0e 94 df 13 	call	0x27be	; 0x27be <__udivmodqi4>
    10b0:	82 95       	swap	r24
    10b2:	80 7f       	andi	r24, 0xF0	; 240
    10b4:	8e 8f       	std	Y+30, r24	; 0x1e
	u8 loc_Second_Digit = (num%10)<<4;
    10b6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    10b8:	9a e0       	ldi	r25, 0x0A	; 10
    10ba:	69 2f       	mov	r22, r25
    10bc:	0e 94 df 13 	call	0x27be	; 0x27be <__udivmodqi4>
    10c0:	89 2f       	mov	r24, r25
    10c2:	82 95       	swap	r24
    10c4:	80 7f       	andi	r24, 0xF0	; 240
    10c6:	8d 8f       	std	Y+29, r24	; 0x1d

	/*	Enable SSD1	*/
	Dio_WriteChannel(DIO_PORTB, DIO_PIN2, STD_HIGH);
    10c8:	81 e0       	ldi	r24, 0x01	; 1
    10ca:	62 e0       	ldi	r22, 0x02	; 2
    10cc:	41 e0       	ldi	r20, 0x01	; 1
    10ce:	0e 94 28 11 	call	0x2250	; 0x2250 <Dio_WriteChannel>
	/*	Disable SSD2	*/
	Dio_WriteChannel(DIO_PORTB, DIO_PIN1, STD_LOW);
    10d2:	81 e0       	ldi	r24, 0x01	; 1
    10d4:	61 e0       	ldi	r22, 0x01	; 1
    10d6:	40 e0       	ldi	r20, 0x00	; 0
    10d8:	0e 94 28 11 	call	0x2250	; 0x2250 <Dio_WriteChannel>
	/*	Write Number To SSD	*/
	Dio_WriteGroup(DIO_PORTA,SSD_MASK,loc_FirstDigit);
    10dc:	80 e0       	ldi	r24, 0x00	; 0
    10de:	60 ef       	ldi	r22, 0xF0	; 240
    10e0:	4e 8d       	ldd	r20, Y+30	; 0x1e
    10e2:	0e 94 0b 12 	call	0x2416	; 0x2416 <Dio_WriteGroup>
    10e6:	80 e0       	ldi	r24, 0x00	; 0
    10e8:	90 e0       	ldi	r25, 0x00	; 0
    10ea:	a0 e8       	ldi	r26, 0x80	; 128
    10ec:	bf e3       	ldi	r27, 0x3F	; 63
    10ee:	89 8f       	std	Y+25, r24	; 0x19
    10f0:	9a 8f       	std	Y+26, r25	; 0x1a
    10f2:	ab 8f       	std	Y+27, r26	; 0x1b
    10f4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10f6:	69 8d       	ldd	r22, Y+25	; 0x19
    10f8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    10fa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    10fc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    10fe:	20 e0       	ldi	r18, 0x00	; 0
    1100:	30 e0       	ldi	r19, 0x00	; 0
    1102:	4a e7       	ldi	r20, 0x7A	; 122
    1104:	55 e4       	ldi	r21, 0x45	; 69
    1106:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    110a:	dc 01       	movw	r26, r24
    110c:	cb 01       	movw	r24, r22
    110e:	8d 8b       	std	Y+21, r24	; 0x15
    1110:	9e 8b       	std	Y+22, r25	; 0x16
    1112:	af 8b       	std	Y+23, r26	; 0x17
    1114:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1116:	6d 89       	ldd	r22, Y+21	; 0x15
    1118:	7e 89       	ldd	r23, Y+22	; 0x16
    111a:	8f 89       	ldd	r24, Y+23	; 0x17
    111c:	98 8d       	ldd	r25, Y+24	; 0x18
    111e:	20 e0       	ldi	r18, 0x00	; 0
    1120:	30 e0       	ldi	r19, 0x00	; 0
    1122:	40 e8       	ldi	r20, 0x80	; 128
    1124:	5f e3       	ldi	r21, 0x3F	; 63
    1126:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    112a:	88 23       	and	r24, r24
    112c:	2c f4       	brge	.+10     	; 0x1138 <SSD_DisplayNumber+0xa8>
		__ticks = 1;
    112e:	81 e0       	ldi	r24, 0x01	; 1
    1130:	90 e0       	ldi	r25, 0x00	; 0
    1132:	9c 8b       	std	Y+20, r25	; 0x14
    1134:	8b 8b       	std	Y+19, r24	; 0x13
    1136:	3f c0       	rjmp	.+126    	; 0x11b6 <SSD_DisplayNumber+0x126>
	else if (__tmp > 65535)
    1138:	6d 89       	ldd	r22, Y+21	; 0x15
    113a:	7e 89       	ldd	r23, Y+22	; 0x16
    113c:	8f 89       	ldd	r24, Y+23	; 0x17
    113e:	98 8d       	ldd	r25, Y+24	; 0x18
    1140:	20 e0       	ldi	r18, 0x00	; 0
    1142:	3f ef       	ldi	r19, 0xFF	; 255
    1144:	4f e7       	ldi	r20, 0x7F	; 127
    1146:	57 e4       	ldi	r21, 0x47	; 71
    1148:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    114c:	18 16       	cp	r1, r24
    114e:	4c f5       	brge	.+82     	; 0x11a2 <SSD_DisplayNumber+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1150:	69 8d       	ldd	r22, Y+25	; 0x19
    1152:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1154:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1156:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1158:	20 e0       	ldi	r18, 0x00	; 0
    115a:	30 e0       	ldi	r19, 0x00	; 0
    115c:	40 e2       	ldi	r20, 0x20	; 32
    115e:	51 e4       	ldi	r21, 0x41	; 65
    1160:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1164:	dc 01       	movw	r26, r24
    1166:	cb 01       	movw	r24, r22
    1168:	bc 01       	movw	r22, r24
    116a:	cd 01       	movw	r24, r26
    116c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1170:	dc 01       	movw	r26, r24
    1172:	cb 01       	movw	r24, r22
    1174:	9c 8b       	std	Y+20, r25	; 0x14
    1176:	8b 8b       	std	Y+19, r24	; 0x13
    1178:	0f c0       	rjmp	.+30     	; 0x1198 <SSD_DisplayNumber+0x108>
    117a:	80 e9       	ldi	r24, 0x90	; 144
    117c:	91 e0       	ldi	r25, 0x01	; 1
    117e:	9a 8b       	std	Y+18, r25	; 0x12
    1180:	89 8b       	std	Y+17, r24	; 0x11
    1182:	89 89       	ldd	r24, Y+17	; 0x11
    1184:	9a 89       	ldd	r25, Y+18	; 0x12
    1186:	01 97       	sbiw	r24, 0x01	; 1
    1188:	f1 f7       	brne	.-4      	; 0x1186 <SSD_DisplayNumber+0xf6>
    118a:	9a 8b       	std	Y+18, r25	; 0x12
    118c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    118e:	8b 89       	ldd	r24, Y+19	; 0x13
    1190:	9c 89       	ldd	r25, Y+20	; 0x14
    1192:	01 97       	sbiw	r24, 0x01	; 1
    1194:	9c 8b       	std	Y+20, r25	; 0x14
    1196:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1198:	8b 89       	ldd	r24, Y+19	; 0x13
    119a:	9c 89       	ldd	r25, Y+20	; 0x14
    119c:	00 97       	sbiw	r24, 0x00	; 0
    119e:	69 f7       	brne	.-38     	; 0x117a <SSD_DisplayNumber+0xea>
    11a0:	14 c0       	rjmp	.+40     	; 0x11ca <SSD_DisplayNumber+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11a2:	6d 89       	ldd	r22, Y+21	; 0x15
    11a4:	7e 89       	ldd	r23, Y+22	; 0x16
    11a6:	8f 89       	ldd	r24, Y+23	; 0x17
    11a8:	98 8d       	ldd	r25, Y+24	; 0x18
    11aa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    11ae:	dc 01       	movw	r26, r24
    11b0:	cb 01       	movw	r24, r22
    11b2:	9c 8b       	std	Y+20, r25	; 0x14
    11b4:	8b 8b       	std	Y+19, r24	; 0x13
    11b6:	8b 89       	ldd	r24, Y+19	; 0x13
    11b8:	9c 89       	ldd	r25, Y+20	; 0x14
    11ba:	98 8b       	std	Y+16, r25	; 0x10
    11bc:	8f 87       	std	Y+15, r24	; 0x0f
    11be:	8f 85       	ldd	r24, Y+15	; 0x0f
    11c0:	98 89       	ldd	r25, Y+16	; 0x10
    11c2:	01 97       	sbiw	r24, 0x01	; 1
    11c4:	f1 f7       	brne	.-4      	; 0x11c2 <SSD_DisplayNumber+0x132>
    11c6:	98 8b       	std	Y+16, r25	; 0x10
    11c8:	8f 87       	std	Y+15, r24	; 0x0f
	/*	wait(1m)	*/
	_delay_ms(1);

	/*	Disable SSD1	*/
	Dio_WriteChannel(DIO_PORTB, DIO_PIN2, STD_LOW);
    11ca:	81 e0       	ldi	r24, 0x01	; 1
    11cc:	62 e0       	ldi	r22, 0x02	; 2
    11ce:	40 e0       	ldi	r20, 0x00	; 0
    11d0:	0e 94 28 11 	call	0x2250	; 0x2250 <Dio_WriteChannel>
	/*	Enable SSD2	*/
	Dio_WriteChannel(DIO_PORTB, DIO_PIN1, STD_HIGH);
    11d4:	81 e0       	ldi	r24, 0x01	; 1
    11d6:	61 e0       	ldi	r22, 0x01	; 1
    11d8:	41 e0       	ldi	r20, 0x01	; 1
    11da:	0e 94 28 11 	call	0x2250	; 0x2250 <Dio_WriteChannel>
	/*	Write Number To SSD	*/
	Dio_WriteGroup(DIO_PORTA,SSD_MASK,loc_Second_Digit);
    11de:	80 e0       	ldi	r24, 0x00	; 0
    11e0:	60 ef       	ldi	r22, 0xF0	; 240
    11e2:	4d 8d       	ldd	r20, Y+29	; 0x1d
    11e4:	0e 94 0b 12 	call	0x2416	; 0x2416 <Dio_WriteGroup>
    11e8:	80 e0       	ldi	r24, 0x00	; 0
    11ea:	90 e0       	ldi	r25, 0x00	; 0
    11ec:	a0 e8       	ldi	r26, 0x80	; 128
    11ee:	bf e3       	ldi	r27, 0x3F	; 63
    11f0:	8b 87       	std	Y+11, r24	; 0x0b
    11f2:	9c 87       	std	Y+12, r25	; 0x0c
    11f4:	ad 87       	std	Y+13, r26	; 0x0d
    11f6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11f8:	6b 85       	ldd	r22, Y+11	; 0x0b
    11fa:	7c 85       	ldd	r23, Y+12	; 0x0c
    11fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    11fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    1200:	20 e0       	ldi	r18, 0x00	; 0
    1202:	30 e0       	ldi	r19, 0x00	; 0
    1204:	4a e7       	ldi	r20, 0x7A	; 122
    1206:	55 e4       	ldi	r21, 0x45	; 69
    1208:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    120c:	dc 01       	movw	r26, r24
    120e:	cb 01       	movw	r24, r22
    1210:	8f 83       	std	Y+7, r24	; 0x07
    1212:	98 87       	std	Y+8, r25	; 0x08
    1214:	a9 87       	std	Y+9, r26	; 0x09
    1216:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1218:	6f 81       	ldd	r22, Y+7	; 0x07
    121a:	78 85       	ldd	r23, Y+8	; 0x08
    121c:	89 85       	ldd	r24, Y+9	; 0x09
    121e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1220:	20 e0       	ldi	r18, 0x00	; 0
    1222:	30 e0       	ldi	r19, 0x00	; 0
    1224:	40 e8       	ldi	r20, 0x80	; 128
    1226:	5f e3       	ldi	r21, 0x3F	; 63
    1228:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    122c:	88 23       	and	r24, r24
    122e:	2c f4       	brge	.+10     	; 0x123a <SSD_DisplayNumber+0x1aa>
		__ticks = 1;
    1230:	81 e0       	ldi	r24, 0x01	; 1
    1232:	90 e0       	ldi	r25, 0x00	; 0
    1234:	9e 83       	std	Y+6, r25	; 0x06
    1236:	8d 83       	std	Y+5, r24	; 0x05
    1238:	3f c0       	rjmp	.+126    	; 0x12b8 <SSD_DisplayNumber+0x228>
	else if (__tmp > 65535)
    123a:	6f 81       	ldd	r22, Y+7	; 0x07
    123c:	78 85       	ldd	r23, Y+8	; 0x08
    123e:	89 85       	ldd	r24, Y+9	; 0x09
    1240:	9a 85       	ldd	r25, Y+10	; 0x0a
    1242:	20 e0       	ldi	r18, 0x00	; 0
    1244:	3f ef       	ldi	r19, 0xFF	; 255
    1246:	4f e7       	ldi	r20, 0x7F	; 127
    1248:	57 e4       	ldi	r21, 0x47	; 71
    124a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    124e:	18 16       	cp	r1, r24
    1250:	4c f5       	brge	.+82     	; 0x12a4 <SSD_DisplayNumber+0x214>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1252:	6b 85       	ldd	r22, Y+11	; 0x0b
    1254:	7c 85       	ldd	r23, Y+12	; 0x0c
    1256:	8d 85       	ldd	r24, Y+13	; 0x0d
    1258:	9e 85       	ldd	r25, Y+14	; 0x0e
    125a:	20 e0       	ldi	r18, 0x00	; 0
    125c:	30 e0       	ldi	r19, 0x00	; 0
    125e:	40 e2       	ldi	r20, 0x20	; 32
    1260:	51 e4       	ldi	r21, 0x41	; 65
    1262:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1266:	dc 01       	movw	r26, r24
    1268:	cb 01       	movw	r24, r22
    126a:	bc 01       	movw	r22, r24
    126c:	cd 01       	movw	r24, r26
    126e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1272:	dc 01       	movw	r26, r24
    1274:	cb 01       	movw	r24, r22
    1276:	9e 83       	std	Y+6, r25	; 0x06
    1278:	8d 83       	std	Y+5, r24	; 0x05
    127a:	0f c0       	rjmp	.+30     	; 0x129a <SSD_DisplayNumber+0x20a>
    127c:	80 e9       	ldi	r24, 0x90	; 144
    127e:	91 e0       	ldi	r25, 0x01	; 1
    1280:	9c 83       	std	Y+4, r25	; 0x04
    1282:	8b 83       	std	Y+3, r24	; 0x03
    1284:	8b 81       	ldd	r24, Y+3	; 0x03
    1286:	9c 81       	ldd	r25, Y+4	; 0x04
    1288:	01 97       	sbiw	r24, 0x01	; 1
    128a:	f1 f7       	brne	.-4      	; 0x1288 <SSD_DisplayNumber+0x1f8>
    128c:	9c 83       	std	Y+4, r25	; 0x04
    128e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1290:	8d 81       	ldd	r24, Y+5	; 0x05
    1292:	9e 81       	ldd	r25, Y+6	; 0x06
    1294:	01 97       	sbiw	r24, 0x01	; 1
    1296:	9e 83       	std	Y+6, r25	; 0x06
    1298:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    129a:	8d 81       	ldd	r24, Y+5	; 0x05
    129c:	9e 81       	ldd	r25, Y+6	; 0x06
    129e:	00 97       	sbiw	r24, 0x00	; 0
    12a0:	69 f7       	brne	.-38     	; 0x127c <SSD_DisplayNumber+0x1ec>
    12a2:	14 c0       	rjmp	.+40     	; 0x12cc <SSD_DisplayNumber+0x23c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12a4:	6f 81       	ldd	r22, Y+7	; 0x07
    12a6:	78 85       	ldd	r23, Y+8	; 0x08
    12a8:	89 85       	ldd	r24, Y+9	; 0x09
    12aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    12ac:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    12b0:	dc 01       	movw	r26, r24
    12b2:	cb 01       	movw	r24, r22
    12b4:	9e 83       	std	Y+6, r25	; 0x06
    12b6:	8d 83       	std	Y+5, r24	; 0x05
    12b8:	8d 81       	ldd	r24, Y+5	; 0x05
    12ba:	9e 81       	ldd	r25, Y+6	; 0x06
    12bc:	9a 83       	std	Y+2, r25	; 0x02
    12be:	89 83       	std	Y+1, r24	; 0x01
    12c0:	89 81       	ldd	r24, Y+1	; 0x01
    12c2:	9a 81       	ldd	r25, Y+2	; 0x02
    12c4:	01 97       	sbiw	r24, 0x01	; 1
    12c6:	f1 f7       	brne	.-4      	; 0x12c4 <SSD_DisplayNumber+0x234>
    12c8:	9a 83       	std	Y+2, r25	; 0x02
    12ca:	89 83       	std	Y+1, r24	; 0x01
	/*	wait(1m)	*/
	_delay_ms(1);
}
    12cc:	6f 96       	adiw	r28, 0x1f	; 31
    12ce:	0f b6       	in	r0, 0x3f	; 63
    12d0:	f8 94       	cli
    12d2:	de bf       	out	0x3e, r29	; 62
    12d4:	0f be       	out	0x3f, r0	; 63
    12d6:	cd bf       	out	0x3d, r28	; 61
    12d8:	cf 91       	pop	r28
    12da:	df 91       	pop	r29
    12dc:	08 95       	ret

000012de <LED_Init>:
 */

#include "Led.h"

void LED_Init(void)
{
    12de:	df 93       	push	r29
    12e0:	cf 93       	push	r28
    12e2:	cd b7       	in	r28, 0x3d	; 61
    12e4:	de b7       	in	r29, 0x3e	; 62
	Dio_ConfigChannel(LED0_PORT,LED0_PIN,OUTPUT);
    12e6:	82 e0       	ldi	r24, 0x02	; 2
    12e8:	62 e0       	ldi	r22, 0x02	; 2
    12ea:	41 e0       	ldi	r20, 0x01	; 1
    12ec:	0e 94 45 10 	call	0x208a	; 0x208a <Dio_ConfigChannel>
	Dio_ConfigChannel(LED1_PORT,LED1_PIN,OUTPUT);
    12f0:	82 e0       	ldi	r24, 0x02	; 2
    12f2:	67 e0       	ldi	r22, 0x07	; 7
    12f4:	41 e0       	ldi	r20, 0x01	; 1
    12f6:	0e 94 45 10 	call	0x208a	; 0x208a <Dio_ConfigChannel>
	Dio_ConfigChannel(LED2_PORT,LED2_PIN,OUTPUT);
    12fa:	83 e0       	ldi	r24, 0x03	; 3
    12fc:	63 e0       	ldi	r22, 0x03	; 3
    12fe:	41 e0       	ldi	r20, 0x01	; 1
    1300:	0e 94 45 10 	call	0x208a	; 0x208a <Dio_ConfigChannel>
}
    1304:	cf 91       	pop	r28
    1306:	df 91       	pop	r29
    1308:	08 95       	ret

0000130a <LED_ON>:

void LED_ON(led_type ledId)
{
    130a:	df 93       	push	r29
    130c:	cf 93       	push	r28
    130e:	00 d0       	rcall	.+0      	; 0x1310 <LED_ON+0x6>
    1310:	0f 92       	push	r0
    1312:	cd b7       	in	r28, 0x3d	; 61
    1314:	de b7       	in	r29, 0x3e	; 62
    1316:	89 83       	std	Y+1, r24	; 0x01
	switch (ledId)
    1318:	89 81       	ldd	r24, Y+1	; 0x01
    131a:	28 2f       	mov	r18, r24
    131c:	30 e0       	ldi	r19, 0x00	; 0
    131e:	3b 83       	std	Y+3, r19	; 0x03
    1320:	2a 83       	std	Y+2, r18	; 0x02
    1322:	8a 81       	ldd	r24, Y+2	; 0x02
    1324:	9b 81       	ldd	r25, Y+3	; 0x03
    1326:	81 30       	cpi	r24, 0x01	; 1
    1328:	91 05       	cpc	r25, r1
    132a:	79 f0       	breq	.+30     	; 0x134a <LED_ON+0x40>
    132c:	2a 81       	ldd	r18, Y+2	; 0x02
    132e:	3b 81       	ldd	r19, Y+3	; 0x03
    1330:	22 30       	cpi	r18, 0x02	; 2
    1332:	31 05       	cpc	r19, r1
    1334:	81 f0       	breq	.+32     	; 0x1356 <LED_ON+0x4c>
    1336:	8a 81       	ldd	r24, Y+2	; 0x02
    1338:	9b 81       	ldd	r25, Y+3	; 0x03
    133a:	00 97       	sbiw	r24, 0x00	; 0
    133c:	89 f4       	brne	.+34     	; 0x1360 <LED_ON+0x56>
	{
	case LED0:
		Dio_WriteChannel(LED0_PORT,LED0_PIN,STD_HIGH);
    133e:	82 e0       	ldi	r24, 0x02	; 2
    1340:	62 e0       	ldi	r22, 0x02	; 2
    1342:	41 e0       	ldi	r20, 0x01	; 1
    1344:	0e 94 28 11 	call	0x2250	; 0x2250 <Dio_WriteChannel>
    1348:	0b c0       	rjmp	.+22     	; 0x1360 <LED_ON+0x56>
		break;

	case LED1:
		Dio_WriteChannel(LED1_PORT,LED1_PIN,STD_HIGH);
    134a:	82 e0       	ldi	r24, 0x02	; 2
    134c:	67 e0       	ldi	r22, 0x07	; 7
    134e:	41 e0       	ldi	r20, 0x01	; 1
    1350:	0e 94 28 11 	call	0x2250	; 0x2250 <Dio_WriteChannel>
    1354:	05 c0       	rjmp	.+10     	; 0x1360 <LED_ON+0x56>
		break;

	case LED2:
		Dio_WriteChannel(LED2_PORT,LED2_PIN,STD_HIGH);
    1356:	83 e0       	ldi	r24, 0x03	; 3
    1358:	63 e0       	ldi	r22, 0x03	; 3
    135a:	41 e0       	ldi	r20, 0x01	; 1
    135c:	0e 94 28 11 	call	0x2250	; 0x2250 <Dio_WriteChannel>
		break;
	}
}
    1360:	0f 90       	pop	r0
    1362:	0f 90       	pop	r0
    1364:	0f 90       	pop	r0
    1366:	cf 91       	pop	r28
    1368:	df 91       	pop	r29
    136a:	08 95       	ret

0000136c <LED_OFF>:

void LED_OFF(led_type ledId)
{
    136c:	df 93       	push	r29
    136e:	cf 93       	push	r28
    1370:	00 d0       	rcall	.+0      	; 0x1372 <LED_OFF+0x6>
    1372:	0f 92       	push	r0
    1374:	cd b7       	in	r28, 0x3d	; 61
    1376:	de b7       	in	r29, 0x3e	; 62
    1378:	89 83       	std	Y+1, r24	; 0x01
	switch (ledId)
    137a:	89 81       	ldd	r24, Y+1	; 0x01
    137c:	28 2f       	mov	r18, r24
    137e:	30 e0       	ldi	r19, 0x00	; 0
    1380:	3b 83       	std	Y+3, r19	; 0x03
    1382:	2a 83       	std	Y+2, r18	; 0x02
    1384:	8a 81       	ldd	r24, Y+2	; 0x02
    1386:	9b 81       	ldd	r25, Y+3	; 0x03
    1388:	81 30       	cpi	r24, 0x01	; 1
    138a:	91 05       	cpc	r25, r1
    138c:	79 f0       	breq	.+30     	; 0x13ac <LED_OFF+0x40>
    138e:	2a 81       	ldd	r18, Y+2	; 0x02
    1390:	3b 81       	ldd	r19, Y+3	; 0x03
    1392:	22 30       	cpi	r18, 0x02	; 2
    1394:	31 05       	cpc	r19, r1
    1396:	81 f0       	breq	.+32     	; 0x13b8 <LED_OFF+0x4c>
    1398:	8a 81       	ldd	r24, Y+2	; 0x02
    139a:	9b 81       	ldd	r25, Y+3	; 0x03
    139c:	00 97       	sbiw	r24, 0x00	; 0
    139e:	89 f4       	brne	.+34     	; 0x13c2 <LED_OFF+0x56>
	{
	case LED0:
		Dio_WriteChannel(LED0_PORT,LED0_PIN,STD_LOW);
    13a0:	82 e0       	ldi	r24, 0x02	; 2
    13a2:	62 e0       	ldi	r22, 0x02	; 2
    13a4:	40 e0       	ldi	r20, 0x00	; 0
    13a6:	0e 94 28 11 	call	0x2250	; 0x2250 <Dio_WriteChannel>
    13aa:	0b c0       	rjmp	.+22     	; 0x13c2 <LED_OFF+0x56>
		break;

	case LED1:
		Dio_WriteChannel(LED1_PORT,LED1_PIN,STD_LOW);
    13ac:	82 e0       	ldi	r24, 0x02	; 2
    13ae:	67 e0       	ldi	r22, 0x07	; 7
    13b0:	40 e0       	ldi	r20, 0x00	; 0
    13b2:	0e 94 28 11 	call	0x2250	; 0x2250 <Dio_WriteChannel>
    13b6:	05 c0       	rjmp	.+10     	; 0x13c2 <LED_OFF+0x56>
		break;

	case LED2:
		Dio_WriteChannel(LED2_PORT,LED2_PIN,STD_LOW);
    13b8:	83 e0       	ldi	r24, 0x03	; 3
    13ba:	63 e0       	ldi	r22, 0x03	; 3
    13bc:	40 e0       	ldi	r20, 0x00	; 0
    13be:	0e 94 28 11 	call	0x2250	; 0x2250 <Dio_WriteChannel>
		break;
	}
}
    13c2:	0f 90       	pop	r0
    13c4:	0f 90       	pop	r0
    13c6:	0f 90       	pop	r0
    13c8:	cf 91       	pop	r28
    13ca:	df 91       	pop	r29
    13cc:	08 95       	ret

000013ce <LED_TOGGLE>:
void LED_TOGGLE(led_type ledId)
{
    13ce:	df 93       	push	r29
    13d0:	cf 93       	push	r28
    13d2:	00 d0       	rcall	.+0      	; 0x13d4 <LED_TOGGLE+0x6>
    13d4:	0f 92       	push	r0
    13d6:	cd b7       	in	r28, 0x3d	; 61
    13d8:	de b7       	in	r29, 0x3e	; 62
    13da:	89 83       	std	Y+1, r24	; 0x01
	switch (ledId)
    13dc:	89 81       	ldd	r24, Y+1	; 0x01
    13de:	28 2f       	mov	r18, r24
    13e0:	30 e0       	ldi	r19, 0x00	; 0
    13e2:	3b 83       	std	Y+3, r19	; 0x03
    13e4:	2a 83       	std	Y+2, r18	; 0x02
    13e6:	8a 81       	ldd	r24, Y+2	; 0x02
    13e8:	9b 81       	ldd	r25, Y+3	; 0x03
    13ea:	81 30       	cpi	r24, 0x01	; 1
    13ec:	91 05       	cpc	r25, r1
    13ee:	71 f0       	breq	.+28     	; 0x140c <LED_TOGGLE+0x3e>
    13f0:	2a 81       	ldd	r18, Y+2	; 0x02
    13f2:	3b 81       	ldd	r19, Y+3	; 0x03
    13f4:	22 30       	cpi	r18, 0x02	; 2
    13f6:	31 05       	cpc	r19, r1
    13f8:	71 f0       	breq	.+28     	; 0x1416 <LED_TOGGLE+0x48>
    13fa:	8a 81       	ldd	r24, Y+2	; 0x02
    13fc:	9b 81       	ldd	r25, Y+3	; 0x03
    13fe:	00 97       	sbiw	r24, 0x00	; 0
    1400:	71 f4       	brne	.+28     	; 0x141e <LED_TOGGLE+0x50>
	{
	case LED0:
		Dio_TogglChannel(LED0_PORT,LED0_PIN);
    1402:	82 e0       	ldi	r24, 0x02	; 2
    1404:	62 e0       	ldi	r22, 0x02	; 2
    1406:	0e 94 7b 12 	call	0x24f6	; 0x24f6 <Dio_TogglChannel>
    140a:	09 c0       	rjmp	.+18     	; 0x141e <LED_TOGGLE+0x50>
		break;

	case LED1:
		Dio_TogglChannel(LED1_PORT,LED1_PIN);
    140c:	82 e0       	ldi	r24, 0x02	; 2
    140e:	67 e0       	ldi	r22, 0x07	; 7
    1410:	0e 94 7b 12 	call	0x24f6	; 0x24f6 <Dio_TogglChannel>
    1414:	04 c0       	rjmp	.+8      	; 0x141e <LED_TOGGLE+0x50>
		break;

	case LED2:
		Dio_TogglChannel(LED2_PORT,LED2_PIN);
    1416:	83 e0       	ldi	r24, 0x03	; 3
    1418:	63 e0       	ldi	r22, 0x03	; 3
    141a:	0e 94 7b 12 	call	0x24f6	; 0x24f6 <Dio_TogglChannel>
		break;
	}
}
    141e:	0f 90       	pop	r0
    1420:	0f 90       	pop	r0
    1422:	0f 90       	pop	r0
    1424:	cf 91       	pop	r28
    1426:	df 91       	pop	r29
    1428:	08 95       	ret

0000142a <Lcd_WriteCustom>:
 * 			PA6
 * 			PA7
 * */
extern u8 customChar[8][8];
static void Lcd_WriteCustom(void)
{
    142a:	df 93       	push	r29
    142c:	cf 93       	push	r28
    142e:	00 d0       	rcall	.+0      	; 0x1430 <Lcd_WriteCustom+0x6>
    1430:	cd b7       	in	r28, 0x3d	; 61
    1432:	de b7       	in	r29, 0x3e	; 62
	u8 loc_ByteIndex=0;
    1434:	1a 82       	std	Y+2, r1	; 0x02
	u8 loc_CharIndx=0;
    1436:	19 82       	std	Y+1, r1	; 0x01
	for (loc_CharIndx=0;loc_CharIndx<NO_CSTOM_CHAR;loc_CharIndx++)
    1438:	19 82       	std	Y+1, r1	; 0x01
    143a:	2c c0       	rjmp	.+88     	; 0x1494 <Lcd_WriteCustom+0x6a>
	{
		Lcd_Cmd(_LCD_CGRAM_START_ADDRESS +(loc_CharIndx*8));
    143c:	89 81       	ldd	r24, Y+1	; 0x01
    143e:	88 2f       	mov	r24, r24
    1440:	90 e0       	ldi	r25, 0x00	; 0
    1442:	08 96       	adiw	r24, 0x08	; 8
    1444:	88 0f       	add	r24, r24
    1446:	99 1f       	adc	r25, r25
    1448:	88 0f       	add	r24, r24
    144a:	99 1f       	adc	r25, r25
    144c:	88 0f       	add	r24, r24
    144e:	99 1f       	adc	r25, r25
    1450:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <Lcd_Cmd>
			for (loc_ByteIndex =0; loc_ByteIndex<NO_CSTOM_CHAR_BYTES;loc_ByteIndex++)
    1454:	1a 82       	std	Y+2, r1	; 0x02
    1456:	18 c0       	rjmp	.+48     	; 0x1488 <Lcd_WriteCustom+0x5e>
			{
				Lcd_DisplayChr(customChar[loc_CharIndx][loc_ByteIndex]);
    1458:	89 81       	ldd	r24, Y+1	; 0x01
    145a:	48 2f       	mov	r20, r24
    145c:	50 e0       	ldi	r21, 0x00	; 0
    145e:	8a 81       	ldd	r24, Y+2	; 0x02
    1460:	28 2f       	mov	r18, r24
    1462:	30 e0       	ldi	r19, 0x00	; 0
    1464:	ca 01       	movw	r24, r20
    1466:	88 0f       	add	r24, r24
    1468:	99 1f       	adc	r25, r25
    146a:	88 0f       	add	r24, r24
    146c:	99 1f       	adc	r25, r25
    146e:	88 0f       	add	r24, r24
    1470:	99 1f       	adc	r25, r25
    1472:	82 0f       	add	r24, r18
    1474:	93 1f       	adc	r25, r19
    1476:	fc 01       	movw	r30, r24
    1478:	e8 59       	subi	r30, 0x98	; 152
    147a:	fe 4f       	sbci	r31, 0xFE	; 254
    147c:	80 81       	ld	r24, Z
    147e:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <Lcd_DisplayChr>
	u8 loc_ByteIndex=0;
	u8 loc_CharIndx=0;
	for (loc_CharIndx=0;loc_CharIndx<NO_CSTOM_CHAR;loc_CharIndx++)
	{
		Lcd_Cmd(_LCD_CGRAM_START_ADDRESS +(loc_CharIndx*8));
			for (loc_ByteIndex =0; loc_ByteIndex<NO_CSTOM_CHAR_BYTES;loc_ByteIndex++)
    1482:	8a 81       	ldd	r24, Y+2	; 0x02
    1484:	8f 5f       	subi	r24, 0xFF	; 255
    1486:	8a 83       	std	Y+2, r24	; 0x02
    1488:	8a 81       	ldd	r24, Y+2	; 0x02
    148a:	88 30       	cpi	r24, 0x08	; 8
    148c:	28 f3       	brcs	.-54     	; 0x1458 <Lcd_WriteCustom+0x2e>
extern u8 customChar[8][8];
static void Lcd_WriteCustom(void)
{
	u8 loc_ByteIndex=0;
	u8 loc_CharIndx=0;
	for (loc_CharIndx=0;loc_CharIndx<NO_CSTOM_CHAR;loc_CharIndx++)
    148e:	89 81       	ldd	r24, Y+1	; 0x01
    1490:	8f 5f       	subi	r24, 0xFF	; 255
    1492:	89 83       	std	Y+1, r24	; 0x01
    1494:	89 81       	ldd	r24, Y+1	; 0x01
    1496:	88 30       	cpi	r24, 0x08	; 8
    1498:	88 f2       	brcs	.-94     	; 0x143c <Lcd_WriteCustom+0x12>
			for (loc_ByteIndex =0; loc_ByteIndex<NO_CSTOM_CHAR_BYTES;loc_ByteIndex++)
			{
				Lcd_DisplayChr(customChar[loc_CharIndx][loc_ByteIndex]);
			}
	}
}
    149a:	0f 90       	pop	r0
    149c:	0f 90       	pop	r0
    149e:	cf 91       	pop	r28
    14a0:	df 91       	pop	r29
    14a2:	08 95       	ret

000014a4 <Lcd_Init>:

void Lcd_Init(void)
{
    14a4:	df 93       	push	r29
    14a6:	cf 93       	push	r28
    14a8:	cd b7       	in	r28, 0x3d	; 61
    14aa:	de b7       	in	r29, 0x3e	; 62
    14ac:	e4 97       	sbiw	r28, 0x34	; 52
    14ae:	0f b6       	in	r0, 0x3f	; 63
    14b0:	f8 94       	cli
    14b2:	de bf       	out	0x3e, r29	; 62
    14b4:	0f be       	out	0x3f, r0	; 63
    14b6:	cd bf       	out	0x3d, r28	; 61
	/*	Configure Data Lines As Output	*/
	Dio_ConfigChannel(DIO_PORTA,DIO_PIN4,OUTPUT);
    14b8:	80 e0       	ldi	r24, 0x00	; 0
    14ba:	64 e0       	ldi	r22, 0x04	; 4
    14bc:	41 e0       	ldi	r20, 0x01	; 1
    14be:	0e 94 45 10 	call	0x208a	; 0x208a <Dio_ConfigChannel>
	Dio_ConfigChannel(DIO_PORTA,DIO_PIN5,OUTPUT);
    14c2:	80 e0       	ldi	r24, 0x00	; 0
    14c4:	65 e0       	ldi	r22, 0x05	; 5
    14c6:	41 e0       	ldi	r20, 0x01	; 1
    14c8:	0e 94 45 10 	call	0x208a	; 0x208a <Dio_ConfigChannel>
	Dio_ConfigChannel(DIO_PORTA,DIO_PIN6,OUTPUT);
    14cc:	80 e0       	ldi	r24, 0x00	; 0
    14ce:	66 e0       	ldi	r22, 0x06	; 6
    14d0:	41 e0       	ldi	r20, 0x01	; 1
    14d2:	0e 94 45 10 	call	0x208a	; 0x208a <Dio_ConfigChannel>
	Dio_ConfigChannel(DIO_PORTA,DIO_PIN7,OUTPUT);
    14d6:	80 e0       	ldi	r24, 0x00	; 0
    14d8:	67 e0       	ldi	r22, 0x07	; 7
    14da:	41 e0       	ldi	r20, 0x01	; 1
    14dc:	0e 94 45 10 	call	0x208a	; 0x208a <Dio_ConfigChannel>

	/*	Configure Control Lines As Output	*/
	Dio_ConfigChannel(DIO_PORTB,DIO_PIN1,OUTPUT);   /*	RS	*/
    14e0:	81 e0       	ldi	r24, 0x01	; 1
    14e2:	61 e0       	ldi	r22, 0x01	; 1
    14e4:	41 e0       	ldi	r20, 0x01	; 1
    14e6:	0e 94 45 10 	call	0x208a	; 0x208a <Dio_ConfigChannel>
	Dio_ConfigChannel(DIO_PORTB,DIO_PIN2,OUTPUT);	/*	RW	*/
    14ea:	81 e0       	ldi	r24, 0x01	; 1
    14ec:	62 e0       	ldi	r22, 0x02	; 2
    14ee:	41 e0       	ldi	r20, 0x01	; 1
    14f0:	0e 94 45 10 	call	0x208a	; 0x208a <Dio_ConfigChannel>
	Dio_ConfigChannel(DIO_PORTB,DIO_PIN3,OUTPUT);	/*	En	*/
    14f4:	81 e0       	ldi	r24, 0x01	; 1
    14f6:	63 e0       	ldi	r22, 0x03	; 3
    14f8:	41 e0       	ldi	r20, 0x01	; 1
    14fa:	0e 94 45 10 	call	0x208a	; 0x208a <Dio_ConfigChannel>

	Dio_WriteChannel(DIO_PORTB, DIO_PIN2, STD_LOW);
    14fe:	81 e0       	ldi	r24, 0x01	; 1
    1500:	62 e0       	ldi	r22, 0x02	; 2
    1502:	40 e0       	ldi	r20, 0x00	; 0
    1504:	0e 94 28 11 	call	0x2250	; 0x2250 <Dio_WriteChannel>
    1508:	80 e0       	ldi	r24, 0x00	; 0
    150a:	90 e0       	ldi	r25, 0x00	; 0
    150c:	a0 e7       	ldi	r26, 0x70	; 112
    150e:	b1 e4       	ldi	r27, 0x41	; 65
    1510:	89 ab       	std	Y+49, r24	; 0x31
    1512:	9a ab       	std	Y+50, r25	; 0x32
    1514:	ab ab       	std	Y+51, r26	; 0x33
    1516:	bc ab       	std	Y+52, r27	; 0x34
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1518:	69 a9       	ldd	r22, Y+49	; 0x31
    151a:	7a a9       	ldd	r23, Y+50	; 0x32
    151c:	8b a9       	ldd	r24, Y+51	; 0x33
    151e:	9c a9       	ldd	r25, Y+52	; 0x34
    1520:	20 e0       	ldi	r18, 0x00	; 0
    1522:	30 e0       	ldi	r19, 0x00	; 0
    1524:	4a e7       	ldi	r20, 0x7A	; 122
    1526:	55 e4       	ldi	r21, 0x45	; 69
    1528:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    152c:	dc 01       	movw	r26, r24
    152e:	cb 01       	movw	r24, r22
    1530:	8d a7       	std	Y+45, r24	; 0x2d
    1532:	9e a7       	std	Y+46, r25	; 0x2e
    1534:	af a7       	std	Y+47, r26	; 0x2f
    1536:	b8 ab       	std	Y+48, r27	; 0x30
	if (__tmp < 1.0)
    1538:	6d a5       	ldd	r22, Y+45	; 0x2d
    153a:	7e a5       	ldd	r23, Y+46	; 0x2e
    153c:	8f a5       	ldd	r24, Y+47	; 0x2f
    153e:	98 a9       	ldd	r25, Y+48	; 0x30
    1540:	20 e0       	ldi	r18, 0x00	; 0
    1542:	30 e0       	ldi	r19, 0x00	; 0
    1544:	40 e8       	ldi	r20, 0x80	; 128
    1546:	5f e3       	ldi	r21, 0x3F	; 63
    1548:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    154c:	88 23       	and	r24, r24
    154e:	2c f4       	brge	.+10     	; 0x155a <Lcd_Init+0xb6>
		__ticks = 1;
    1550:	81 e0       	ldi	r24, 0x01	; 1
    1552:	90 e0       	ldi	r25, 0x00	; 0
    1554:	9c a7       	std	Y+44, r25	; 0x2c
    1556:	8b a7       	std	Y+43, r24	; 0x2b
    1558:	3f c0       	rjmp	.+126    	; 0x15d8 <Lcd_Init+0x134>
	else if (__tmp > 65535)
    155a:	6d a5       	ldd	r22, Y+45	; 0x2d
    155c:	7e a5       	ldd	r23, Y+46	; 0x2e
    155e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1560:	98 a9       	ldd	r25, Y+48	; 0x30
    1562:	20 e0       	ldi	r18, 0x00	; 0
    1564:	3f ef       	ldi	r19, 0xFF	; 255
    1566:	4f e7       	ldi	r20, 0x7F	; 127
    1568:	57 e4       	ldi	r21, 0x47	; 71
    156a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    156e:	18 16       	cp	r1, r24
    1570:	4c f5       	brge	.+82     	; 0x15c4 <Lcd_Init+0x120>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1572:	69 a9       	ldd	r22, Y+49	; 0x31
    1574:	7a a9       	ldd	r23, Y+50	; 0x32
    1576:	8b a9       	ldd	r24, Y+51	; 0x33
    1578:	9c a9       	ldd	r25, Y+52	; 0x34
    157a:	20 e0       	ldi	r18, 0x00	; 0
    157c:	30 e0       	ldi	r19, 0x00	; 0
    157e:	40 e2       	ldi	r20, 0x20	; 32
    1580:	51 e4       	ldi	r21, 0x41	; 65
    1582:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1586:	dc 01       	movw	r26, r24
    1588:	cb 01       	movw	r24, r22
    158a:	bc 01       	movw	r22, r24
    158c:	cd 01       	movw	r24, r26
    158e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1592:	dc 01       	movw	r26, r24
    1594:	cb 01       	movw	r24, r22
    1596:	9c a7       	std	Y+44, r25	; 0x2c
    1598:	8b a7       	std	Y+43, r24	; 0x2b
    159a:	0f c0       	rjmp	.+30     	; 0x15ba <Lcd_Init+0x116>
    159c:	80 e9       	ldi	r24, 0x90	; 144
    159e:	91 e0       	ldi	r25, 0x01	; 1
    15a0:	9a a7       	std	Y+42, r25	; 0x2a
    15a2:	89 a7       	std	Y+41, r24	; 0x29
    15a4:	89 a5       	ldd	r24, Y+41	; 0x29
    15a6:	9a a5       	ldd	r25, Y+42	; 0x2a
    15a8:	01 97       	sbiw	r24, 0x01	; 1
    15aa:	f1 f7       	brne	.-4      	; 0x15a8 <Lcd_Init+0x104>
    15ac:	9a a7       	std	Y+42, r25	; 0x2a
    15ae:	89 a7       	std	Y+41, r24	; 0x29
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15b0:	8b a5       	ldd	r24, Y+43	; 0x2b
    15b2:	9c a5       	ldd	r25, Y+44	; 0x2c
    15b4:	01 97       	sbiw	r24, 0x01	; 1
    15b6:	9c a7       	std	Y+44, r25	; 0x2c
    15b8:	8b a7       	std	Y+43, r24	; 0x2b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15ba:	8b a5       	ldd	r24, Y+43	; 0x2b
    15bc:	9c a5       	ldd	r25, Y+44	; 0x2c
    15be:	00 97       	sbiw	r24, 0x00	; 0
    15c0:	69 f7       	brne	.-38     	; 0x159c <Lcd_Init+0xf8>
    15c2:	14 c0       	rjmp	.+40     	; 0x15ec <Lcd_Init+0x148>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15c4:	6d a5       	ldd	r22, Y+45	; 0x2d
    15c6:	7e a5       	ldd	r23, Y+46	; 0x2e
    15c8:	8f a5       	ldd	r24, Y+47	; 0x2f
    15ca:	98 a9       	ldd	r25, Y+48	; 0x30
    15cc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    15d0:	dc 01       	movw	r26, r24
    15d2:	cb 01       	movw	r24, r22
    15d4:	9c a7       	std	Y+44, r25	; 0x2c
    15d6:	8b a7       	std	Y+43, r24	; 0x2b
    15d8:	8b a5       	ldd	r24, Y+43	; 0x2b
    15da:	9c a5       	ldd	r25, Y+44	; 0x2c
    15dc:	98 a7       	std	Y+40, r25	; 0x28
    15de:	8f a3       	std	Y+39, r24	; 0x27
    15e0:	8f a1       	ldd	r24, Y+39	; 0x27
    15e2:	98 a5       	ldd	r25, Y+40	; 0x28
    15e4:	01 97       	sbiw	r24, 0x01	; 1
    15e6:	f1 f7       	brne	.-4      	; 0x15e4 <Lcd_Init+0x140>
    15e8:	98 a7       	std	Y+40, r25	; 0x28
    15ea:	8f a3       	std	Y+39, r24	; 0x27

	_delay_ms(15);

	Lcd_Cmd(3);
    15ec:	83 e0       	ldi	r24, 0x03	; 3
    15ee:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <Lcd_Cmd>
    15f2:	80 e0       	ldi	r24, 0x00	; 0
    15f4:	90 e0       	ldi	r25, 0x00	; 0
    15f6:	a0 ea       	ldi	r26, 0xA0	; 160
    15f8:	b0 e4       	ldi	r27, 0x40	; 64
    15fa:	8b a3       	std	Y+35, r24	; 0x23
    15fc:	9c a3       	std	Y+36, r25	; 0x24
    15fe:	ad a3       	std	Y+37, r26	; 0x25
    1600:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1602:	6b a1       	ldd	r22, Y+35	; 0x23
    1604:	7c a1       	ldd	r23, Y+36	; 0x24
    1606:	8d a1       	ldd	r24, Y+37	; 0x25
    1608:	9e a1       	ldd	r25, Y+38	; 0x26
    160a:	20 e0       	ldi	r18, 0x00	; 0
    160c:	30 e0       	ldi	r19, 0x00	; 0
    160e:	4a e7       	ldi	r20, 0x7A	; 122
    1610:	55 e4       	ldi	r21, 0x45	; 69
    1612:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1616:	dc 01       	movw	r26, r24
    1618:	cb 01       	movw	r24, r22
    161a:	8f 8f       	std	Y+31, r24	; 0x1f
    161c:	98 a3       	std	Y+32, r25	; 0x20
    161e:	a9 a3       	std	Y+33, r26	; 0x21
    1620:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    1622:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1624:	78 a1       	ldd	r23, Y+32	; 0x20
    1626:	89 a1       	ldd	r24, Y+33	; 0x21
    1628:	9a a1       	ldd	r25, Y+34	; 0x22
    162a:	20 e0       	ldi	r18, 0x00	; 0
    162c:	30 e0       	ldi	r19, 0x00	; 0
    162e:	40 e8       	ldi	r20, 0x80	; 128
    1630:	5f e3       	ldi	r21, 0x3F	; 63
    1632:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1636:	88 23       	and	r24, r24
    1638:	2c f4       	brge	.+10     	; 0x1644 <Lcd_Init+0x1a0>
		__ticks = 1;
    163a:	81 e0       	ldi	r24, 0x01	; 1
    163c:	90 e0       	ldi	r25, 0x00	; 0
    163e:	9e 8f       	std	Y+30, r25	; 0x1e
    1640:	8d 8f       	std	Y+29, r24	; 0x1d
    1642:	3f c0       	rjmp	.+126    	; 0x16c2 <Lcd_Init+0x21e>
	else if (__tmp > 65535)
    1644:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1646:	78 a1       	ldd	r23, Y+32	; 0x20
    1648:	89 a1       	ldd	r24, Y+33	; 0x21
    164a:	9a a1       	ldd	r25, Y+34	; 0x22
    164c:	20 e0       	ldi	r18, 0x00	; 0
    164e:	3f ef       	ldi	r19, 0xFF	; 255
    1650:	4f e7       	ldi	r20, 0x7F	; 127
    1652:	57 e4       	ldi	r21, 0x47	; 71
    1654:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1658:	18 16       	cp	r1, r24
    165a:	4c f5       	brge	.+82     	; 0x16ae <Lcd_Init+0x20a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    165c:	6b a1       	ldd	r22, Y+35	; 0x23
    165e:	7c a1       	ldd	r23, Y+36	; 0x24
    1660:	8d a1       	ldd	r24, Y+37	; 0x25
    1662:	9e a1       	ldd	r25, Y+38	; 0x26
    1664:	20 e0       	ldi	r18, 0x00	; 0
    1666:	30 e0       	ldi	r19, 0x00	; 0
    1668:	40 e2       	ldi	r20, 0x20	; 32
    166a:	51 e4       	ldi	r21, 0x41	; 65
    166c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1670:	dc 01       	movw	r26, r24
    1672:	cb 01       	movw	r24, r22
    1674:	bc 01       	movw	r22, r24
    1676:	cd 01       	movw	r24, r26
    1678:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    167c:	dc 01       	movw	r26, r24
    167e:	cb 01       	movw	r24, r22
    1680:	9e 8f       	std	Y+30, r25	; 0x1e
    1682:	8d 8f       	std	Y+29, r24	; 0x1d
    1684:	0f c0       	rjmp	.+30     	; 0x16a4 <Lcd_Init+0x200>
    1686:	80 e9       	ldi	r24, 0x90	; 144
    1688:	91 e0       	ldi	r25, 0x01	; 1
    168a:	9c 8f       	std	Y+28, r25	; 0x1c
    168c:	8b 8f       	std	Y+27, r24	; 0x1b
    168e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1690:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1692:	01 97       	sbiw	r24, 0x01	; 1
    1694:	f1 f7       	brne	.-4      	; 0x1692 <Lcd_Init+0x1ee>
    1696:	9c 8f       	std	Y+28, r25	; 0x1c
    1698:	8b 8f       	std	Y+27, r24	; 0x1b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    169a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    169c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    169e:	01 97       	sbiw	r24, 0x01	; 1
    16a0:	9e 8f       	std	Y+30, r25	; 0x1e
    16a2:	8d 8f       	std	Y+29, r24	; 0x1d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16a4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    16a6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    16a8:	00 97       	sbiw	r24, 0x00	; 0
    16aa:	69 f7       	brne	.-38     	; 0x1686 <Lcd_Init+0x1e2>
    16ac:	14 c0       	rjmp	.+40     	; 0x16d6 <Lcd_Init+0x232>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16ae:	6f 8d       	ldd	r22, Y+31	; 0x1f
    16b0:	78 a1       	ldd	r23, Y+32	; 0x20
    16b2:	89 a1       	ldd	r24, Y+33	; 0x21
    16b4:	9a a1       	ldd	r25, Y+34	; 0x22
    16b6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    16ba:	dc 01       	movw	r26, r24
    16bc:	cb 01       	movw	r24, r22
    16be:	9e 8f       	std	Y+30, r25	; 0x1e
    16c0:	8d 8f       	std	Y+29, r24	; 0x1d
    16c2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    16c4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    16c6:	9a 8f       	std	Y+26, r25	; 0x1a
    16c8:	89 8f       	std	Y+25, r24	; 0x19
    16ca:	89 8d       	ldd	r24, Y+25	; 0x19
    16cc:	9a 8d       	ldd	r25, Y+26	; 0x1a
    16ce:	01 97       	sbiw	r24, 0x01	; 1
    16d0:	f1 f7       	brne	.-4      	; 0x16ce <Lcd_Init+0x22a>
    16d2:	9a 8f       	std	Y+26, r25	; 0x1a
    16d4:	89 8f       	std	Y+25, r24	; 0x19
	_delay_ms(5);
	Lcd_Cmd(3);
    16d6:	83 e0       	ldi	r24, 0x03	; 3
    16d8:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <Lcd_Cmd>
    16dc:	80 e0       	ldi	r24, 0x00	; 0
    16de:	90 e0       	ldi	r25, 0x00	; 0
    16e0:	a8 ec       	ldi	r26, 0xC8	; 200
    16e2:	b2 e4       	ldi	r27, 0x42	; 66
    16e4:	8d 8b       	std	Y+21, r24	; 0x15
    16e6:	9e 8b       	std	Y+22, r25	; 0x16
    16e8:	af 8b       	std	Y+23, r26	; 0x17
    16ea:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    16ec:	6d 89       	ldd	r22, Y+21	; 0x15
    16ee:	7e 89       	ldd	r23, Y+22	; 0x16
    16f0:	8f 89       	ldd	r24, Y+23	; 0x17
    16f2:	98 8d       	ldd	r25, Y+24	; 0x18
    16f4:	2b ea       	ldi	r18, 0xAB	; 171
    16f6:	3a ea       	ldi	r19, 0xAA	; 170
    16f8:	4a ea       	ldi	r20, 0xAA	; 170
    16fa:	50 e4       	ldi	r21, 0x40	; 64
    16fc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1700:	dc 01       	movw	r26, r24
    1702:	cb 01       	movw	r24, r22
    1704:	89 8b       	std	Y+17, r24	; 0x11
    1706:	9a 8b       	std	Y+18, r25	; 0x12
    1708:	ab 8b       	std	Y+19, r26	; 0x13
    170a:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    170c:	69 89       	ldd	r22, Y+17	; 0x11
    170e:	7a 89       	ldd	r23, Y+18	; 0x12
    1710:	8b 89       	ldd	r24, Y+19	; 0x13
    1712:	9c 89       	ldd	r25, Y+20	; 0x14
    1714:	20 e0       	ldi	r18, 0x00	; 0
    1716:	30 e0       	ldi	r19, 0x00	; 0
    1718:	40 e8       	ldi	r20, 0x80	; 128
    171a:	5f e3       	ldi	r21, 0x3F	; 63
    171c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1720:	88 23       	and	r24, r24
    1722:	1c f4       	brge	.+6      	; 0x172a <Lcd_Init+0x286>
		__ticks = 1;
    1724:	81 e0       	ldi	r24, 0x01	; 1
    1726:	88 8b       	std	Y+16, r24	; 0x10
    1728:	91 c0       	rjmp	.+290    	; 0x184c <Lcd_Init+0x3a8>
	else if (__tmp > 255)
    172a:	69 89       	ldd	r22, Y+17	; 0x11
    172c:	7a 89       	ldd	r23, Y+18	; 0x12
    172e:	8b 89       	ldd	r24, Y+19	; 0x13
    1730:	9c 89       	ldd	r25, Y+20	; 0x14
    1732:	20 e0       	ldi	r18, 0x00	; 0
    1734:	30 e0       	ldi	r19, 0x00	; 0
    1736:	4f e7       	ldi	r20, 0x7F	; 127
    1738:	53 e4       	ldi	r21, 0x43	; 67
    173a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    173e:	18 16       	cp	r1, r24
    1740:	0c f0       	brlt	.+2      	; 0x1744 <Lcd_Init+0x2a0>
    1742:	7b c0       	rjmp	.+246    	; 0x183a <Lcd_Init+0x396>
	{
		_delay_ms(__us / 1000.0);
    1744:	6d 89       	ldd	r22, Y+21	; 0x15
    1746:	7e 89       	ldd	r23, Y+22	; 0x16
    1748:	8f 89       	ldd	r24, Y+23	; 0x17
    174a:	98 8d       	ldd	r25, Y+24	; 0x18
    174c:	20 e0       	ldi	r18, 0x00	; 0
    174e:	30 e0       	ldi	r19, 0x00	; 0
    1750:	4a e7       	ldi	r20, 0x7A	; 122
    1752:	54 e4       	ldi	r21, 0x44	; 68
    1754:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1758:	dc 01       	movw	r26, r24
    175a:	cb 01       	movw	r24, r22
    175c:	8c 87       	std	Y+12, r24	; 0x0c
    175e:	9d 87       	std	Y+13, r25	; 0x0d
    1760:	ae 87       	std	Y+14, r26	; 0x0e
    1762:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1764:	6c 85       	ldd	r22, Y+12	; 0x0c
    1766:	7d 85       	ldd	r23, Y+13	; 0x0d
    1768:	8e 85       	ldd	r24, Y+14	; 0x0e
    176a:	9f 85       	ldd	r25, Y+15	; 0x0f
    176c:	20 e0       	ldi	r18, 0x00	; 0
    176e:	30 e0       	ldi	r19, 0x00	; 0
    1770:	4a e7       	ldi	r20, 0x7A	; 122
    1772:	55 e4       	ldi	r21, 0x45	; 69
    1774:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1778:	dc 01       	movw	r26, r24
    177a:	cb 01       	movw	r24, r22
    177c:	88 87       	std	Y+8, r24	; 0x08
    177e:	99 87       	std	Y+9, r25	; 0x09
    1780:	aa 87       	std	Y+10, r26	; 0x0a
    1782:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1784:	68 85       	ldd	r22, Y+8	; 0x08
    1786:	79 85       	ldd	r23, Y+9	; 0x09
    1788:	8a 85       	ldd	r24, Y+10	; 0x0a
    178a:	9b 85       	ldd	r25, Y+11	; 0x0b
    178c:	20 e0       	ldi	r18, 0x00	; 0
    178e:	30 e0       	ldi	r19, 0x00	; 0
    1790:	40 e8       	ldi	r20, 0x80	; 128
    1792:	5f e3       	ldi	r21, 0x3F	; 63
    1794:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1798:	88 23       	and	r24, r24
    179a:	2c f4       	brge	.+10     	; 0x17a6 <Lcd_Init+0x302>
		__ticks = 1;
    179c:	81 e0       	ldi	r24, 0x01	; 1
    179e:	90 e0       	ldi	r25, 0x00	; 0
    17a0:	9f 83       	std	Y+7, r25	; 0x07
    17a2:	8e 83       	std	Y+6, r24	; 0x06
    17a4:	3f c0       	rjmp	.+126    	; 0x1824 <Lcd_Init+0x380>
	else if (__tmp > 65535)
    17a6:	68 85       	ldd	r22, Y+8	; 0x08
    17a8:	79 85       	ldd	r23, Y+9	; 0x09
    17aa:	8a 85       	ldd	r24, Y+10	; 0x0a
    17ac:	9b 85       	ldd	r25, Y+11	; 0x0b
    17ae:	20 e0       	ldi	r18, 0x00	; 0
    17b0:	3f ef       	ldi	r19, 0xFF	; 255
    17b2:	4f e7       	ldi	r20, 0x7F	; 127
    17b4:	57 e4       	ldi	r21, 0x47	; 71
    17b6:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    17ba:	18 16       	cp	r1, r24
    17bc:	4c f5       	brge	.+82     	; 0x1810 <Lcd_Init+0x36c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17be:	6c 85       	ldd	r22, Y+12	; 0x0c
    17c0:	7d 85       	ldd	r23, Y+13	; 0x0d
    17c2:	8e 85       	ldd	r24, Y+14	; 0x0e
    17c4:	9f 85       	ldd	r25, Y+15	; 0x0f
    17c6:	20 e0       	ldi	r18, 0x00	; 0
    17c8:	30 e0       	ldi	r19, 0x00	; 0
    17ca:	40 e2       	ldi	r20, 0x20	; 32
    17cc:	51 e4       	ldi	r21, 0x41	; 65
    17ce:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17d2:	dc 01       	movw	r26, r24
    17d4:	cb 01       	movw	r24, r22
    17d6:	bc 01       	movw	r22, r24
    17d8:	cd 01       	movw	r24, r26
    17da:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17de:	dc 01       	movw	r26, r24
    17e0:	cb 01       	movw	r24, r22
    17e2:	9f 83       	std	Y+7, r25	; 0x07
    17e4:	8e 83       	std	Y+6, r24	; 0x06
    17e6:	0f c0       	rjmp	.+30     	; 0x1806 <Lcd_Init+0x362>
    17e8:	80 e9       	ldi	r24, 0x90	; 144
    17ea:	91 e0       	ldi	r25, 0x01	; 1
    17ec:	9d 83       	std	Y+5, r25	; 0x05
    17ee:	8c 83       	std	Y+4, r24	; 0x04
    17f0:	8c 81       	ldd	r24, Y+4	; 0x04
    17f2:	9d 81       	ldd	r25, Y+5	; 0x05
    17f4:	01 97       	sbiw	r24, 0x01	; 1
    17f6:	f1 f7       	brne	.-4      	; 0x17f4 <Lcd_Init+0x350>
    17f8:	9d 83       	std	Y+5, r25	; 0x05
    17fa:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17fc:	8e 81       	ldd	r24, Y+6	; 0x06
    17fe:	9f 81       	ldd	r25, Y+7	; 0x07
    1800:	01 97       	sbiw	r24, 0x01	; 1
    1802:	9f 83       	std	Y+7, r25	; 0x07
    1804:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1806:	8e 81       	ldd	r24, Y+6	; 0x06
    1808:	9f 81       	ldd	r25, Y+7	; 0x07
    180a:	00 97       	sbiw	r24, 0x00	; 0
    180c:	69 f7       	brne	.-38     	; 0x17e8 <Lcd_Init+0x344>
    180e:	24 c0       	rjmp	.+72     	; 0x1858 <Lcd_Init+0x3b4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1810:	68 85       	ldd	r22, Y+8	; 0x08
    1812:	79 85       	ldd	r23, Y+9	; 0x09
    1814:	8a 85       	ldd	r24, Y+10	; 0x0a
    1816:	9b 85       	ldd	r25, Y+11	; 0x0b
    1818:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    181c:	dc 01       	movw	r26, r24
    181e:	cb 01       	movw	r24, r22
    1820:	9f 83       	std	Y+7, r25	; 0x07
    1822:	8e 83       	std	Y+6, r24	; 0x06
    1824:	8e 81       	ldd	r24, Y+6	; 0x06
    1826:	9f 81       	ldd	r25, Y+7	; 0x07
    1828:	9b 83       	std	Y+3, r25	; 0x03
    182a:	8a 83       	std	Y+2, r24	; 0x02
    182c:	8a 81       	ldd	r24, Y+2	; 0x02
    182e:	9b 81       	ldd	r25, Y+3	; 0x03
    1830:	01 97       	sbiw	r24, 0x01	; 1
    1832:	f1 f7       	brne	.-4      	; 0x1830 <Lcd_Init+0x38c>
    1834:	9b 83       	std	Y+3, r25	; 0x03
    1836:	8a 83       	std	Y+2, r24	; 0x02
    1838:	0f c0       	rjmp	.+30     	; 0x1858 <Lcd_Init+0x3b4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    183a:	69 89       	ldd	r22, Y+17	; 0x11
    183c:	7a 89       	ldd	r23, Y+18	; 0x12
    183e:	8b 89       	ldd	r24, Y+19	; 0x13
    1840:	9c 89       	ldd	r25, Y+20	; 0x14
    1842:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1846:	dc 01       	movw	r26, r24
    1848:	cb 01       	movw	r24, r22
    184a:	88 8b       	std	Y+16, r24	; 0x10
    184c:	88 89       	ldd	r24, Y+16	; 0x10
    184e:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1850:	89 81       	ldd	r24, Y+1	; 0x01
    1852:	8a 95       	dec	r24
    1854:	f1 f7       	brne	.-4      	; 0x1852 <Lcd_Init+0x3ae>
    1856:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(100);
	Lcd_Cmd(3);
    1858:	83 e0       	ldi	r24, 0x03	; 3
    185a:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <Lcd_Cmd>
	Lcd_Cmd(2);
    185e:	82 e0       	ldi	r24, 0x02	; 2
    1860:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <Lcd_Cmd>
	Lcd_Cmd(_LCD_4BIT_MODE);
    1864:	88 e2       	ldi	r24, 0x28	; 40
    1866:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <Lcd_Cmd>
	Lcd_WriteCustom();
    186a:	0e 94 15 0a 	call	0x142a	; 0x142a <Lcd_WriteCustom>
	Lcd_Goto_Row_Column(0,0);
    186e:	80 e0       	ldi	r24, 0x00	; 0
    1870:	60 e0       	ldi	r22, 0x00	; 0
    1872:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <Lcd_Goto_Row_Column>
	Lcd_Cmd(_LCD_CURSOR_OFF);
    1876:	8c e0       	ldi	r24, 0x0C	; 12
    1878:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <Lcd_Cmd>
}
    187c:	e4 96       	adiw	r28, 0x34	; 52
    187e:	0f b6       	in	r0, 0x3f	; 63
    1880:	f8 94       	cli
    1882:	de bf       	out	0x3e, r29	; 62
    1884:	0f be       	out	0x3f, r0	; 63
    1886:	cd bf       	out	0x3d, r28	; 61
    1888:	cf 91       	pop	r28
    188a:	df 91       	pop	r29
    188c:	08 95       	ret

0000188e <Enable_Pulse>:
static void Enable_Pulse(void)
{
    188e:	df 93       	push	r29
    1890:	cf 93       	push	r28
    1892:	cd b7       	in	r28, 0x3d	; 61
    1894:	de b7       	in	r29, 0x3e	; 62
    1896:	a6 97       	sbiw	r28, 0x26	; 38
    1898:	0f b6       	in	r0, 0x3f	; 63
    189a:	f8 94       	cli
    189c:	de bf       	out	0x3e, r29	; 62
    189e:	0f be       	out	0x3f, r0	; 63
    18a0:	cd bf       	out	0x3d, r28	; 61
	Dio_WriteChannel(DIO_PORTB, DIO_PIN3, STD_HIGH);
    18a2:	81 e0       	ldi	r24, 0x01	; 1
    18a4:	63 e0       	ldi	r22, 0x03	; 3
    18a6:	41 e0       	ldi	r20, 0x01	; 1
    18a8:	0e 94 28 11 	call	0x2250	; 0x2250 <Dio_WriteChannel>
    18ac:	80 e0       	ldi	r24, 0x00	; 0
    18ae:	90 e0       	ldi	r25, 0x00	; 0
    18b0:	a0 e8       	ldi	r26, 0x80	; 128
    18b2:	bf e3       	ldi	r27, 0x3F	; 63
    18b4:	8b a3       	std	Y+35, r24	; 0x23
    18b6:	9c a3       	std	Y+36, r25	; 0x24
    18b8:	ad a3       	std	Y+37, r26	; 0x25
    18ba:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    18bc:	6b a1       	ldd	r22, Y+35	; 0x23
    18be:	7c a1       	ldd	r23, Y+36	; 0x24
    18c0:	8d a1       	ldd	r24, Y+37	; 0x25
    18c2:	9e a1       	ldd	r25, Y+38	; 0x26
    18c4:	2b ea       	ldi	r18, 0xAB	; 171
    18c6:	3a ea       	ldi	r19, 0xAA	; 170
    18c8:	4a ea       	ldi	r20, 0xAA	; 170
    18ca:	50 e4       	ldi	r21, 0x40	; 64
    18cc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18d0:	dc 01       	movw	r26, r24
    18d2:	cb 01       	movw	r24, r22
    18d4:	8f 8f       	std	Y+31, r24	; 0x1f
    18d6:	98 a3       	std	Y+32, r25	; 0x20
    18d8:	a9 a3       	std	Y+33, r26	; 0x21
    18da:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    18dc:	6f 8d       	ldd	r22, Y+31	; 0x1f
    18de:	78 a1       	ldd	r23, Y+32	; 0x20
    18e0:	89 a1       	ldd	r24, Y+33	; 0x21
    18e2:	9a a1       	ldd	r25, Y+34	; 0x22
    18e4:	20 e0       	ldi	r18, 0x00	; 0
    18e6:	30 e0       	ldi	r19, 0x00	; 0
    18e8:	40 e8       	ldi	r20, 0x80	; 128
    18ea:	5f e3       	ldi	r21, 0x3F	; 63
    18ec:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    18f0:	88 23       	and	r24, r24
    18f2:	1c f4       	brge	.+6      	; 0x18fa <Enable_Pulse+0x6c>
		__ticks = 1;
    18f4:	81 e0       	ldi	r24, 0x01	; 1
    18f6:	8e 8f       	std	Y+30, r24	; 0x1e
    18f8:	91 c0       	rjmp	.+290    	; 0x1a1c <Enable_Pulse+0x18e>
	else if (__tmp > 255)
    18fa:	6f 8d       	ldd	r22, Y+31	; 0x1f
    18fc:	78 a1       	ldd	r23, Y+32	; 0x20
    18fe:	89 a1       	ldd	r24, Y+33	; 0x21
    1900:	9a a1       	ldd	r25, Y+34	; 0x22
    1902:	20 e0       	ldi	r18, 0x00	; 0
    1904:	30 e0       	ldi	r19, 0x00	; 0
    1906:	4f e7       	ldi	r20, 0x7F	; 127
    1908:	53 e4       	ldi	r21, 0x43	; 67
    190a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    190e:	18 16       	cp	r1, r24
    1910:	0c f0       	brlt	.+2      	; 0x1914 <Enable_Pulse+0x86>
    1912:	7b c0       	rjmp	.+246    	; 0x1a0a <Enable_Pulse+0x17c>
	{
		_delay_ms(__us / 1000.0);
    1914:	6b a1       	ldd	r22, Y+35	; 0x23
    1916:	7c a1       	ldd	r23, Y+36	; 0x24
    1918:	8d a1       	ldd	r24, Y+37	; 0x25
    191a:	9e a1       	ldd	r25, Y+38	; 0x26
    191c:	20 e0       	ldi	r18, 0x00	; 0
    191e:	30 e0       	ldi	r19, 0x00	; 0
    1920:	4a e7       	ldi	r20, 0x7A	; 122
    1922:	54 e4       	ldi	r21, 0x44	; 68
    1924:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1928:	dc 01       	movw	r26, r24
    192a:	cb 01       	movw	r24, r22
    192c:	8a 8f       	std	Y+26, r24	; 0x1a
    192e:	9b 8f       	std	Y+27, r25	; 0x1b
    1930:	ac 8f       	std	Y+28, r26	; 0x1c
    1932:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1934:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1936:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1938:	8c 8d       	ldd	r24, Y+28	; 0x1c
    193a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    193c:	20 e0       	ldi	r18, 0x00	; 0
    193e:	30 e0       	ldi	r19, 0x00	; 0
    1940:	4a e7       	ldi	r20, 0x7A	; 122
    1942:	55 e4       	ldi	r21, 0x45	; 69
    1944:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1948:	dc 01       	movw	r26, r24
    194a:	cb 01       	movw	r24, r22
    194c:	8e 8b       	std	Y+22, r24	; 0x16
    194e:	9f 8b       	std	Y+23, r25	; 0x17
    1950:	a8 8f       	std	Y+24, r26	; 0x18
    1952:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    1954:	6e 89       	ldd	r22, Y+22	; 0x16
    1956:	7f 89       	ldd	r23, Y+23	; 0x17
    1958:	88 8d       	ldd	r24, Y+24	; 0x18
    195a:	99 8d       	ldd	r25, Y+25	; 0x19
    195c:	20 e0       	ldi	r18, 0x00	; 0
    195e:	30 e0       	ldi	r19, 0x00	; 0
    1960:	40 e8       	ldi	r20, 0x80	; 128
    1962:	5f e3       	ldi	r21, 0x3F	; 63
    1964:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1968:	88 23       	and	r24, r24
    196a:	2c f4       	brge	.+10     	; 0x1976 <Enable_Pulse+0xe8>
		__ticks = 1;
    196c:	81 e0       	ldi	r24, 0x01	; 1
    196e:	90 e0       	ldi	r25, 0x00	; 0
    1970:	9d 8b       	std	Y+21, r25	; 0x15
    1972:	8c 8b       	std	Y+20, r24	; 0x14
    1974:	3f c0       	rjmp	.+126    	; 0x19f4 <Enable_Pulse+0x166>
	else if (__tmp > 65535)
    1976:	6e 89       	ldd	r22, Y+22	; 0x16
    1978:	7f 89       	ldd	r23, Y+23	; 0x17
    197a:	88 8d       	ldd	r24, Y+24	; 0x18
    197c:	99 8d       	ldd	r25, Y+25	; 0x19
    197e:	20 e0       	ldi	r18, 0x00	; 0
    1980:	3f ef       	ldi	r19, 0xFF	; 255
    1982:	4f e7       	ldi	r20, 0x7F	; 127
    1984:	57 e4       	ldi	r21, 0x47	; 71
    1986:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    198a:	18 16       	cp	r1, r24
    198c:	4c f5       	brge	.+82     	; 0x19e0 <Enable_Pulse+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    198e:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1990:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1992:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1994:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1996:	20 e0       	ldi	r18, 0x00	; 0
    1998:	30 e0       	ldi	r19, 0x00	; 0
    199a:	40 e2       	ldi	r20, 0x20	; 32
    199c:	51 e4       	ldi	r21, 0x41	; 65
    199e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19a2:	dc 01       	movw	r26, r24
    19a4:	cb 01       	movw	r24, r22
    19a6:	bc 01       	movw	r22, r24
    19a8:	cd 01       	movw	r24, r26
    19aa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19ae:	dc 01       	movw	r26, r24
    19b0:	cb 01       	movw	r24, r22
    19b2:	9d 8b       	std	Y+21, r25	; 0x15
    19b4:	8c 8b       	std	Y+20, r24	; 0x14
    19b6:	0f c0       	rjmp	.+30     	; 0x19d6 <Enable_Pulse+0x148>
    19b8:	80 e9       	ldi	r24, 0x90	; 144
    19ba:	91 e0       	ldi	r25, 0x01	; 1
    19bc:	9b 8b       	std	Y+19, r25	; 0x13
    19be:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    19c0:	8a 89       	ldd	r24, Y+18	; 0x12
    19c2:	9b 89       	ldd	r25, Y+19	; 0x13
    19c4:	01 97       	sbiw	r24, 0x01	; 1
    19c6:	f1 f7       	brne	.-4      	; 0x19c4 <Enable_Pulse+0x136>
    19c8:	9b 8b       	std	Y+19, r25	; 0x13
    19ca:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19cc:	8c 89       	ldd	r24, Y+20	; 0x14
    19ce:	9d 89       	ldd	r25, Y+21	; 0x15
    19d0:	01 97       	sbiw	r24, 0x01	; 1
    19d2:	9d 8b       	std	Y+21, r25	; 0x15
    19d4:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19d6:	8c 89       	ldd	r24, Y+20	; 0x14
    19d8:	9d 89       	ldd	r25, Y+21	; 0x15
    19da:	00 97       	sbiw	r24, 0x00	; 0
    19dc:	69 f7       	brne	.-38     	; 0x19b8 <Enable_Pulse+0x12a>
    19de:	24 c0       	rjmp	.+72     	; 0x1a28 <Enable_Pulse+0x19a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19e0:	6e 89       	ldd	r22, Y+22	; 0x16
    19e2:	7f 89       	ldd	r23, Y+23	; 0x17
    19e4:	88 8d       	ldd	r24, Y+24	; 0x18
    19e6:	99 8d       	ldd	r25, Y+25	; 0x19
    19e8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19ec:	dc 01       	movw	r26, r24
    19ee:	cb 01       	movw	r24, r22
    19f0:	9d 8b       	std	Y+21, r25	; 0x15
    19f2:	8c 8b       	std	Y+20, r24	; 0x14
    19f4:	8c 89       	ldd	r24, Y+20	; 0x14
    19f6:	9d 89       	ldd	r25, Y+21	; 0x15
    19f8:	99 8b       	std	Y+17, r25	; 0x11
    19fa:	88 8b       	std	Y+16, r24	; 0x10
    19fc:	88 89       	ldd	r24, Y+16	; 0x10
    19fe:	99 89       	ldd	r25, Y+17	; 0x11
    1a00:	01 97       	sbiw	r24, 0x01	; 1
    1a02:	f1 f7       	brne	.-4      	; 0x1a00 <Enable_Pulse+0x172>
    1a04:	99 8b       	std	Y+17, r25	; 0x11
    1a06:	88 8b       	std	Y+16, r24	; 0x10
    1a08:	0f c0       	rjmp	.+30     	; 0x1a28 <Enable_Pulse+0x19a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1a0a:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1a0c:	78 a1       	ldd	r23, Y+32	; 0x20
    1a0e:	89 a1       	ldd	r24, Y+33	; 0x21
    1a10:	9a a1       	ldd	r25, Y+34	; 0x22
    1a12:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a16:	dc 01       	movw	r26, r24
    1a18:	cb 01       	movw	r24, r22
    1a1a:	8e 8f       	std	Y+30, r24	; 0x1e
    1a1c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1a1e:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1a20:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a22:	8a 95       	dec	r24
    1a24:	f1 f7       	brne	.-4      	; 0x1a22 <Enable_Pulse+0x194>
    1a26:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(1);
	Dio_WriteChannel(DIO_PORTB, DIO_PIN3, STD_LOW);
    1a28:	81 e0       	ldi	r24, 0x01	; 1
    1a2a:	63 e0       	ldi	r22, 0x03	; 3
    1a2c:	40 e0       	ldi	r20, 0x00	; 0
    1a2e:	0e 94 28 11 	call	0x2250	; 0x2250 <Dio_WriteChannel>
    1a32:	80 e0       	ldi	r24, 0x00	; 0
    1a34:	90 e0       	ldi	r25, 0x00	; 0
    1a36:	a0 e0       	ldi	r26, 0x00	; 0
    1a38:	b0 e4       	ldi	r27, 0x40	; 64
    1a3a:	8b 87       	std	Y+11, r24	; 0x0b
    1a3c:	9c 87       	std	Y+12, r25	; 0x0c
    1a3e:	ad 87       	std	Y+13, r26	; 0x0d
    1a40:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a42:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a44:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a46:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a48:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a4a:	20 e0       	ldi	r18, 0x00	; 0
    1a4c:	30 e0       	ldi	r19, 0x00	; 0
    1a4e:	4a e7       	ldi	r20, 0x7A	; 122
    1a50:	55 e4       	ldi	r21, 0x45	; 69
    1a52:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a56:	dc 01       	movw	r26, r24
    1a58:	cb 01       	movw	r24, r22
    1a5a:	8f 83       	std	Y+7, r24	; 0x07
    1a5c:	98 87       	std	Y+8, r25	; 0x08
    1a5e:	a9 87       	std	Y+9, r26	; 0x09
    1a60:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a62:	6f 81       	ldd	r22, Y+7	; 0x07
    1a64:	78 85       	ldd	r23, Y+8	; 0x08
    1a66:	89 85       	ldd	r24, Y+9	; 0x09
    1a68:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a6a:	20 e0       	ldi	r18, 0x00	; 0
    1a6c:	30 e0       	ldi	r19, 0x00	; 0
    1a6e:	40 e8       	ldi	r20, 0x80	; 128
    1a70:	5f e3       	ldi	r21, 0x3F	; 63
    1a72:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1a76:	88 23       	and	r24, r24
    1a78:	2c f4       	brge	.+10     	; 0x1a84 <Enable_Pulse+0x1f6>
		__ticks = 1;
    1a7a:	81 e0       	ldi	r24, 0x01	; 1
    1a7c:	90 e0       	ldi	r25, 0x00	; 0
    1a7e:	9e 83       	std	Y+6, r25	; 0x06
    1a80:	8d 83       	std	Y+5, r24	; 0x05
    1a82:	3f c0       	rjmp	.+126    	; 0x1b02 <Enable_Pulse+0x274>
	else if (__tmp > 65535)
    1a84:	6f 81       	ldd	r22, Y+7	; 0x07
    1a86:	78 85       	ldd	r23, Y+8	; 0x08
    1a88:	89 85       	ldd	r24, Y+9	; 0x09
    1a8a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a8c:	20 e0       	ldi	r18, 0x00	; 0
    1a8e:	3f ef       	ldi	r19, 0xFF	; 255
    1a90:	4f e7       	ldi	r20, 0x7F	; 127
    1a92:	57 e4       	ldi	r21, 0x47	; 71
    1a94:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1a98:	18 16       	cp	r1, r24
    1a9a:	4c f5       	brge	.+82     	; 0x1aee <Enable_Pulse+0x260>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a9c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a9e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1aa0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1aa2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1aa4:	20 e0       	ldi	r18, 0x00	; 0
    1aa6:	30 e0       	ldi	r19, 0x00	; 0
    1aa8:	40 e2       	ldi	r20, 0x20	; 32
    1aaa:	51 e4       	ldi	r21, 0x41	; 65
    1aac:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ab0:	dc 01       	movw	r26, r24
    1ab2:	cb 01       	movw	r24, r22
    1ab4:	bc 01       	movw	r22, r24
    1ab6:	cd 01       	movw	r24, r26
    1ab8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1abc:	dc 01       	movw	r26, r24
    1abe:	cb 01       	movw	r24, r22
    1ac0:	9e 83       	std	Y+6, r25	; 0x06
    1ac2:	8d 83       	std	Y+5, r24	; 0x05
    1ac4:	0f c0       	rjmp	.+30     	; 0x1ae4 <Enable_Pulse+0x256>
    1ac6:	80 e9       	ldi	r24, 0x90	; 144
    1ac8:	91 e0       	ldi	r25, 0x01	; 1
    1aca:	9c 83       	std	Y+4, r25	; 0x04
    1acc:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1ace:	8b 81       	ldd	r24, Y+3	; 0x03
    1ad0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ad2:	01 97       	sbiw	r24, 0x01	; 1
    1ad4:	f1 f7       	brne	.-4      	; 0x1ad2 <Enable_Pulse+0x244>
    1ad6:	9c 83       	std	Y+4, r25	; 0x04
    1ad8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ada:	8d 81       	ldd	r24, Y+5	; 0x05
    1adc:	9e 81       	ldd	r25, Y+6	; 0x06
    1ade:	01 97       	sbiw	r24, 0x01	; 1
    1ae0:	9e 83       	std	Y+6, r25	; 0x06
    1ae2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ae4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ae6:	9e 81       	ldd	r25, Y+6	; 0x06
    1ae8:	00 97       	sbiw	r24, 0x00	; 0
    1aea:	69 f7       	brne	.-38     	; 0x1ac6 <Enable_Pulse+0x238>
    1aec:	14 c0       	rjmp	.+40     	; 0x1b16 <Enable_Pulse+0x288>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1aee:	6f 81       	ldd	r22, Y+7	; 0x07
    1af0:	78 85       	ldd	r23, Y+8	; 0x08
    1af2:	89 85       	ldd	r24, Y+9	; 0x09
    1af4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1af6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1afa:	dc 01       	movw	r26, r24
    1afc:	cb 01       	movw	r24, r22
    1afe:	9e 83       	std	Y+6, r25	; 0x06
    1b00:	8d 83       	std	Y+5, r24	; 0x05
    1b02:	8d 81       	ldd	r24, Y+5	; 0x05
    1b04:	9e 81       	ldd	r25, Y+6	; 0x06
    1b06:	9a 83       	std	Y+2, r25	; 0x02
    1b08:	89 83       	std	Y+1, r24	; 0x01
    1b0a:	89 81       	ldd	r24, Y+1	; 0x01
    1b0c:	9a 81       	ldd	r25, Y+2	; 0x02
    1b0e:	01 97       	sbiw	r24, 0x01	; 1
    1b10:	f1 f7       	brne	.-4      	; 0x1b0e <Enable_Pulse+0x280>
    1b12:	9a 83       	std	Y+2, r25	; 0x02
    1b14:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    1b16:	a6 96       	adiw	r28, 0x26	; 38
    1b18:	0f b6       	in	r0, 0x3f	; 63
    1b1a:	f8 94       	cli
    1b1c:	de bf       	out	0x3e, r29	; 62
    1b1e:	0f be       	out	0x3f, r0	; 63
    1b20:	cd bf       	out	0x3d, r28	; 61
    1b22:	cf 91       	pop	r28
    1b24:	df 91       	pop	r29
    1b26:	08 95       	ret

00001b28 <Lcd_Data>:

static void Lcd_Data(u8 data) /*	RS-> 1	*/
{
    1b28:	df 93       	push	r29
    1b2a:	cf 93       	push	r28
    1b2c:	00 d0       	rcall	.+0      	; 0x1b2e <Lcd_Data+0x6>
    1b2e:	0f 92       	push	r0
    1b30:	cd b7       	in	r28, 0x3d	; 61
    1b32:	de b7       	in	r29, 0x3e	; 62
    1b34:	8b 83       	std	Y+3, r24	; 0x03
	u8 High_Nibble = data;    /*	MSB	*/
    1b36:	8b 81       	ldd	r24, Y+3	; 0x03
    1b38:	8a 83       	std	Y+2, r24	; 0x02
	u8 Low_Nibble = data<<4;		/*	LSB	*/
    1b3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b3c:	82 95       	swap	r24
    1b3e:	80 7f       	andi	r24, 0xF0	; 240
    1b40:	89 83       	std	Y+1, r24	; 0x01
	Dio_WriteChannel(DIO_PORTB, DIO_PIN1, STD_HIGH);   /* Data Mode */
    1b42:	81 e0       	ldi	r24, 0x01	; 1
    1b44:	61 e0       	ldi	r22, 0x01	; 1
    1b46:	41 e0       	ldi	r20, 0x01	; 1
    1b48:	0e 94 28 11 	call	0x2250	; 0x2250 <Dio_WriteChannel>
	Dio_WriteGroup(DIO_PORTA,LCD_MASK,High_Nibble);
    1b4c:	80 e0       	ldi	r24, 0x00	; 0
    1b4e:	60 ef       	ldi	r22, 0xF0	; 240
    1b50:	4a 81       	ldd	r20, Y+2	; 0x02
    1b52:	0e 94 0b 12 	call	0x2416	; 0x2416 <Dio_WriteGroup>
	Enable_Pulse();
    1b56:	0e 94 47 0c 	call	0x188e	; 0x188e <Enable_Pulse>

	Dio_WriteGroup(DIO_PORTA,LCD_MASK,Low_Nibble);
    1b5a:	80 e0       	ldi	r24, 0x00	; 0
    1b5c:	60 ef       	ldi	r22, 0xF0	; 240
    1b5e:	49 81       	ldd	r20, Y+1	; 0x01
    1b60:	0e 94 0b 12 	call	0x2416	; 0x2416 <Dio_WriteGroup>
	Enable_Pulse();
    1b64:	0e 94 47 0c 	call	0x188e	; 0x188e <Enable_Pulse>
}
    1b68:	0f 90       	pop	r0
    1b6a:	0f 90       	pop	r0
    1b6c:	0f 90       	pop	r0
    1b6e:	cf 91       	pop	r28
    1b70:	df 91       	pop	r29
    1b72:	08 95       	ret

00001b74 <Lcd_Cmd>:

void Lcd_Cmd(lcd_Cmd_Type cmd)/*	RS-> 0	*/
{
    1b74:	df 93       	push	r29
    1b76:	cf 93       	push	r28
    1b78:	00 d0       	rcall	.+0      	; 0x1b7a <Lcd_Cmd+0x6>
    1b7a:	0f 92       	push	r0
    1b7c:	cd b7       	in	r28, 0x3d	; 61
    1b7e:	de b7       	in	r29, 0x3e	; 62
    1b80:	8b 83       	std	Y+3, r24	; 0x03
	u8 High_Nibble = cmd;    /*	MSB	*/
    1b82:	8b 81       	ldd	r24, Y+3	; 0x03
    1b84:	8a 83       	std	Y+2, r24	; 0x02
	u8 Low_Nibble = cmd<<4;		/*	LSB	*/
    1b86:	8b 81       	ldd	r24, Y+3	; 0x03
    1b88:	82 95       	swap	r24
    1b8a:	80 7f       	andi	r24, 0xF0	; 240
    1b8c:	89 83       	std	Y+1, r24	; 0x01
	Dio_WriteChannel(DIO_PORTB, DIO_PIN1, STD_LOW);   /* Command Mode */
    1b8e:	81 e0       	ldi	r24, 0x01	; 1
    1b90:	61 e0       	ldi	r22, 0x01	; 1
    1b92:	40 e0       	ldi	r20, 0x00	; 0
    1b94:	0e 94 28 11 	call	0x2250	; 0x2250 <Dio_WriteChannel>
	Dio_WriteGroup(DIO_PORTA,LCD_MASK,High_Nibble);
    1b98:	80 e0       	ldi	r24, 0x00	; 0
    1b9a:	60 ef       	ldi	r22, 0xF0	; 240
    1b9c:	4a 81       	ldd	r20, Y+2	; 0x02
    1b9e:	0e 94 0b 12 	call	0x2416	; 0x2416 <Dio_WriteGroup>
	Enable_Pulse();
    1ba2:	0e 94 47 0c 	call	0x188e	; 0x188e <Enable_Pulse>

	Dio_WriteGroup(DIO_PORTA,LCD_MASK,Low_Nibble);
    1ba6:	80 e0       	ldi	r24, 0x00	; 0
    1ba8:	60 ef       	ldi	r22, 0xF0	; 240
    1baa:	49 81       	ldd	r20, Y+1	; 0x01
    1bac:	0e 94 0b 12 	call	0x2416	; 0x2416 <Dio_WriteGroup>
	Enable_Pulse();
    1bb0:	0e 94 47 0c 	call	0x188e	; 0x188e <Enable_Pulse>
}
    1bb4:	0f 90       	pop	r0
    1bb6:	0f 90       	pop	r0
    1bb8:	0f 90       	pop	r0
    1bba:	cf 91       	pop	r28
    1bbc:	df 91       	pop	r29
    1bbe:	08 95       	ret

00001bc0 <Lcd_DisplayChr>:

void Lcd_DisplayChr(u8 chr)
{
    1bc0:	df 93       	push	r29
    1bc2:	cf 93       	push	r28
    1bc4:	0f 92       	push	r0
    1bc6:	cd b7       	in	r28, 0x3d	; 61
    1bc8:	de b7       	in	r29, 0x3e	; 62
    1bca:	89 83       	std	Y+1, r24	; 0x01
	Lcd_Data(chr);
    1bcc:	89 81       	ldd	r24, Y+1	; 0x01
    1bce:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <Lcd_Data>
}
    1bd2:	0f 90       	pop	r0
    1bd4:	cf 91       	pop	r28
    1bd6:	df 91       	pop	r29
    1bd8:	08 95       	ret

00001bda <Lcd_DisplayStr>:

void Lcd_DisplayStr(u8* str)
{
    1bda:	df 93       	push	r29
    1bdc:	cf 93       	push	r28
    1bde:	00 d0       	rcall	.+0      	; 0x1be0 <Lcd_DisplayStr+0x6>
    1be0:	cd b7       	in	r28, 0x3d	; 61
    1be2:	de b7       	in	r29, 0x3e	; 62
    1be4:	9a 83       	std	Y+2, r25	; 0x02
    1be6:	89 83       	std	Y+1, r24	; 0x01
    1be8:	0a c0       	rjmp	.+20     	; 0x1bfe <Lcd_DisplayStr+0x24>
	while (*str != '\0')
	{
		Lcd_DisplayChr(*str);
    1bea:	e9 81       	ldd	r30, Y+1	; 0x01
    1bec:	fa 81       	ldd	r31, Y+2	; 0x02
    1bee:	80 81       	ld	r24, Z
    1bf0:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <Lcd_DisplayChr>
		str++;
    1bf4:	89 81       	ldd	r24, Y+1	; 0x01
    1bf6:	9a 81       	ldd	r25, Y+2	; 0x02
    1bf8:	01 96       	adiw	r24, 0x01	; 1
    1bfa:	9a 83       	std	Y+2, r25	; 0x02
    1bfc:	89 83       	std	Y+1, r24	; 0x01
	Lcd_Data(chr);
}

void Lcd_DisplayStr(u8* str)
{
	while (*str != '\0')
    1bfe:	e9 81       	ldd	r30, Y+1	; 0x01
    1c00:	fa 81       	ldd	r31, Y+2	; 0x02
    1c02:	80 81       	ld	r24, Z
    1c04:	88 23       	and	r24, r24
    1c06:	89 f7       	brne	.-30     	; 0x1bea <Lcd_DisplayStr+0x10>
	{
		Lcd_DisplayChr(*str);
		str++;
	}
}
    1c08:	0f 90       	pop	r0
    1c0a:	0f 90       	pop	r0
    1c0c:	cf 91       	pop	r28
    1c0e:	df 91       	pop	r29
    1c10:	08 95       	ret

00001c12 <Lcd_Goto_Row_Column>:

void Lcd_Goto_Row_Column(u8 row, u8 col)
{
    1c12:	df 93       	push	r29
    1c14:	cf 93       	push	r28
    1c16:	00 d0       	rcall	.+0      	; 0x1c18 <Lcd_Goto_Row_Column+0x6>
    1c18:	00 d0       	rcall	.+0      	; 0x1c1a <Lcd_Goto_Row_Column+0x8>
    1c1a:	cd b7       	in	r28, 0x3d	; 61
    1c1c:	de b7       	in	r29, 0x3e	; 62
    1c1e:	89 83       	std	Y+1, r24	; 0x01
    1c20:	6a 83       	std	Y+2, r22	; 0x02
	switch (row)
    1c22:	89 81       	ldd	r24, Y+1	; 0x01
    1c24:	28 2f       	mov	r18, r24
    1c26:	30 e0       	ldi	r19, 0x00	; 0
    1c28:	3c 83       	std	Y+4, r19	; 0x04
    1c2a:	2b 83       	std	Y+3, r18	; 0x03
    1c2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c2e:	9c 81       	ldd	r25, Y+4	; 0x04
    1c30:	00 97       	sbiw	r24, 0x00	; 0
    1c32:	31 f0       	breq	.+12     	; 0x1c40 <Lcd_Goto_Row_Column+0x2e>
    1c34:	2b 81       	ldd	r18, Y+3	; 0x03
    1c36:	3c 81       	ldd	r19, Y+4	; 0x04
    1c38:	21 30       	cpi	r18, 0x01	; 1
    1c3a:	31 05       	cpc	r19, r1
    1c3c:	31 f0       	breq	.+12     	; 0x1c4a <Lcd_Goto_Row_Column+0x38>
    1c3e:	09 c0       	rjmp	.+18     	; 0x1c52 <Lcd_Goto_Row_Column+0x40>
	{
	case 0:
		Lcd_Cmd(0x80+col);
    1c40:	8a 81       	ldd	r24, Y+2	; 0x02
    1c42:	80 58       	subi	r24, 0x80	; 128
    1c44:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <Lcd_Cmd>
    1c48:	04 c0       	rjmp	.+8      	; 0x1c52 <Lcd_Goto_Row_Column+0x40>
		break;

	case 1:
		Lcd_Cmd(0xC0+col);
    1c4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c4c:	80 54       	subi	r24, 0x40	; 64
    1c4e:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <Lcd_Cmd>
		break;
	}
}
    1c52:	0f 90       	pop	r0
    1c54:	0f 90       	pop	r0
    1c56:	0f 90       	pop	r0
    1c58:	0f 90       	pop	r0
    1c5a:	cf 91       	pop	r28
    1c5c:	df 91       	pop	r29
    1c5e:	08 95       	ret

00001c60 <Lcd_DisplayNum>:
void Lcd_DisplayNum(u16 num)
{
    1c60:	df 93       	push	r29
    1c62:	cf 93       	push	r28
    1c64:	00 d0       	rcall	.+0      	; 0x1c66 <Lcd_DisplayNum+0x6>
    1c66:	cd b7       	in	r28, 0x3d	; 61
    1c68:	de b7       	in	r29, 0x3e	; 62
    1c6a:	9a 83       	std	Y+2, r25	; 0x02
    1c6c:	89 83       	std	Y+1, r24	; 0x01
	Lcd_DisplayChr(num/1000 + '0');
    1c6e:	89 81       	ldd	r24, Y+1	; 0x01
    1c70:	9a 81       	ldd	r25, Y+2	; 0x02
    1c72:	28 ee       	ldi	r18, 0xE8	; 232
    1c74:	33 e0       	ldi	r19, 0x03	; 3
    1c76:	b9 01       	movw	r22, r18
    1c78:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <__udivmodhi4>
    1c7c:	cb 01       	movw	r24, r22
    1c7e:	80 5d       	subi	r24, 0xD0	; 208
    1c80:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <Lcd_DisplayChr>
	Lcd_DisplayChr(num%1000/100 + '0');
    1c84:	89 81       	ldd	r24, Y+1	; 0x01
    1c86:	9a 81       	ldd	r25, Y+2	; 0x02
    1c88:	28 ee       	ldi	r18, 0xE8	; 232
    1c8a:	33 e0       	ldi	r19, 0x03	; 3
    1c8c:	b9 01       	movw	r22, r18
    1c8e:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <__udivmodhi4>
    1c92:	24 e6       	ldi	r18, 0x64	; 100
    1c94:	30 e0       	ldi	r19, 0x00	; 0
    1c96:	b9 01       	movw	r22, r18
    1c98:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <__udivmodhi4>
    1c9c:	cb 01       	movw	r24, r22
    1c9e:	80 5d       	subi	r24, 0xD0	; 208
    1ca0:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <Lcd_DisplayChr>
	Lcd_DisplayChr(num%1000%100/10 + '0');
    1ca4:	89 81       	ldd	r24, Y+1	; 0x01
    1ca6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ca8:	28 ee       	ldi	r18, 0xE8	; 232
    1caa:	33 e0       	ldi	r19, 0x03	; 3
    1cac:	b9 01       	movw	r22, r18
    1cae:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <__udivmodhi4>
    1cb2:	24 e6       	ldi	r18, 0x64	; 100
    1cb4:	30 e0       	ldi	r19, 0x00	; 0
    1cb6:	b9 01       	movw	r22, r18
    1cb8:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <__udivmodhi4>
    1cbc:	2a e0       	ldi	r18, 0x0A	; 10
    1cbe:	30 e0       	ldi	r19, 0x00	; 0
    1cc0:	b9 01       	movw	r22, r18
    1cc2:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <__udivmodhi4>
    1cc6:	cb 01       	movw	r24, r22
    1cc8:	80 5d       	subi	r24, 0xD0	; 208
    1cca:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <Lcd_DisplayChr>
	Lcd_DisplayChr(num%1000%100%10 + '0');
    1cce:	89 81       	ldd	r24, Y+1	; 0x01
    1cd0:	9a 81       	ldd	r25, Y+2	; 0x02
    1cd2:	28 ee       	ldi	r18, 0xE8	; 232
    1cd4:	33 e0       	ldi	r19, 0x03	; 3
    1cd6:	b9 01       	movw	r22, r18
    1cd8:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <__udivmodhi4>
    1cdc:	24 e6       	ldi	r18, 0x64	; 100
    1cde:	30 e0       	ldi	r19, 0x00	; 0
    1ce0:	b9 01       	movw	r22, r18
    1ce2:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <__udivmodhi4>
    1ce6:	2a e0       	ldi	r18, 0x0A	; 10
    1ce8:	30 e0       	ldi	r19, 0x00	; 0
    1cea:	b9 01       	movw	r22, r18
    1cec:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <__udivmodhi4>
    1cf0:	80 5d       	subi	r24, 0xD0	; 208
    1cf2:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <Lcd_DisplayChr>
}
    1cf6:	0f 90       	pop	r0
    1cf8:	0f 90       	pop	r0
    1cfa:	cf 91       	pop	r28
    1cfc:	df 91       	pop	r29
    1cfe:	08 95       	ret

00001d00 <LcdDisplayFloat>:

void LcdDisplayFloat(f64 floatNum)
{
    1d00:	df 93       	push	r29
    1d02:	cf 93       	push	r28
    1d04:	cd b7       	in	r28, 0x3d	; 61
    1d06:	de b7       	in	r29, 0x3e	; 62
    1d08:	2c 97       	sbiw	r28, 0x0c	; 12
    1d0a:	0f b6       	in	r0, 0x3f	; 63
    1d0c:	f8 94       	cli
    1d0e:	de bf       	out	0x3e, r29	; 62
    1d10:	0f be       	out	0x3f, r0	; 63
    1d12:	cd bf       	out	0x3d, r28	; 61
    1d14:	69 87       	std	Y+9, r22	; 0x09
    1d16:	7a 87       	std	Y+10, r23	; 0x0a
    1d18:	8b 87       	std	Y+11, r24	; 0x0b
    1d1a:	9c 87       	std	Y+12, r25	; 0x0c
	u16 intPart = 0;
    1d1c:	18 86       	std	Y+8, r1	; 0x08
    1d1e:	1f 82       	std	Y+7, r1	; 0x07
	f64 fractionTemp = 0;
    1d20:	80 e0       	ldi	r24, 0x00	; 0
    1d22:	90 e0       	ldi	r25, 0x00	; 0
    1d24:	a0 e0       	ldi	r26, 0x00	; 0
    1d26:	b0 e0       	ldi	r27, 0x00	; 0
    1d28:	8b 83       	std	Y+3, r24	; 0x03
    1d2a:	9c 83       	std	Y+4, r25	; 0x04
    1d2c:	ad 83       	std	Y+5, r26	; 0x05
    1d2e:	be 83       	std	Y+6, r27	; 0x06
	u16 fractionPart = 0;
    1d30:	1a 82       	std	Y+2, r1	; 0x02
    1d32:	19 82       	std	Y+1, r1	; 0x01

	intPart = (u16)floatNum;
    1d34:	69 85       	ldd	r22, Y+9	; 0x09
    1d36:	7a 85       	ldd	r23, Y+10	; 0x0a
    1d38:	8b 85       	ldd	r24, Y+11	; 0x0b
    1d3a:	9c 85       	ldd	r25, Y+12	; 0x0c
    1d3c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d40:	dc 01       	movw	r26, r24
    1d42:	cb 01       	movw	r24, r22
    1d44:	98 87       	std	Y+8, r25	; 0x08
    1d46:	8f 83       	std	Y+7, r24	; 0x07
	fractionTemp = floatNum - intPart;
    1d48:	8f 81       	ldd	r24, Y+7	; 0x07
    1d4a:	98 85       	ldd	r25, Y+8	; 0x08
    1d4c:	cc 01       	movw	r24, r24
    1d4e:	a0 e0       	ldi	r26, 0x00	; 0
    1d50:	b0 e0       	ldi	r27, 0x00	; 0
    1d52:	bc 01       	movw	r22, r24
    1d54:	cd 01       	movw	r24, r26
    1d56:	0e 94 a1 04 	call	0x942	; 0x942 <__floatunsisf>
    1d5a:	9b 01       	movw	r18, r22
    1d5c:	ac 01       	movw	r20, r24
    1d5e:	69 85       	ldd	r22, Y+9	; 0x09
    1d60:	7a 85       	ldd	r23, Y+10	; 0x0a
    1d62:	8b 85       	ldd	r24, Y+11	; 0x0b
    1d64:	9c 85       	ldd	r25, Y+12	; 0x0c
    1d66:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
    1d6a:	dc 01       	movw	r26, r24
    1d6c:	cb 01       	movw	r24, r22
    1d6e:	8b 83       	std	Y+3, r24	; 0x03
    1d70:	9c 83       	std	Y+4, r25	; 0x04
    1d72:	ad 83       	std	Y+5, r26	; 0x05
    1d74:	be 83       	std	Y+6, r27	; 0x06
	fractionPart = fractionTemp * 100;
    1d76:	6b 81       	ldd	r22, Y+3	; 0x03
    1d78:	7c 81       	ldd	r23, Y+4	; 0x04
    1d7a:	8d 81       	ldd	r24, Y+5	; 0x05
    1d7c:	9e 81       	ldd	r25, Y+6	; 0x06
    1d7e:	20 e0       	ldi	r18, 0x00	; 0
    1d80:	30 e0       	ldi	r19, 0x00	; 0
    1d82:	48 ec       	ldi	r20, 0xC8	; 200
    1d84:	52 e4       	ldi	r21, 0x42	; 66
    1d86:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d8a:	dc 01       	movw	r26, r24
    1d8c:	cb 01       	movw	r24, r22
    1d8e:	bc 01       	movw	r22, r24
    1d90:	cd 01       	movw	r24, r26
    1d92:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d96:	dc 01       	movw	r26, r24
    1d98:	cb 01       	movw	r24, r22
    1d9a:	9a 83       	std	Y+2, r25	; 0x02
    1d9c:	89 83       	std	Y+1, r24	; 0x01

	Lcd_DisplayNum(intPart);
    1d9e:	8f 81       	ldd	r24, Y+7	; 0x07
    1da0:	98 85       	ldd	r25, Y+8	; 0x08
    1da2:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <Lcd_DisplayNum>
	Lcd_DisplayChr('.');
    1da6:	8e e2       	ldi	r24, 0x2E	; 46
    1da8:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <Lcd_DisplayChr>
	Lcd_DisplayNum(fractionPart);
    1dac:	89 81       	ldd	r24, Y+1	; 0x01
    1dae:	9a 81       	ldd	r25, Y+2	; 0x02
    1db0:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <Lcd_DisplayNum>
}
    1db4:	2c 96       	adiw	r28, 0x0c	; 12
    1db6:	0f b6       	in	r0, 0x3f	; 63
    1db8:	f8 94       	cli
    1dba:	de bf       	out	0x3e, r29	; 62
    1dbc:	0f be       	out	0x3f, r0	; 63
    1dbe:	cd bf       	out	0x3d, r28	; 61
    1dc0:	cf 91       	pop	r28
    1dc2:	df 91       	pop	r29
    1dc4:	08 95       	ret

00001dc6 <Buzzer_Init>:
 *      Author: Eng_Fawzi
 */
#include "Buzzer.h"

void Buzzer_Init()
{
    1dc6:	df 93       	push	r29
    1dc8:	cf 93       	push	r28
    1dca:	cd b7       	in	r28, 0x3d	; 61
    1dcc:	de b7       	in	r29, 0x3e	; 62
	Dio_ConfigChannel(BUZZER_PORT,BUZZER_PIN,OUTPUT);
    1dce:	80 e0       	ldi	r24, 0x00	; 0
    1dd0:	63 e0       	ldi	r22, 0x03	; 3
    1dd2:	41 e0       	ldi	r20, 0x01	; 1
    1dd4:	0e 94 45 10 	call	0x208a	; 0x208a <Dio_ConfigChannel>
}
    1dd8:	cf 91       	pop	r28
    1dda:	df 91       	pop	r29
    1ddc:	08 95       	ret

00001dde <Buzzer_ON>:

void Buzzer_ON()
{
    1dde:	df 93       	push	r29
    1de0:	cf 93       	push	r28
    1de2:	cd b7       	in	r28, 0x3d	; 61
    1de4:	de b7       	in	r29, 0x3e	; 62
	Dio_WriteChannel(BUZZER_PORT,BUZZER_PIN,STD_HIGH);
    1de6:	80 e0       	ldi	r24, 0x00	; 0
    1de8:	63 e0       	ldi	r22, 0x03	; 3
    1dea:	41 e0       	ldi	r20, 0x01	; 1
    1dec:	0e 94 28 11 	call	0x2250	; 0x2250 <Dio_WriteChannel>
}
    1df0:	cf 91       	pop	r28
    1df2:	df 91       	pop	r29
    1df4:	08 95       	ret

00001df6 <Buzzer_OFF>:

void Buzzer_OFF()
{
    1df6:	df 93       	push	r29
    1df8:	cf 93       	push	r28
    1dfa:	cd b7       	in	r28, 0x3d	; 61
    1dfc:	de b7       	in	r29, 0x3e	; 62
	Dio_WriteChannel(BUZZER_PORT,BUZZER_PIN,STD_LOW);
    1dfe:	80 e0       	ldi	r24, 0x00	; 0
    1e00:	63 e0       	ldi	r22, 0x03	; 3
    1e02:	40 e0       	ldi	r20, 0x00	; 0
    1e04:	0e 94 28 11 	call	0x2250	; 0x2250 <Dio_WriteChannel>
}
    1e08:	cf 91       	pop	r28
    1e0a:	df 91       	pop	r29
    1e0c:	08 95       	ret

00001e0e <Buzzer_Toggle>:

void Buzzer_Toggle()
{
    1e0e:	df 93       	push	r29
    1e10:	cf 93       	push	r28
    1e12:	cd b7       	in	r28, 0x3d	; 61
    1e14:	de b7       	in	r29, 0x3e	; 62
	Dio_TogglChannel(BUZZER_PORT,BUZZER_PIN);
    1e16:	80 e0       	ldi	r24, 0x00	; 0
    1e18:	63 e0       	ldi	r22, 0x03	; 3
    1e1a:	0e 94 7b 12 	call	0x24f6	; 0x24f6 <Dio_TogglChannel>
}
    1e1e:	cf 91       	pop	r28
    1e20:	df 91       	pop	r29
    1e22:	08 95       	ret

00001e24 <Button_Init>:
 *      Author: Eng_Fawzi
 */
#include "Button.h"

void Button_Init(void)
{
    1e24:	df 93       	push	r29
    1e26:	cf 93       	push	r28
    1e28:	cd b7       	in	r28, 0x3d	; 61
    1e2a:	de b7       	in	r29, 0x3e	; 62
	Dio_ConfigChannel(BUTTON0_PORT,BUTTON0_PIN,INPUT);
    1e2c:	81 e0       	ldi	r24, 0x01	; 1
    1e2e:	60 e0       	ldi	r22, 0x00	; 0
    1e30:	40 e0       	ldi	r20, 0x00	; 0
    1e32:	0e 94 45 10 	call	0x208a	; 0x208a <Dio_ConfigChannel>
	Dio_ConfigChannel(BUTTON1_PORT,BUTTON1_PIN,INPUT);
    1e36:	81 e0       	ldi	r24, 0x01	; 1
    1e38:	64 e0       	ldi	r22, 0x04	; 4
    1e3a:	40 e0       	ldi	r20, 0x00	; 0
    1e3c:	0e 94 45 10 	call	0x208a	; 0x208a <Dio_ConfigChannel>
	Dio_ConfigChannel(BUTTON2_PORT,BUTTON2_PIN,INPUT);
    1e40:	83 e0       	ldi	r24, 0x03	; 3
    1e42:	62 e0       	ldi	r22, 0x02	; 2
    1e44:	40 e0       	ldi	r20, 0x00	; 0
    1e46:	0e 94 45 10 	call	0x208a	; 0x208a <Dio_ConfigChannel>
}
    1e4a:	cf 91       	pop	r28
    1e4c:	df 91       	pop	r29
    1e4e:	08 95       	ret

00001e50 <Button_GetStatus>:
button_type Button_GetStatus(buttonID_type button)
{
    1e50:	df 93       	push	r29
    1e52:	cf 93       	push	r28
    1e54:	00 d0       	rcall	.+0      	; 0x1e56 <Button_GetStatus+0x6>
    1e56:	00 d0       	rcall	.+0      	; 0x1e58 <Button_GetStatus+0x8>
    1e58:	cd b7       	in	r28, 0x3d	; 61
    1e5a:	de b7       	in	r29, 0x3e	; 62
    1e5c:	8a 83       	std	Y+2, r24	; 0x02
	button_type status = RELEASED;
    1e5e:	19 82       	std	Y+1, r1	; 0x01
	switch (button)
    1e60:	8a 81       	ldd	r24, Y+2	; 0x02
    1e62:	28 2f       	mov	r18, r24
    1e64:	30 e0       	ldi	r19, 0x00	; 0
    1e66:	3c 83       	std	Y+4, r19	; 0x04
    1e68:	2b 83       	std	Y+3, r18	; 0x03
    1e6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e6c:	9c 81       	ldd	r25, Y+4	; 0x04
    1e6e:	81 30       	cpi	r24, 0x01	; 1
    1e70:	91 05       	cpc	r25, r1
    1e72:	a1 f0       	breq	.+40     	; 0x1e9c <Button_GetStatus+0x4c>
    1e74:	2b 81       	ldd	r18, Y+3	; 0x03
    1e76:	3c 81       	ldd	r19, Y+4	; 0x04
    1e78:	22 30       	cpi	r18, 0x02	; 2
    1e7a:	31 05       	cpc	r19, r1
    1e7c:	d1 f0       	breq	.+52     	; 0x1eb2 <Button_GetStatus+0x62>
    1e7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e80:	9c 81       	ldd	r25, Y+4	; 0x04
    1e82:	00 97       	sbiw	r24, 0x00	; 0
    1e84:	01 f5       	brne	.+64     	; 0x1ec6 <Button_GetStatus+0x76>
	{
	case BUTTON0:
		if (Dio_ReadChannel(BUTTON0_PORT,BUTTON0_PIN) == STD_HIGH)
    1e86:	81 e0       	ldi	r24, 0x01	; 1
    1e88:	60 e0       	ldi	r22, 0x00	; 0
    1e8a:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <Dio_ReadChannel>
    1e8e:	81 30       	cpi	r24, 0x01	; 1
    1e90:	19 f4       	brne	.+6      	; 0x1e98 <Button_GetStatus+0x48>
		{
			status = PRESSED;
    1e92:	81 e0       	ldi	r24, 0x01	; 1
    1e94:	89 83       	std	Y+1, r24	; 0x01
    1e96:	17 c0       	rjmp	.+46     	; 0x1ec6 <Button_GetStatus+0x76>
		}
		else
		{
			status = RELEASED;
    1e98:	19 82       	std	Y+1, r1	; 0x01
    1e9a:	15 c0       	rjmp	.+42     	; 0x1ec6 <Button_GetStatus+0x76>
		}
		break;

	case BUTTON1:
		if (Dio_ReadChannel(BUTTON1_PORT,BUTTON1_PIN) == STD_HIGH)
    1e9c:	81 e0       	ldi	r24, 0x01	; 1
    1e9e:	64 e0       	ldi	r22, 0x04	; 4
    1ea0:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <Dio_ReadChannel>
    1ea4:	81 30       	cpi	r24, 0x01	; 1
    1ea6:	19 f4       	brne	.+6      	; 0x1eae <Button_GetStatus+0x5e>
		{
			status = PRESSED;
    1ea8:	81 e0       	ldi	r24, 0x01	; 1
    1eaa:	89 83       	std	Y+1, r24	; 0x01
    1eac:	0c c0       	rjmp	.+24     	; 0x1ec6 <Button_GetStatus+0x76>
		}
		else
		{
			status = RELEASED;
    1eae:	19 82       	std	Y+1, r1	; 0x01
    1eb0:	0a c0       	rjmp	.+20     	; 0x1ec6 <Button_GetStatus+0x76>
		}
		break;

	case BUTTON2:
		if (Dio_ReadChannel(BUTTON2_PORT,BUTTON2_PIN) == STD_HIGH)
    1eb2:	83 e0       	ldi	r24, 0x03	; 3
    1eb4:	62 e0       	ldi	r22, 0x02	; 2
    1eb6:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <Dio_ReadChannel>
    1eba:	81 30       	cpi	r24, 0x01	; 1
    1ebc:	19 f4       	brne	.+6      	; 0x1ec4 <Button_GetStatus+0x74>
		{
			status = PRESSED;
    1ebe:	81 e0       	ldi	r24, 0x01	; 1
    1ec0:	89 83       	std	Y+1, r24	; 0x01
    1ec2:	01 c0       	rjmp	.+2      	; 0x1ec6 <Button_GetStatus+0x76>
		}
		else
		{
			status = RELEASED;
    1ec4:	19 82       	std	Y+1, r1	; 0x01
		}
		break;
	}
	return status;
    1ec6:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ec8:	0f 90       	pop	r0
    1eca:	0f 90       	pop	r0
    1ecc:	0f 90       	pop	r0
    1ece:	0f 90       	pop	r0
    1ed0:	cf 91       	pop	r28
    1ed2:	df 91       	pop	r29
    1ed4:	08 95       	ret

00001ed6 <Glbl_Interrupt_Enable>:
 */

#include "Glbl_INT.h"

void Glbl_Interrupt_Enable()
{
    1ed6:	df 93       	push	r29
    1ed8:	cf 93       	push	r28
    1eda:	cd b7       	in	r28, 0x3d	; 61
    1edc:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(GLBL_SREG_REG,7);
    1ede:	af e5       	ldi	r26, 0x5F	; 95
    1ee0:	b0 e0       	ldi	r27, 0x00	; 0
    1ee2:	ef e5       	ldi	r30, 0x5F	; 95
    1ee4:	f0 e0       	ldi	r31, 0x00	; 0
    1ee6:	80 81       	ld	r24, Z
    1ee8:	80 68       	ori	r24, 0x80	; 128
    1eea:	8c 93       	st	X, r24
}
    1eec:	cf 91       	pop	r28
    1eee:	df 91       	pop	r29
    1ef0:	08 95       	ret

00001ef2 <Glbl_Interrupt_Disable>:
void Glbl_Interrupt_Disable()
{
    1ef2:	df 93       	push	r29
    1ef4:	cf 93       	push	r28
    1ef6:	cd b7       	in	r28, 0x3d	; 61
    1ef8:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(GLBL_SREG_REG,7);
    1efa:	af e5       	ldi	r26, 0x5F	; 95
    1efc:	b0 e0       	ldi	r27, 0x00	; 0
    1efe:	ef e5       	ldi	r30, 0x5F	; 95
    1f00:	f0 e0       	ldi	r31, 0x00	; 0
    1f02:	80 81       	ld	r24, Z
    1f04:	8f 77       	andi	r24, 0x7F	; 127
    1f06:	8c 93       	st	X, r24
}
    1f08:	cf 91       	pop	r28
    1f0a:	df 91       	pop	r29
    1f0c:	08 95       	ret

00001f0e <Ext_Interrupt_Enable>:

#include "Ext_INT.h"


void Ext_Interrupt_Enable(ext_Int_t intID)
{
    1f0e:	df 93       	push	r29
    1f10:	cf 93       	push	r28
    1f12:	00 d0       	rcall	.+0      	; 0x1f14 <Ext_Interrupt_Enable+0x6>
    1f14:	0f 92       	push	r0
    1f16:	cd b7       	in	r28, 0x3d	; 61
    1f18:	de b7       	in	r29, 0x3e	; 62
    1f1a:	89 83       	std	Y+1, r24	; 0x01
	switch (intID)
    1f1c:	89 81       	ldd	r24, Y+1	; 0x01
    1f1e:	28 2f       	mov	r18, r24
    1f20:	30 e0       	ldi	r19, 0x00	; 0
    1f22:	3b 83       	std	Y+3, r19	; 0x03
    1f24:	2a 83       	std	Y+2, r18	; 0x02
    1f26:	8a 81       	ldd	r24, Y+2	; 0x02
    1f28:	9b 81       	ldd	r25, Y+3	; 0x03
    1f2a:	81 30       	cpi	r24, 0x01	; 1
    1f2c:	91 05       	cpc	r25, r1
    1f2e:	89 f0       	breq	.+34     	; 0x1f52 <Ext_Interrupt_Enable+0x44>
    1f30:	2a 81       	ldd	r18, Y+2	; 0x02
    1f32:	3b 81       	ldd	r19, Y+3	; 0x03
    1f34:	22 30       	cpi	r18, 0x02	; 2
    1f36:	31 05       	cpc	r19, r1
    1f38:	a1 f0       	breq	.+40     	; 0x1f62 <Ext_Interrupt_Enable+0x54>
    1f3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f3c:	9b 81       	ldd	r25, Y+3	; 0x03
    1f3e:	00 97       	sbiw	r24, 0x00	; 0
    1f40:	b9 f4       	brne	.+46     	; 0x1f70 <Ext_Interrupt_Enable+0x62>
	{
	case EXT_INT0:
			SET_BIT(EXT_INT_GICR_REG,6);
    1f42:	ab e5       	ldi	r26, 0x5B	; 91
    1f44:	b0 e0       	ldi	r27, 0x00	; 0
    1f46:	eb e5       	ldi	r30, 0x5B	; 91
    1f48:	f0 e0       	ldi	r31, 0x00	; 0
    1f4a:	80 81       	ld	r24, Z
    1f4c:	80 64       	ori	r24, 0x40	; 64
    1f4e:	8c 93       	st	X, r24
    1f50:	0f c0       	rjmp	.+30     	; 0x1f70 <Ext_Interrupt_Enable+0x62>
			break;

	case EXT_INT1:
			SET_BIT(EXT_INT_GICR_REG,7);
    1f52:	ab e5       	ldi	r26, 0x5B	; 91
    1f54:	b0 e0       	ldi	r27, 0x00	; 0
    1f56:	eb e5       	ldi	r30, 0x5B	; 91
    1f58:	f0 e0       	ldi	r31, 0x00	; 0
    1f5a:	80 81       	ld	r24, Z
    1f5c:	80 68       	ori	r24, 0x80	; 128
    1f5e:	8c 93       	st	X, r24
    1f60:	07 c0       	rjmp	.+14     	; 0x1f70 <Ext_Interrupt_Enable+0x62>
			break;

	case EXT_INT2:
			SET_BIT(EXT_INT_GICR_REG,5);
    1f62:	ab e5       	ldi	r26, 0x5B	; 91
    1f64:	b0 e0       	ldi	r27, 0x00	; 0
    1f66:	eb e5       	ldi	r30, 0x5B	; 91
    1f68:	f0 e0       	ldi	r31, 0x00	; 0
    1f6a:	80 81       	ld	r24, Z
    1f6c:	80 62       	ori	r24, 0x20	; 32
    1f6e:	8c 93       	st	X, r24
			break;
	}
}
    1f70:	0f 90       	pop	r0
    1f72:	0f 90       	pop	r0
    1f74:	0f 90       	pop	r0
    1f76:	cf 91       	pop	r28
    1f78:	df 91       	pop	r29
    1f7a:	08 95       	ret

00001f7c <Ext_Interrupt_Disable>:
void Ext_Interrupt_Disable(ext_Int_t intID)
{
    1f7c:	df 93       	push	r29
    1f7e:	cf 93       	push	r28
    1f80:	00 d0       	rcall	.+0      	; 0x1f82 <Ext_Interrupt_Disable+0x6>
    1f82:	0f 92       	push	r0
    1f84:	cd b7       	in	r28, 0x3d	; 61
    1f86:	de b7       	in	r29, 0x3e	; 62
    1f88:	89 83       	std	Y+1, r24	; 0x01
	switch (intID)
    1f8a:	89 81       	ldd	r24, Y+1	; 0x01
    1f8c:	28 2f       	mov	r18, r24
    1f8e:	30 e0       	ldi	r19, 0x00	; 0
    1f90:	3b 83       	std	Y+3, r19	; 0x03
    1f92:	2a 83       	std	Y+2, r18	; 0x02
    1f94:	8a 81       	ldd	r24, Y+2	; 0x02
    1f96:	9b 81       	ldd	r25, Y+3	; 0x03
    1f98:	81 30       	cpi	r24, 0x01	; 1
    1f9a:	91 05       	cpc	r25, r1
    1f9c:	89 f0       	breq	.+34     	; 0x1fc0 <Ext_Interrupt_Disable+0x44>
    1f9e:	2a 81       	ldd	r18, Y+2	; 0x02
    1fa0:	3b 81       	ldd	r19, Y+3	; 0x03
    1fa2:	22 30       	cpi	r18, 0x02	; 2
    1fa4:	31 05       	cpc	r19, r1
    1fa6:	a1 f0       	breq	.+40     	; 0x1fd0 <Ext_Interrupt_Disable+0x54>
    1fa8:	8a 81       	ldd	r24, Y+2	; 0x02
    1faa:	9b 81       	ldd	r25, Y+3	; 0x03
    1fac:	00 97       	sbiw	r24, 0x00	; 0
    1fae:	b9 f4       	brne	.+46     	; 0x1fde <Ext_Interrupt_Disable+0x62>
	{
	case EXT_INT0:
			CLR_BIT(EXT_INT_GICR_REG,6);
    1fb0:	ab e5       	ldi	r26, 0x5B	; 91
    1fb2:	b0 e0       	ldi	r27, 0x00	; 0
    1fb4:	eb e5       	ldi	r30, 0x5B	; 91
    1fb6:	f0 e0       	ldi	r31, 0x00	; 0
    1fb8:	80 81       	ld	r24, Z
    1fba:	8f 7b       	andi	r24, 0xBF	; 191
    1fbc:	8c 93       	st	X, r24
    1fbe:	0f c0       	rjmp	.+30     	; 0x1fde <Ext_Interrupt_Disable+0x62>
			break;

	case EXT_INT1:
			CLR_BIT(EXT_INT_GICR_REG,7);
    1fc0:	ab e5       	ldi	r26, 0x5B	; 91
    1fc2:	b0 e0       	ldi	r27, 0x00	; 0
    1fc4:	eb e5       	ldi	r30, 0x5B	; 91
    1fc6:	f0 e0       	ldi	r31, 0x00	; 0
    1fc8:	80 81       	ld	r24, Z
    1fca:	8f 77       	andi	r24, 0x7F	; 127
    1fcc:	8c 93       	st	X, r24
    1fce:	07 c0       	rjmp	.+14     	; 0x1fde <Ext_Interrupt_Disable+0x62>
			break;

	case EXT_INT2:
			CLR_BIT(EXT_INT_GICR_REG,5);
    1fd0:	ab e5       	ldi	r26, 0x5B	; 91
    1fd2:	b0 e0       	ldi	r27, 0x00	; 0
    1fd4:	eb e5       	ldi	r30, 0x5B	; 91
    1fd6:	f0 e0       	ldi	r31, 0x00	; 0
    1fd8:	80 81       	ld	r24, Z
    1fda:	8f 7d       	andi	r24, 0xDF	; 223
    1fdc:	8c 93       	st	X, r24
			break;
	}

}
    1fde:	0f 90       	pop	r0
    1fe0:	0f 90       	pop	r0
    1fe2:	0f 90       	pop	r0
    1fe4:	cf 91       	pop	r28
    1fe6:	df 91       	pop	r29
    1fe8:	08 95       	ret

00001fea <Ext_Interrupt_SncControl>:

void Ext_Interrupt_SncControl(ext_Int_t intID, snc_mode_t mode)
{
    1fea:	df 93       	push	r29
    1fec:	cf 93       	push	r28
    1fee:	00 d0       	rcall	.+0      	; 0x1ff0 <Ext_Interrupt_SncControl+0x6>
    1ff0:	00 d0       	rcall	.+0      	; 0x1ff2 <Ext_Interrupt_SncControl+0x8>
    1ff2:	cd b7       	in	r28, 0x3d	; 61
    1ff4:	de b7       	in	r29, 0x3e	; 62
    1ff6:	89 83       	std	Y+1, r24	; 0x01
    1ff8:	6a 83       	std	Y+2, r22	; 0x02
	switch (intID)
    1ffa:	89 81       	ldd	r24, Y+1	; 0x01
    1ffc:	28 2f       	mov	r18, r24
    1ffe:	30 e0       	ldi	r19, 0x00	; 0
    2000:	3c 83       	std	Y+4, r19	; 0x04
    2002:	2b 83       	std	Y+3, r18	; 0x03
    2004:	8b 81       	ldd	r24, Y+3	; 0x03
    2006:	9c 81       	ldd	r25, Y+4	; 0x04
    2008:	81 30       	cpi	r24, 0x01	; 1
    200a:	91 05       	cpc	r25, r1
    200c:	91 f0       	breq	.+36     	; 0x2032 <Ext_Interrupt_SncControl+0x48>
    200e:	2b 81       	ldd	r18, Y+3	; 0x03
    2010:	3c 81       	ldd	r19, Y+4	; 0x04
    2012:	22 30       	cpi	r18, 0x02	; 2
    2014:	31 05       	cpc	r19, r1
    2016:	e9 f0       	breq	.+58     	; 0x2052 <Ext_Interrupt_SncControl+0x68>
    2018:	8b 81       	ldd	r24, Y+3	; 0x03
    201a:	9c 81       	ldd	r25, Y+4	; 0x04
    201c:	00 97       	sbiw	r24, 0x00	; 0
    201e:	71 f5       	brne	.+92     	; 0x207c <Ext_Interrupt_SncControl+0x92>
	{
		case EXT_INT0:
			EXT_INT_MCUCR_REG |=(mode<<0);
    2020:	a5 e5       	ldi	r26, 0x55	; 85
    2022:	b0 e0       	ldi	r27, 0x00	; 0
    2024:	e5 e5       	ldi	r30, 0x55	; 85
    2026:	f0 e0       	ldi	r31, 0x00	; 0
    2028:	90 81       	ld	r25, Z
    202a:	8a 81       	ldd	r24, Y+2	; 0x02
    202c:	89 2b       	or	r24, r25
    202e:	8c 93       	st	X, r24
    2030:	25 c0       	rjmp	.+74     	; 0x207c <Ext_Interrupt_SncControl+0x92>
			break;

		case EXT_INT1:
			EXT_INT_MCUCR_REG |=(mode<<2);
    2032:	a5 e5       	ldi	r26, 0x55	; 85
    2034:	b0 e0       	ldi	r27, 0x00	; 0
    2036:	e5 e5       	ldi	r30, 0x55	; 85
    2038:	f0 e0       	ldi	r31, 0x00	; 0
    203a:	80 81       	ld	r24, Z
    203c:	28 2f       	mov	r18, r24
    203e:	8a 81       	ldd	r24, Y+2	; 0x02
    2040:	88 2f       	mov	r24, r24
    2042:	90 e0       	ldi	r25, 0x00	; 0
    2044:	88 0f       	add	r24, r24
    2046:	99 1f       	adc	r25, r25
    2048:	88 0f       	add	r24, r24
    204a:	99 1f       	adc	r25, r25
    204c:	82 2b       	or	r24, r18
    204e:	8c 93       	st	X, r24
    2050:	15 c0       	rjmp	.+42     	; 0x207c <Ext_Interrupt_SncControl+0x92>
			break;

		case EXT_INT2:
			if (mode == FAILING_EDGE)
    2052:	8a 81       	ldd	r24, Y+2	; 0x02
    2054:	82 30       	cpi	r24, 0x02	; 2
    2056:	41 f4       	brne	.+16     	; 0x2068 <Ext_Interrupt_SncControl+0x7e>
			{
				CLR_BIT(EXT_INT_MCUCSR_REG,6);
    2058:	a4 e5       	ldi	r26, 0x54	; 84
    205a:	b0 e0       	ldi	r27, 0x00	; 0
    205c:	e4 e5       	ldi	r30, 0x54	; 84
    205e:	f0 e0       	ldi	r31, 0x00	; 0
    2060:	80 81       	ld	r24, Z
    2062:	8f 7b       	andi	r24, 0xBF	; 191
    2064:	8c 93       	st	X, r24
    2066:	0a c0       	rjmp	.+20     	; 0x207c <Ext_Interrupt_SncControl+0x92>
			}
			else if (mode == RISING_EDGE)
    2068:	8a 81       	ldd	r24, Y+2	; 0x02
    206a:	83 30       	cpi	r24, 0x03	; 3
    206c:	39 f4       	brne	.+14     	; 0x207c <Ext_Interrupt_SncControl+0x92>
			{
				SET_BIT(EXT_INT_MCUCSR_REG,6);
    206e:	a4 e5       	ldi	r26, 0x54	; 84
    2070:	b0 e0       	ldi	r27, 0x00	; 0
    2072:	e4 e5       	ldi	r30, 0x54	; 84
    2074:	f0 e0       	ldi	r31, 0x00	; 0
    2076:	80 81       	ld	r24, Z
    2078:	80 64       	ori	r24, 0x40	; 64
    207a:	8c 93       	st	X, r24
			{
				/*	Do Nothing	*/
			}
			break;
	}
}
    207c:	0f 90       	pop	r0
    207e:	0f 90       	pop	r0
    2080:	0f 90       	pop	r0
    2082:	0f 90       	pop	r0
    2084:	cf 91       	pop	r28
    2086:	df 91       	pop	r29
    2088:	08 95       	ret

0000208a <Dio_ConfigChannel>:
 */
#include "Dio.h"

/*DDRx      DDRA, DDRB, DDRC, DDRD*/
void Dio_ConfigChannel(port_type port,pin_type pin,direction_type direction)
{
    208a:	df 93       	push	r29
    208c:	cf 93       	push	r28
    208e:	00 d0       	rcall	.+0      	; 0x2090 <Dio_ConfigChannel+0x6>
    2090:	00 d0       	rcall	.+0      	; 0x2092 <Dio_ConfigChannel+0x8>
    2092:	0f 92       	push	r0
    2094:	cd b7       	in	r28, 0x3d	; 61
    2096:	de b7       	in	r29, 0x3e	; 62
    2098:	89 83       	std	Y+1, r24	; 0x01
    209a:	6a 83       	std	Y+2, r22	; 0x02
    209c:	4b 83       	std	Y+3, r20	; 0x03
	switch (port)
    209e:	89 81       	ldd	r24, Y+1	; 0x01
    20a0:	28 2f       	mov	r18, r24
    20a2:	30 e0       	ldi	r19, 0x00	; 0
    20a4:	3d 83       	std	Y+5, r19	; 0x05
    20a6:	2c 83       	std	Y+4, r18	; 0x04
    20a8:	8c 81       	ldd	r24, Y+4	; 0x04
    20aa:	9d 81       	ldd	r25, Y+5	; 0x05
    20ac:	81 30       	cpi	r24, 0x01	; 1
    20ae:	91 05       	cpc	r25, r1
    20b0:	09 f4       	brne	.+2      	; 0x20b4 <Dio_ConfigChannel+0x2a>
    20b2:	43 c0       	rjmp	.+134    	; 0x213a <Dio_ConfigChannel+0xb0>
    20b4:	2c 81       	ldd	r18, Y+4	; 0x04
    20b6:	3d 81       	ldd	r19, Y+5	; 0x05
    20b8:	22 30       	cpi	r18, 0x02	; 2
    20ba:	31 05       	cpc	r19, r1
    20bc:	2c f4       	brge	.+10     	; 0x20c8 <Dio_ConfigChannel+0x3e>
    20be:	8c 81       	ldd	r24, Y+4	; 0x04
    20c0:	9d 81       	ldd	r25, Y+5	; 0x05
    20c2:	00 97       	sbiw	r24, 0x00	; 0
    20c4:	71 f0       	breq	.+28     	; 0x20e2 <Dio_ConfigChannel+0x58>
    20c6:	bc c0       	rjmp	.+376    	; 0x2240 <Dio_ConfigChannel+0x1b6>
    20c8:	2c 81       	ldd	r18, Y+4	; 0x04
    20ca:	3d 81       	ldd	r19, Y+5	; 0x05
    20cc:	22 30       	cpi	r18, 0x02	; 2
    20ce:	31 05       	cpc	r19, r1
    20d0:	09 f4       	brne	.+2      	; 0x20d4 <Dio_ConfigChannel+0x4a>
    20d2:	5f c0       	rjmp	.+190    	; 0x2192 <Dio_ConfigChannel+0x108>
    20d4:	8c 81       	ldd	r24, Y+4	; 0x04
    20d6:	9d 81       	ldd	r25, Y+5	; 0x05
    20d8:	83 30       	cpi	r24, 0x03	; 3
    20da:	91 05       	cpc	r25, r1
    20dc:	09 f4       	brne	.+2      	; 0x20e0 <Dio_ConfigChannel+0x56>
    20de:	85 c0       	rjmp	.+266    	; 0x21ea <Dio_ConfigChannel+0x160>
    20e0:	af c0       	rjmp	.+350    	; 0x2240 <Dio_ConfigChannel+0x1b6>
	{
	case DIO_PORTA:
		if (direction == INPUT)
    20e2:	8b 81       	ldd	r24, Y+3	; 0x03
    20e4:	88 23       	and	r24, r24
    20e6:	a9 f4       	brne	.+42     	; 0x2112 <Dio_ConfigChannel+0x88>
		{
			CLR_BIT(DIO_DDRA_REG,pin);
    20e8:	aa e3       	ldi	r26, 0x3A	; 58
    20ea:	b0 e0       	ldi	r27, 0x00	; 0
    20ec:	ea e3       	ldi	r30, 0x3A	; 58
    20ee:	f0 e0       	ldi	r31, 0x00	; 0
    20f0:	80 81       	ld	r24, Z
    20f2:	48 2f       	mov	r20, r24
    20f4:	8a 81       	ldd	r24, Y+2	; 0x02
    20f6:	28 2f       	mov	r18, r24
    20f8:	30 e0       	ldi	r19, 0x00	; 0
    20fa:	81 e0       	ldi	r24, 0x01	; 1
    20fc:	90 e0       	ldi	r25, 0x00	; 0
    20fe:	02 2e       	mov	r0, r18
    2100:	02 c0       	rjmp	.+4      	; 0x2106 <Dio_ConfigChannel+0x7c>
    2102:	88 0f       	add	r24, r24
    2104:	99 1f       	adc	r25, r25
    2106:	0a 94       	dec	r0
    2108:	e2 f7       	brpl	.-8      	; 0x2102 <Dio_ConfigChannel+0x78>
    210a:	80 95       	com	r24
    210c:	84 23       	and	r24, r20
    210e:	8c 93       	st	X, r24
    2110:	97 c0       	rjmp	.+302    	; 0x2240 <Dio_ConfigChannel+0x1b6>
		}
		else
		{
			SET_BIT(DIO_DDRA_REG,pin);
    2112:	aa e3       	ldi	r26, 0x3A	; 58
    2114:	b0 e0       	ldi	r27, 0x00	; 0
    2116:	ea e3       	ldi	r30, 0x3A	; 58
    2118:	f0 e0       	ldi	r31, 0x00	; 0
    211a:	80 81       	ld	r24, Z
    211c:	48 2f       	mov	r20, r24
    211e:	8a 81       	ldd	r24, Y+2	; 0x02
    2120:	28 2f       	mov	r18, r24
    2122:	30 e0       	ldi	r19, 0x00	; 0
    2124:	81 e0       	ldi	r24, 0x01	; 1
    2126:	90 e0       	ldi	r25, 0x00	; 0
    2128:	02 2e       	mov	r0, r18
    212a:	02 c0       	rjmp	.+4      	; 0x2130 <Dio_ConfigChannel+0xa6>
    212c:	88 0f       	add	r24, r24
    212e:	99 1f       	adc	r25, r25
    2130:	0a 94       	dec	r0
    2132:	e2 f7       	brpl	.-8      	; 0x212c <Dio_ConfigChannel+0xa2>
    2134:	84 2b       	or	r24, r20
    2136:	8c 93       	st	X, r24
    2138:	83 c0       	rjmp	.+262    	; 0x2240 <Dio_ConfigChannel+0x1b6>
		}
		break;

	case DIO_PORTB:
		if (direction == INPUT)
    213a:	8b 81       	ldd	r24, Y+3	; 0x03
    213c:	88 23       	and	r24, r24
    213e:	a9 f4       	brne	.+42     	; 0x216a <Dio_ConfigChannel+0xe0>
		{
			CLR_BIT(DIO_DDRB_REG,pin);
    2140:	a7 e3       	ldi	r26, 0x37	; 55
    2142:	b0 e0       	ldi	r27, 0x00	; 0
    2144:	e7 e3       	ldi	r30, 0x37	; 55
    2146:	f0 e0       	ldi	r31, 0x00	; 0
    2148:	80 81       	ld	r24, Z
    214a:	48 2f       	mov	r20, r24
    214c:	8a 81       	ldd	r24, Y+2	; 0x02
    214e:	28 2f       	mov	r18, r24
    2150:	30 e0       	ldi	r19, 0x00	; 0
    2152:	81 e0       	ldi	r24, 0x01	; 1
    2154:	90 e0       	ldi	r25, 0x00	; 0
    2156:	02 2e       	mov	r0, r18
    2158:	02 c0       	rjmp	.+4      	; 0x215e <Dio_ConfigChannel+0xd4>
    215a:	88 0f       	add	r24, r24
    215c:	99 1f       	adc	r25, r25
    215e:	0a 94       	dec	r0
    2160:	e2 f7       	brpl	.-8      	; 0x215a <Dio_ConfigChannel+0xd0>
    2162:	80 95       	com	r24
    2164:	84 23       	and	r24, r20
    2166:	8c 93       	st	X, r24
    2168:	6b c0       	rjmp	.+214    	; 0x2240 <Dio_ConfigChannel+0x1b6>
		}
		else
		{
			SET_BIT(DIO_DDRB_REG,pin);
    216a:	a7 e3       	ldi	r26, 0x37	; 55
    216c:	b0 e0       	ldi	r27, 0x00	; 0
    216e:	e7 e3       	ldi	r30, 0x37	; 55
    2170:	f0 e0       	ldi	r31, 0x00	; 0
    2172:	80 81       	ld	r24, Z
    2174:	48 2f       	mov	r20, r24
    2176:	8a 81       	ldd	r24, Y+2	; 0x02
    2178:	28 2f       	mov	r18, r24
    217a:	30 e0       	ldi	r19, 0x00	; 0
    217c:	81 e0       	ldi	r24, 0x01	; 1
    217e:	90 e0       	ldi	r25, 0x00	; 0
    2180:	02 2e       	mov	r0, r18
    2182:	02 c0       	rjmp	.+4      	; 0x2188 <Dio_ConfigChannel+0xfe>
    2184:	88 0f       	add	r24, r24
    2186:	99 1f       	adc	r25, r25
    2188:	0a 94       	dec	r0
    218a:	e2 f7       	brpl	.-8      	; 0x2184 <Dio_ConfigChannel+0xfa>
    218c:	84 2b       	or	r24, r20
    218e:	8c 93       	st	X, r24
    2190:	57 c0       	rjmp	.+174    	; 0x2240 <Dio_ConfigChannel+0x1b6>
		}
		break;

	case DIO_PORTC:
		if (direction == INPUT)
    2192:	8b 81       	ldd	r24, Y+3	; 0x03
    2194:	88 23       	and	r24, r24
    2196:	a9 f4       	brne	.+42     	; 0x21c2 <Dio_ConfigChannel+0x138>
		{
			CLR_BIT(DIO_DDRC_REG,pin);
    2198:	a4 e3       	ldi	r26, 0x34	; 52
    219a:	b0 e0       	ldi	r27, 0x00	; 0
    219c:	e4 e3       	ldi	r30, 0x34	; 52
    219e:	f0 e0       	ldi	r31, 0x00	; 0
    21a0:	80 81       	ld	r24, Z
    21a2:	48 2f       	mov	r20, r24
    21a4:	8a 81       	ldd	r24, Y+2	; 0x02
    21a6:	28 2f       	mov	r18, r24
    21a8:	30 e0       	ldi	r19, 0x00	; 0
    21aa:	81 e0       	ldi	r24, 0x01	; 1
    21ac:	90 e0       	ldi	r25, 0x00	; 0
    21ae:	02 2e       	mov	r0, r18
    21b0:	02 c0       	rjmp	.+4      	; 0x21b6 <Dio_ConfigChannel+0x12c>
    21b2:	88 0f       	add	r24, r24
    21b4:	99 1f       	adc	r25, r25
    21b6:	0a 94       	dec	r0
    21b8:	e2 f7       	brpl	.-8      	; 0x21b2 <Dio_ConfigChannel+0x128>
    21ba:	80 95       	com	r24
    21bc:	84 23       	and	r24, r20
    21be:	8c 93       	st	X, r24
    21c0:	3f c0       	rjmp	.+126    	; 0x2240 <Dio_ConfigChannel+0x1b6>
		}
		else
		{
			SET_BIT(DIO_DDRC_REG,pin);
    21c2:	a4 e3       	ldi	r26, 0x34	; 52
    21c4:	b0 e0       	ldi	r27, 0x00	; 0
    21c6:	e4 e3       	ldi	r30, 0x34	; 52
    21c8:	f0 e0       	ldi	r31, 0x00	; 0
    21ca:	80 81       	ld	r24, Z
    21cc:	48 2f       	mov	r20, r24
    21ce:	8a 81       	ldd	r24, Y+2	; 0x02
    21d0:	28 2f       	mov	r18, r24
    21d2:	30 e0       	ldi	r19, 0x00	; 0
    21d4:	81 e0       	ldi	r24, 0x01	; 1
    21d6:	90 e0       	ldi	r25, 0x00	; 0
    21d8:	02 2e       	mov	r0, r18
    21da:	02 c0       	rjmp	.+4      	; 0x21e0 <Dio_ConfigChannel+0x156>
    21dc:	88 0f       	add	r24, r24
    21de:	99 1f       	adc	r25, r25
    21e0:	0a 94       	dec	r0
    21e2:	e2 f7       	brpl	.-8      	; 0x21dc <Dio_ConfigChannel+0x152>
    21e4:	84 2b       	or	r24, r20
    21e6:	8c 93       	st	X, r24
    21e8:	2b c0       	rjmp	.+86     	; 0x2240 <Dio_ConfigChannel+0x1b6>
		}
		break;

	case DIO_PORTD:
		if (direction == INPUT)
    21ea:	8b 81       	ldd	r24, Y+3	; 0x03
    21ec:	88 23       	and	r24, r24
    21ee:	a9 f4       	brne	.+42     	; 0x221a <Dio_ConfigChannel+0x190>
		{
			CLR_BIT(DIO_DDRD_REG,pin);
    21f0:	a1 e3       	ldi	r26, 0x31	; 49
    21f2:	b0 e0       	ldi	r27, 0x00	; 0
    21f4:	e1 e3       	ldi	r30, 0x31	; 49
    21f6:	f0 e0       	ldi	r31, 0x00	; 0
    21f8:	80 81       	ld	r24, Z
    21fa:	48 2f       	mov	r20, r24
    21fc:	8a 81       	ldd	r24, Y+2	; 0x02
    21fe:	28 2f       	mov	r18, r24
    2200:	30 e0       	ldi	r19, 0x00	; 0
    2202:	81 e0       	ldi	r24, 0x01	; 1
    2204:	90 e0       	ldi	r25, 0x00	; 0
    2206:	02 2e       	mov	r0, r18
    2208:	02 c0       	rjmp	.+4      	; 0x220e <Dio_ConfigChannel+0x184>
    220a:	88 0f       	add	r24, r24
    220c:	99 1f       	adc	r25, r25
    220e:	0a 94       	dec	r0
    2210:	e2 f7       	brpl	.-8      	; 0x220a <Dio_ConfigChannel+0x180>
    2212:	80 95       	com	r24
    2214:	84 23       	and	r24, r20
    2216:	8c 93       	st	X, r24
    2218:	13 c0       	rjmp	.+38     	; 0x2240 <Dio_ConfigChannel+0x1b6>
		}
		else
		{
			SET_BIT(DIO_DDRD_REG,pin);
    221a:	a1 e3       	ldi	r26, 0x31	; 49
    221c:	b0 e0       	ldi	r27, 0x00	; 0
    221e:	e1 e3       	ldi	r30, 0x31	; 49
    2220:	f0 e0       	ldi	r31, 0x00	; 0
    2222:	80 81       	ld	r24, Z
    2224:	48 2f       	mov	r20, r24
    2226:	8a 81       	ldd	r24, Y+2	; 0x02
    2228:	28 2f       	mov	r18, r24
    222a:	30 e0       	ldi	r19, 0x00	; 0
    222c:	81 e0       	ldi	r24, 0x01	; 1
    222e:	90 e0       	ldi	r25, 0x00	; 0
    2230:	02 2e       	mov	r0, r18
    2232:	02 c0       	rjmp	.+4      	; 0x2238 <Dio_ConfigChannel+0x1ae>
    2234:	88 0f       	add	r24, r24
    2236:	99 1f       	adc	r25, r25
    2238:	0a 94       	dec	r0
    223a:	e2 f7       	brpl	.-8      	; 0x2234 <Dio_ConfigChannel+0x1aa>
    223c:	84 2b       	or	r24, r20
    223e:	8c 93       	st	X, r24
		}

		break;
	}
}
    2240:	0f 90       	pop	r0
    2242:	0f 90       	pop	r0
    2244:	0f 90       	pop	r0
    2246:	0f 90       	pop	r0
    2248:	0f 90       	pop	r0
    224a:	cf 91       	pop	r28
    224c:	df 91       	pop	r29
    224e:	08 95       	ret

00002250 <Dio_WriteChannel>:
void Dio_WriteChannel(port_type port,pin_type pin,level_type level)
{
    2250:	df 93       	push	r29
    2252:	cf 93       	push	r28
    2254:	00 d0       	rcall	.+0      	; 0x2256 <Dio_WriteChannel+0x6>
    2256:	00 d0       	rcall	.+0      	; 0x2258 <Dio_WriteChannel+0x8>
    2258:	0f 92       	push	r0
    225a:	cd b7       	in	r28, 0x3d	; 61
    225c:	de b7       	in	r29, 0x3e	; 62
    225e:	89 83       	std	Y+1, r24	; 0x01
    2260:	6a 83       	std	Y+2, r22	; 0x02
    2262:	4b 83       	std	Y+3, r20	; 0x03
	switch (port)
    2264:	89 81       	ldd	r24, Y+1	; 0x01
    2266:	28 2f       	mov	r18, r24
    2268:	30 e0       	ldi	r19, 0x00	; 0
    226a:	3d 83       	std	Y+5, r19	; 0x05
    226c:	2c 83       	std	Y+4, r18	; 0x04
    226e:	8c 81       	ldd	r24, Y+4	; 0x04
    2270:	9d 81       	ldd	r25, Y+5	; 0x05
    2272:	81 30       	cpi	r24, 0x01	; 1
    2274:	91 05       	cpc	r25, r1
    2276:	09 f4       	brne	.+2      	; 0x227a <Dio_WriteChannel+0x2a>
    2278:	43 c0       	rjmp	.+134    	; 0x2300 <Dio_WriteChannel+0xb0>
    227a:	2c 81       	ldd	r18, Y+4	; 0x04
    227c:	3d 81       	ldd	r19, Y+5	; 0x05
    227e:	22 30       	cpi	r18, 0x02	; 2
    2280:	31 05       	cpc	r19, r1
    2282:	2c f4       	brge	.+10     	; 0x228e <Dio_WriteChannel+0x3e>
    2284:	8c 81       	ldd	r24, Y+4	; 0x04
    2286:	9d 81       	ldd	r25, Y+5	; 0x05
    2288:	00 97       	sbiw	r24, 0x00	; 0
    228a:	71 f0       	breq	.+28     	; 0x22a8 <Dio_WriteChannel+0x58>
    228c:	bc c0       	rjmp	.+376    	; 0x2406 <Dio_WriteChannel+0x1b6>
    228e:	2c 81       	ldd	r18, Y+4	; 0x04
    2290:	3d 81       	ldd	r19, Y+5	; 0x05
    2292:	22 30       	cpi	r18, 0x02	; 2
    2294:	31 05       	cpc	r19, r1
    2296:	09 f4       	brne	.+2      	; 0x229a <Dio_WriteChannel+0x4a>
    2298:	5f c0       	rjmp	.+190    	; 0x2358 <Dio_WriteChannel+0x108>
    229a:	8c 81       	ldd	r24, Y+4	; 0x04
    229c:	9d 81       	ldd	r25, Y+5	; 0x05
    229e:	83 30       	cpi	r24, 0x03	; 3
    22a0:	91 05       	cpc	r25, r1
    22a2:	09 f4       	brne	.+2      	; 0x22a6 <Dio_WriteChannel+0x56>
    22a4:	85 c0       	rjmp	.+266    	; 0x23b0 <Dio_WriteChannel+0x160>
    22a6:	af c0       	rjmp	.+350    	; 0x2406 <Dio_WriteChannel+0x1b6>
	{
	case DIO_PORTA:
		if (level == STD_HIGH)
    22a8:	8b 81       	ldd	r24, Y+3	; 0x03
    22aa:	81 30       	cpi	r24, 0x01	; 1
    22ac:	a1 f4       	brne	.+40     	; 0x22d6 <Dio_WriteChannel+0x86>
		{
			SET_BIT(DIO_PORTA_REG,pin);
    22ae:	ab e3       	ldi	r26, 0x3B	; 59
    22b0:	b0 e0       	ldi	r27, 0x00	; 0
    22b2:	eb e3       	ldi	r30, 0x3B	; 59
    22b4:	f0 e0       	ldi	r31, 0x00	; 0
    22b6:	80 81       	ld	r24, Z
    22b8:	48 2f       	mov	r20, r24
    22ba:	8a 81       	ldd	r24, Y+2	; 0x02
    22bc:	28 2f       	mov	r18, r24
    22be:	30 e0       	ldi	r19, 0x00	; 0
    22c0:	81 e0       	ldi	r24, 0x01	; 1
    22c2:	90 e0       	ldi	r25, 0x00	; 0
    22c4:	02 2e       	mov	r0, r18
    22c6:	02 c0       	rjmp	.+4      	; 0x22cc <Dio_WriteChannel+0x7c>
    22c8:	88 0f       	add	r24, r24
    22ca:	99 1f       	adc	r25, r25
    22cc:	0a 94       	dec	r0
    22ce:	e2 f7       	brpl	.-8      	; 0x22c8 <Dio_WriteChannel+0x78>
    22d0:	84 2b       	or	r24, r20
    22d2:	8c 93       	st	X, r24
    22d4:	98 c0       	rjmp	.+304    	; 0x2406 <Dio_WriteChannel+0x1b6>
		}
		else
		{
			CLR_BIT(DIO_PORTA_REG,pin);
    22d6:	ab e3       	ldi	r26, 0x3B	; 59
    22d8:	b0 e0       	ldi	r27, 0x00	; 0
    22da:	eb e3       	ldi	r30, 0x3B	; 59
    22dc:	f0 e0       	ldi	r31, 0x00	; 0
    22de:	80 81       	ld	r24, Z
    22e0:	48 2f       	mov	r20, r24
    22e2:	8a 81       	ldd	r24, Y+2	; 0x02
    22e4:	28 2f       	mov	r18, r24
    22e6:	30 e0       	ldi	r19, 0x00	; 0
    22e8:	81 e0       	ldi	r24, 0x01	; 1
    22ea:	90 e0       	ldi	r25, 0x00	; 0
    22ec:	02 2e       	mov	r0, r18
    22ee:	02 c0       	rjmp	.+4      	; 0x22f4 <Dio_WriteChannel+0xa4>
    22f0:	88 0f       	add	r24, r24
    22f2:	99 1f       	adc	r25, r25
    22f4:	0a 94       	dec	r0
    22f6:	e2 f7       	brpl	.-8      	; 0x22f0 <Dio_WriteChannel+0xa0>
    22f8:	80 95       	com	r24
    22fa:	84 23       	and	r24, r20
    22fc:	8c 93       	st	X, r24
    22fe:	83 c0       	rjmp	.+262    	; 0x2406 <Dio_WriteChannel+0x1b6>
		}
		break;

	case DIO_PORTB:
		if (level == STD_HIGH)
    2300:	8b 81       	ldd	r24, Y+3	; 0x03
    2302:	81 30       	cpi	r24, 0x01	; 1
    2304:	a1 f4       	brne	.+40     	; 0x232e <Dio_WriteChannel+0xde>
		{
			SET_BIT(DIO_PORTB_REG,pin);
    2306:	a8 e3       	ldi	r26, 0x38	; 56
    2308:	b0 e0       	ldi	r27, 0x00	; 0
    230a:	e8 e3       	ldi	r30, 0x38	; 56
    230c:	f0 e0       	ldi	r31, 0x00	; 0
    230e:	80 81       	ld	r24, Z
    2310:	48 2f       	mov	r20, r24
    2312:	8a 81       	ldd	r24, Y+2	; 0x02
    2314:	28 2f       	mov	r18, r24
    2316:	30 e0       	ldi	r19, 0x00	; 0
    2318:	81 e0       	ldi	r24, 0x01	; 1
    231a:	90 e0       	ldi	r25, 0x00	; 0
    231c:	02 2e       	mov	r0, r18
    231e:	02 c0       	rjmp	.+4      	; 0x2324 <Dio_WriteChannel+0xd4>
    2320:	88 0f       	add	r24, r24
    2322:	99 1f       	adc	r25, r25
    2324:	0a 94       	dec	r0
    2326:	e2 f7       	brpl	.-8      	; 0x2320 <Dio_WriteChannel+0xd0>
    2328:	84 2b       	or	r24, r20
    232a:	8c 93       	st	X, r24
    232c:	6c c0       	rjmp	.+216    	; 0x2406 <Dio_WriteChannel+0x1b6>
		}
		else
		{
			CLR_BIT(DIO_PORTB_REG,pin);
    232e:	a8 e3       	ldi	r26, 0x38	; 56
    2330:	b0 e0       	ldi	r27, 0x00	; 0
    2332:	e8 e3       	ldi	r30, 0x38	; 56
    2334:	f0 e0       	ldi	r31, 0x00	; 0
    2336:	80 81       	ld	r24, Z
    2338:	48 2f       	mov	r20, r24
    233a:	8a 81       	ldd	r24, Y+2	; 0x02
    233c:	28 2f       	mov	r18, r24
    233e:	30 e0       	ldi	r19, 0x00	; 0
    2340:	81 e0       	ldi	r24, 0x01	; 1
    2342:	90 e0       	ldi	r25, 0x00	; 0
    2344:	02 2e       	mov	r0, r18
    2346:	02 c0       	rjmp	.+4      	; 0x234c <Dio_WriteChannel+0xfc>
    2348:	88 0f       	add	r24, r24
    234a:	99 1f       	adc	r25, r25
    234c:	0a 94       	dec	r0
    234e:	e2 f7       	brpl	.-8      	; 0x2348 <Dio_WriteChannel+0xf8>
    2350:	80 95       	com	r24
    2352:	84 23       	and	r24, r20
    2354:	8c 93       	st	X, r24
    2356:	57 c0       	rjmp	.+174    	; 0x2406 <Dio_WriteChannel+0x1b6>
		}
		break;

	case DIO_PORTC:
		if (level == STD_HIGH)
    2358:	8b 81       	ldd	r24, Y+3	; 0x03
    235a:	81 30       	cpi	r24, 0x01	; 1
    235c:	a1 f4       	brne	.+40     	; 0x2386 <Dio_WriteChannel+0x136>
		{
			SET_BIT(DIO_PORTC_REG,pin);
    235e:	a5 e3       	ldi	r26, 0x35	; 53
    2360:	b0 e0       	ldi	r27, 0x00	; 0
    2362:	e5 e3       	ldi	r30, 0x35	; 53
    2364:	f0 e0       	ldi	r31, 0x00	; 0
    2366:	80 81       	ld	r24, Z
    2368:	48 2f       	mov	r20, r24
    236a:	8a 81       	ldd	r24, Y+2	; 0x02
    236c:	28 2f       	mov	r18, r24
    236e:	30 e0       	ldi	r19, 0x00	; 0
    2370:	81 e0       	ldi	r24, 0x01	; 1
    2372:	90 e0       	ldi	r25, 0x00	; 0
    2374:	02 2e       	mov	r0, r18
    2376:	02 c0       	rjmp	.+4      	; 0x237c <Dio_WriteChannel+0x12c>
    2378:	88 0f       	add	r24, r24
    237a:	99 1f       	adc	r25, r25
    237c:	0a 94       	dec	r0
    237e:	e2 f7       	brpl	.-8      	; 0x2378 <Dio_WriteChannel+0x128>
    2380:	84 2b       	or	r24, r20
    2382:	8c 93       	st	X, r24
    2384:	40 c0       	rjmp	.+128    	; 0x2406 <Dio_WriteChannel+0x1b6>
		}
		else
		{
			CLR_BIT(DIO_PORTC_REG,pin);
    2386:	a5 e3       	ldi	r26, 0x35	; 53
    2388:	b0 e0       	ldi	r27, 0x00	; 0
    238a:	e5 e3       	ldi	r30, 0x35	; 53
    238c:	f0 e0       	ldi	r31, 0x00	; 0
    238e:	80 81       	ld	r24, Z
    2390:	48 2f       	mov	r20, r24
    2392:	8a 81       	ldd	r24, Y+2	; 0x02
    2394:	28 2f       	mov	r18, r24
    2396:	30 e0       	ldi	r19, 0x00	; 0
    2398:	81 e0       	ldi	r24, 0x01	; 1
    239a:	90 e0       	ldi	r25, 0x00	; 0
    239c:	02 2e       	mov	r0, r18
    239e:	02 c0       	rjmp	.+4      	; 0x23a4 <Dio_WriteChannel+0x154>
    23a0:	88 0f       	add	r24, r24
    23a2:	99 1f       	adc	r25, r25
    23a4:	0a 94       	dec	r0
    23a6:	e2 f7       	brpl	.-8      	; 0x23a0 <Dio_WriteChannel+0x150>
    23a8:	80 95       	com	r24
    23aa:	84 23       	and	r24, r20
    23ac:	8c 93       	st	X, r24
    23ae:	2b c0       	rjmp	.+86     	; 0x2406 <Dio_WriteChannel+0x1b6>
		}
		break;

	case DIO_PORTD:
		if (level == STD_HIGH)
    23b0:	8b 81       	ldd	r24, Y+3	; 0x03
    23b2:	81 30       	cpi	r24, 0x01	; 1
    23b4:	a1 f4       	brne	.+40     	; 0x23de <Dio_WriteChannel+0x18e>
		{
			SET_BIT(DIO_PORTD_REG,pin);
    23b6:	a2 e3       	ldi	r26, 0x32	; 50
    23b8:	b0 e0       	ldi	r27, 0x00	; 0
    23ba:	e2 e3       	ldi	r30, 0x32	; 50
    23bc:	f0 e0       	ldi	r31, 0x00	; 0
    23be:	80 81       	ld	r24, Z
    23c0:	48 2f       	mov	r20, r24
    23c2:	8a 81       	ldd	r24, Y+2	; 0x02
    23c4:	28 2f       	mov	r18, r24
    23c6:	30 e0       	ldi	r19, 0x00	; 0
    23c8:	81 e0       	ldi	r24, 0x01	; 1
    23ca:	90 e0       	ldi	r25, 0x00	; 0
    23cc:	02 2e       	mov	r0, r18
    23ce:	02 c0       	rjmp	.+4      	; 0x23d4 <Dio_WriteChannel+0x184>
    23d0:	88 0f       	add	r24, r24
    23d2:	99 1f       	adc	r25, r25
    23d4:	0a 94       	dec	r0
    23d6:	e2 f7       	brpl	.-8      	; 0x23d0 <Dio_WriteChannel+0x180>
    23d8:	84 2b       	or	r24, r20
    23da:	8c 93       	st	X, r24
    23dc:	14 c0       	rjmp	.+40     	; 0x2406 <Dio_WriteChannel+0x1b6>
		}
		else
		{
			CLR_BIT(DIO_PORTD_REG,pin);
    23de:	a2 e3       	ldi	r26, 0x32	; 50
    23e0:	b0 e0       	ldi	r27, 0x00	; 0
    23e2:	e2 e3       	ldi	r30, 0x32	; 50
    23e4:	f0 e0       	ldi	r31, 0x00	; 0
    23e6:	80 81       	ld	r24, Z
    23e8:	48 2f       	mov	r20, r24
    23ea:	8a 81       	ldd	r24, Y+2	; 0x02
    23ec:	28 2f       	mov	r18, r24
    23ee:	30 e0       	ldi	r19, 0x00	; 0
    23f0:	81 e0       	ldi	r24, 0x01	; 1
    23f2:	90 e0       	ldi	r25, 0x00	; 0
    23f4:	02 2e       	mov	r0, r18
    23f6:	02 c0       	rjmp	.+4      	; 0x23fc <Dio_WriteChannel+0x1ac>
    23f8:	88 0f       	add	r24, r24
    23fa:	99 1f       	adc	r25, r25
    23fc:	0a 94       	dec	r0
    23fe:	e2 f7       	brpl	.-8      	; 0x23f8 <Dio_WriteChannel+0x1a8>
    2400:	80 95       	com	r24
    2402:	84 23       	and	r24, r20
    2404:	8c 93       	st	X, r24
		}
		break;
	}
}
    2406:	0f 90       	pop	r0
    2408:	0f 90       	pop	r0
    240a:	0f 90       	pop	r0
    240c:	0f 90       	pop	r0
    240e:	0f 90       	pop	r0
    2410:	cf 91       	pop	r28
    2412:	df 91       	pop	r29
    2414:	08 95       	ret

00002416 <Dio_WriteGroup>:
void Dio_WriteGroup(port_type port,u8 mask,u8 data)
{
    2416:	df 93       	push	r29
    2418:	cf 93       	push	r28
    241a:	00 d0       	rcall	.+0      	; 0x241c <Dio_WriteGroup+0x6>
    241c:	00 d0       	rcall	.+0      	; 0x241e <Dio_WriteGroup+0x8>
    241e:	0f 92       	push	r0
    2420:	cd b7       	in	r28, 0x3d	; 61
    2422:	de b7       	in	r29, 0x3e	; 62
    2424:	89 83       	std	Y+1, r24	; 0x01
    2426:	6a 83       	std	Y+2, r22	; 0x02
    2428:	4b 83       	std	Y+3, r20	; 0x03
	switch(port)
    242a:	89 81       	ldd	r24, Y+1	; 0x01
    242c:	28 2f       	mov	r18, r24
    242e:	30 e0       	ldi	r19, 0x00	; 0
    2430:	3d 83       	std	Y+5, r19	; 0x05
    2432:	2c 83       	std	Y+4, r18	; 0x04
    2434:	8c 81       	ldd	r24, Y+4	; 0x04
    2436:	9d 81       	ldd	r25, Y+5	; 0x05
    2438:	81 30       	cpi	r24, 0x01	; 1
    243a:	91 05       	cpc	r25, r1
    243c:	29 f1       	breq	.+74     	; 0x2488 <Dio_WriteGroup+0x72>
    243e:	2c 81       	ldd	r18, Y+4	; 0x04
    2440:	3d 81       	ldd	r19, Y+5	; 0x05
    2442:	22 30       	cpi	r18, 0x02	; 2
    2444:	31 05       	cpc	r19, r1
    2446:	2c f4       	brge	.+10     	; 0x2452 <Dio_WriteGroup+0x3c>
    2448:	8c 81       	ldd	r24, Y+4	; 0x04
    244a:	9d 81       	ldd	r25, Y+5	; 0x05
    244c:	00 97       	sbiw	r24, 0x00	; 0
    244e:	61 f0       	breq	.+24     	; 0x2468 <Dio_WriteGroup+0x52>
    2450:	4a c0       	rjmp	.+148    	; 0x24e6 <Dio_WriteGroup+0xd0>
    2452:	2c 81       	ldd	r18, Y+4	; 0x04
    2454:	3d 81       	ldd	r19, Y+5	; 0x05
    2456:	22 30       	cpi	r18, 0x02	; 2
    2458:	31 05       	cpc	r19, r1
    245a:	31 f1       	breq	.+76     	; 0x24a8 <Dio_WriteGroup+0x92>
    245c:	8c 81       	ldd	r24, Y+4	; 0x04
    245e:	9d 81       	ldd	r25, Y+5	; 0x05
    2460:	83 30       	cpi	r24, 0x03	; 3
    2462:	91 05       	cpc	r25, r1
    2464:	89 f1       	breq	.+98     	; 0x24c8 <Dio_WriteGroup+0xb2>
    2466:	3f c0       	rjmp	.+126    	; 0x24e6 <Dio_WriteGroup+0xd0>
	{
	case DIO_PORTA:
		DIO_PORTA_REG = (DIO_PORTA_REG&~mask)|(data & mask);
    2468:	ab e3       	ldi	r26, 0x3B	; 59
    246a:	b0 e0       	ldi	r27, 0x00	; 0
    246c:	eb e3       	ldi	r30, 0x3B	; 59
    246e:	f0 e0       	ldi	r31, 0x00	; 0
    2470:	80 81       	ld	r24, Z
    2472:	98 2f       	mov	r25, r24
    2474:	8a 81       	ldd	r24, Y+2	; 0x02
    2476:	80 95       	com	r24
    2478:	29 2f       	mov	r18, r25
    247a:	28 23       	and	r18, r24
    247c:	9b 81       	ldd	r25, Y+3	; 0x03
    247e:	8a 81       	ldd	r24, Y+2	; 0x02
    2480:	89 23       	and	r24, r25
    2482:	82 2b       	or	r24, r18
    2484:	8c 93       	st	X, r24
    2486:	2f c0       	rjmp	.+94     	; 0x24e6 <Dio_WriteGroup+0xd0>
		break;

	case DIO_PORTB:
		DIO_PORTB_REG = (DIO_PORTA_REG&~mask)|(data & mask);
    2488:	a8 e3       	ldi	r26, 0x38	; 56
    248a:	b0 e0       	ldi	r27, 0x00	; 0
    248c:	eb e3       	ldi	r30, 0x3B	; 59
    248e:	f0 e0       	ldi	r31, 0x00	; 0
    2490:	80 81       	ld	r24, Z
    2492:	98 2f       	mov	r25, r24
    2494:	8a 81       	ldd	r24, Y+2	; 0x02
    2496:	80 95       	com	r24
    2498:	29 2f       	mov	r18, r25
    249a:	28 23       	and	r18, r24
    249c:	9b 81       	ldd	r25, Y+3	; 0x03
    249e:	8a 81       	ldd	r24, Y+2	; 0x02
    24a0:	89 23       	and	r24, r25
    24a2:	82 2b       	or	r24, r18
    24a4:	8c 93       	st	X, r24
    24a6:	1f c0       	rjmp	.+62     	; 0x24e6 <Dio_WriteGroup+0xd0>
		break;

	case DIO_PORTC:
		DIO_PORTC_REG = (DIO_PORTA_REG&~mask)|(data & mask);
    24a8:	a5 e3       	ldi	r26, 0x35	; 53
    24aa:	b0 e0       	ldi	r27, 0x00	; 0
    24ac:	eb e3       	ldi	r30, 0x3B	; 59
    24ae:	f0 e0       	ldi	r31, 0x00	; 0
    24b0:	80 81       	ld	r24, Z
    24b2:	98 2f       	mov	r25, r24
    24b4:	8a 81       	ldd	r24, Y+2	; 0x02
    24b6:	80 95       	com	r24
    24b8:	29 2f       	mov	r18, r25
    24ba:	28 23       	and	r18, r24
    24bc:	9b 81       	ldd	r25, Y+3	; 0x03
    24be:	8a 81       	ldd	r24, Y+2	; 0x02
    24c0:	89 23       	and	r24, r25
    24c2:	82 2b       	or	r24, r18
    24c4:	8c 93       	st	X, r24
    24c6:	0f c0       	rjmp	.+30     	; 0x24e6 <Dio_WriteGroup+0xd0>
		break;

	case DIO_PORTD:
		DIO_PORTD_REG = (DIO_PORTA_REG&~mask)|(data & mask);
    24c8:	a2 e3       	ldi	r26, 0x32	; 50
    24ca:	b0 e0       	ldi	r27, 0x00	; 0
    24cc:	eb e3       	ldi	r30, 0x3B	; 59
    24ce:	f0 e0       	ldi	r31, 0x00	; 0
    24d0:	80 81       	ld	r24, Z
    24d2:	98 2f       	mov	r25, r24
    24d4:	8a 81       	ldd	r24, Y+2	; 0x02
    24d6:	80 95       	com	r24
    24d8:	29 2f       	mov	r18, r25
    24da:	28 23       	and	r18, r24
    24dc:	9b 81       	ldd	r25, Y+3	; 0x03
    24de:	8a 81       	ldd	r24, Y+2	; 0x02
    24e0:	89 23       	and	r24, r25
    24e2:	82 2b       	or	r24, r18
    24e4:	8c 93       	st	X, r24
		break;
	}
}
    24e6:	0f 90       	pop	r0
    24e8:	0f 90       	pop	r0
    24ea:	0f 90       	pop	r0
    24ec:	0f 90       	pop	r0
    24ee:	0f 90       	pop	r0
    24f0:	cf 91       	pop	r28
    24f2:	df 91       	pop	r29
    24f4:	08 95       	ret

000024f6 <Dio_TogglChannel>:
void Dio_TogglChannel(port_type port,pin_type pin)
{
    24f6:	df 93       	push	r29
    24f8:	cf 93       	push	r28
    24fa:	00 d0       	rcall	.+0      	; 0x24fc <Dio_TogglChannel+0x6>
    24fc:	00 d0       	rcall	.+0      	; 0x24fe <Dio_TogglChannel+0x8>
    24fe:	cd b7       	in	r28, 0x3d	; 61
    2500:	de b7       	in	r29, 0x3e	; 62
    2502:	89 83       	std	Y+1, r24	; 0x01
    2504:	6a 83       	std	Y+2, r22	; 0x02
	switch (port)
    2506:	89 81       	ldd	r24, Y+1	; 0x01
    2508:	28 2f       	mov	r18, r24
    250a:	30 e0       	ldi	r19, 0x00	; 0
    250c:	3c 83       	std	Y+4, r19	; 0x04
    250e:	2b 83       	std	Y+3, r18	; 0x03
    2510:	8b 81       	ldd	r24, Y+3	; 0x03
    2512:	9c 81       	ldd	r25, Y+4	; 0x04
    2514:	81 30       	cpi	r24, 0x01	; 1
    2516:	91 05       	cpc	r25, r1
    2518:	49 f1       	breq	.+82     	; 0x256c <Dio_TogglChannel+0x76>
    251a:	2b 81       	ldd	r18, Y+3	; 0x03
    251c:	3c 81       	ldd	r19, Y+4	; 0x04
    251e:	22 30       	cpi	r18, 0x02	; 2
    2520:	31 05       	cpc	r19, r1
    2522:	2c f4       	brge	.+10     	; 0x252e <Dio_TogglChannel+0x38>
    2524:	8b 81       	ldd	r24, Y+3	; 0x03
    2526:	9c 81       	ldd	r25, Y+4	; 0x04
    2528:	00 97       	sbiw	r24, 0x00	; 0
    252a:	61 f0       	breq	.+24     	; 0x2544 <Dio_TogglChannel+0x4e>
    252c:	5a c0       	rjmp	.+180    	; 0x25e2 <Dio_TogglChannel+0xec>
    252e:	2b 81       	ldd	r18, Y+3	; 0x03
    2530:	3c 81       	ldd	r19, Y+4	; 0x04
    2532:	22 30       	cpi	r18, 0x02	; 2
    2534:	31 05       	cpc	r19, r1
    2536:	71 f1       	breq	.+92     	; 0x2594 <Dio_TogglChannel+0x9e>
    2538:	8b 81       	ldd	r24, Y+3	; 0x03
    253a:	9c 81       	ldd	r25, Y+4	; 0x04
    253c:	83 30       	cpi	r24, 0x03	; 3
    253e:	91 05       	cpc	r25, r1
    2540:	e9 f1       	breq	.+122    	; 0x25bc <Dio_TogglChannel+0xc6>
    2542:	4f c0       	rjmp	.+158    	; 0x25e2 <Dio_TogglChannel+0xec>
	{
	case DIO_PORTA:
		TOGGLE_BIT(DIO_PORTA_REG,pin);
    2544:	ab e3       	ldi	r26, 0x3B	; 59
    2546:	b0 e0       	ldi	r27, 0x00	; 0
    2548:	eb e3       	ldi	r30, 0x3B	; 59
    254a:	f0 e0       	ldi	r31, 0x00	; 0
    254c:	80 81       	ld	r24, Z
    254e:	48 2f       	mov	r20, r24
    2550:	8a 81       	ldd	r24, Y+2	; 0x02
    2552:	28 2f       	mov	r18, r24
    2554:	30 e0       	ldi	r19, 0x00	; 0
    2556:	81 e0       	ldi	r24, 0x01	; 1
    2558:	90 e0       	ldi	r25, 0x00	; 0
    255a:	02 2e       	mov	r0, r18
    255c:	02 c0       	rjmp	.+4      	; 0x2562 <Dio_TogglChannel+0x6c>
    255e:	88 0f       	add	r24, r24
    2560:	99 1f       	adc	r25, r25
    2562:	0a 94       	dec	r0
    2564:	e2 f7       	brpl	.-8      	; 0x255e <Dio_TogglChannel+0x68>
    2566:	84 27       	eor	r24, r20
    2568:	8c 93       	st	X, r24
    256a:	3b c0       	rjmp	.+118    	; 0x25e2 <Dio_TogglChannel+0xec>
		break;

	case DIO_PORTB:
		TOGGLE_BIT(DIO_PORTB_REG,pin);
    256c:	a8 e3       	ldi	r26, 0x38	; 56
    256e:	b0 e0       	ldi	r27, 0x00	; 0
    2570:	e8 e3       	ldi	r30, 0x38	; 56
    2572:	f0 e0       	ldi	r31, 0x00	; 0
    2574:	80 81       	ld	r24, Z
    2576:	48 2f       	mov	r20, r24
    2578:	8a 81       	ldd	r24, Y+2	; 0x02
    257a:	28 2f       	mov	r18, r24
    257c:	30 e0       	ldi	r19, 0x00	; 0
    257e:	81 e0       	ldi	r24, 0x01	; 1
    2580:	90 e0       	ldi	r25, 0x00	; 0
    2582:	02 2e       	mov	r0, r18
    2584:	02 c0       	rjmp	.+4      	; 0x258a <Dio_TogglChannel+0x94>
    2586:	88 0f       	add	r24, r24
    2588:	99 1f       	adc	r25, r25
    258a:	0a 94       	dec	r0
    258c:	e2 f7       	brpl	.-8      	; 0x2586 <Dio_TogglChannel+0x90>
    258e:	84 27       	eor	r24, r20
    2590:	8c 93       	st	X, r24
    2592:	27 c0       	rjmp	.+78     	; 0x25e2 <Dio_TogglChannel+0xec>
		break;

	case DIO_PORTC:
		TOGGLE_BIT(DIO_PORTC_REG,pin);
    2594:	a5 e3       	ldi	r26, 0x35	; 53
    2596:	b0 e0       	ldi	r27, 0x00	; 0
    2598:	e5 e3       	ldi	r30, 0x35	; 53
    259a:	f0 e0       	ldi	r31, 0x00	; 0
    259c:	80 81       	ld	r24, Z
    259e:	48 2f       	mov	r20, r24
    25a0:	8a 81       	ldd	r24, Y+2	; 0x02
    25a2:	28 2f       	mov	r18, r24
    25a4:	30 e0       	ldi	r19, 0x00	; 0
    25a6:	81 e0       	ldi	r24, 0x01	; 1
    25a8:	90 e0       	ldi	r25, 0x00	; 0
    25aa:	02 2e       	mov	r0, r18
    25ac:	02 c0       	rjmp	.+4      	; 0x25b2 <Dio_TogglChannel+0xbc>
    25ae:	88 0f       	add	r24, r24
    25b0:	99 1f       	adc	r25, r25
    25b2:	0a 94       	dec	r0
    25b4:	e2 f7       	brpl	.-8      	; 0x25ae <Dio_TogglChannel+0xb8>
    25b6:	84 27       	eor	r24, r20
    25b8:	8c 93       	st	X, r24
    25ba:	13 c0       	rjmp	.+38     	; 0x25e2 <Dio_TogglChannel+0xec>
		break;

	case DIO_PORTD:
		TOGGLE_BIT(DIO_PORTD_REG,pin);
    25bc:	a2 e3       	ldi	r26, 0x32	; 50
    25be:	b0 e0       	ldi	r27, 0x00	; 0
    25c0:	e2 e3       	ldi	r30, 0x32	; 50
    25c2:	f0 e0       	ldi	r31, 0x00	; 0
    25c4:	80 81       	ld	r24, Z
    25c6:	48 2f       	mov	r20, r24
    25c8:	8a 81       	ldd	r24, Y+2	; 0x02
    25ca:	28 2f       	mov	r18, r24
    25cc:	30 e0       	ldi	r19, 0x00	; 0
    25ce:	81 e0       	ldi	r24, 0x01	; 1
    25d0:	90 e0       	ldi	r25, 0x00	; 0
    25d2:	02 2e       	mov	r0, r18
    25d4:	02 c0       	rjmp	.+4      	; 0x25da <Dio_TogglChannel+0xe4>
    25d6:	88 0f       	add	r24, r24
    25d8:	99 1f       	adc	r25, r25
    25da:	0a 94       	dec	r0
    25dc:	e2 f7       	brpl	.-8      	; 0x25d6 <Dio_TogglChannel+0xe0>
    25de:	84 27       	eor	r24, r20
    25e0:	8c 93       	st	X, r24
		break;
	}
}
    25e2:	0f 90       	pop	r0
    25e4:	0f 90       	pop	r0
    25e6:	0f 90       	pop	r0
    25e8:	0f 90       	pop	r0
    25ea:	cf 91       	pop	r28
    25ec:	df 91       	pop	r29
    25ee:	08 95       	ret

000025f0 <Dio_ReadChannel>:
level_type Dio_ReadChannel(port_type port,pin_type pin)
{
    25f0:	df 93       	push	r29
    25f2:	cf 93       	push	r28
    25f4:	00 d0       	rcall	.+0      	; 0x25f6 <Dio_ReadChannel+0x6>
    25f6:	00 d0       	rcall	.+0      	; 0x25f8 <Dio_ReadChannel+0x8>
    25f8:	0f 92       	push	r0
    25fa:	cd b7       	in	r28, 0x3d	; 61
    25fc:	de b7       	in	r29, 0x3e	; 62
    25fe:	8a 83       	std	Y+2, r24	; 0x02
    2600:	6b 83       	std	Y+3, r22	; 0x03
	level_type result = STD_LOW;
    2602:	19 82       	std	Y+1, r1	; 0x01
	switch (port)
    2604:	8a 81       	ldd	r24, Y+2	; 0x02
    2606:	28 2f       	mov	r18, r24
    2608:	30 e0       	ldi	r19, 0x00	; 0
    260a:	3d 83       	std	Y+5, r19	; 0x05
    260c:	2c 83       	std	Y+4, r18	; 0x04
    260e:	4c 81       	ldd	r20, Y+4	; 0x04
    2610:	5d 81       	ldd	r21, Y+5	; 0x05
    2612:	41 30       	cpi	r20, 0x01	; 1
    2614:	51 05       	cpc	r21, r1
    2616:	79 f1       	breq	.+94     	; 0x2676 <Dio_ReadChannel+0x86>
    2618:	8c 81       	ldd	r24, Y+4	; 0x04
    261a:	9d 81       	ldd	r25, Y+5	; 0x05
    261c:	82 30       	cpi	r24, 0x02	; 2
    261e:	91 05       	cpc	r25, r1
    2620:	34 f4       	brge	.+12     	; 0x262e <Dio_ReadChannel+0x3e>
    2622:	2c 81       	ldd	r18, Y+4	; 0x04
    2624:	3d 81       	ldd	r19, Y+5	; 0x05
    2626:	21 15       	cp	r18, r1
    2628:	31 05       	cpc	r19, r1
    262a:	69 f0       	breq	.+26     	; 0x2646 <Dio_ReadChannel+0x56>
    262c:	6b c0       	rjmp	.+214    	; 0x2704 <Dio_ReadChannel+0x114>
    262e:	4c 81       	ldd	r20, Y+4	; 0x04
    2630:	5d 81       	ldd	r21, Y+5	; 0x05
    2632:	42 30       	cpi	r20, 0x02	; 2
    2634:	51 05       	cpc	r21, r1
    2636:	b9 f1       	breq	.+110    	; 0x26a6 <Dio_ReadChannel+0xb6>
    2638:	8c 81       	ldd	r24, Y+4	; 0x04
    263a:	9d 81       	ldd	r25, Y+5	; 0x05
    263c:	83 30       	cpi	r24, 0x03	; 3
    263e:	91 05       	cpc	r25, r1
    2640:	09 f4       	brne	.+2      	; 0x2644 <Dio_ReadChannel+0x54>
    2642:	49 c0       	rjmp	.+146    	; 0x26d6 <Dio_ReadChannel+0xe6>
    2644:	5f c0       	rjmp	.+190    	; 0x2704 <Dio_ReadChannel+0x114>
	{
	case DIO_PORTA:
		if CHK_BIT(DIO_PINA_REG,pin)
    2646:	e9 e3       	ldi	r30, 0x39	; 57
    2648:	f0 e0       	ldi	r31, 0x00	; 0
    264a:	80 81       	ld	r24, Z
    264c:	28 2f       	mov	r18, r24
    264e:	30 e0       	ldi	r19, 0x00	; 0
    2650:	8b 81       	ldd	r24, Y+3	; 0x03
    2652:	88 2f       	mov	r24, r24
    2654:	90 e0       	ldi	r25, 0x00	; 0
    2656:	a9 01       	movw	r20, r18
    2658:	02 c0       	rjmp	.+4      	; 0x265e <Dio_ReadChannel+0x6e>
    265a:	55 95       	asr	r21
    265c:	47 95       	ror	r20
    265e:	8a 95       	dec	r24
    2660:	e2 f7       	brpl	.-8      	; 0x265a <Dio_ReadChannel+0x6a>
    2662:	ca 01       	movw	r24, r20
    2664:	81 70       	andi	r24, 0x01	; 1
    2666:	90 70       	andi	r25, 0x00	; 0
    2668:	88 23       	and	r24, r24
    266a:	19 f0       	breq	.+6      	; 0x2672 <Dio_ReadChannel+0x82>
		{
			result = STD_HIGH;
    266c:	81 e0       	ldi	r24, 0x01	; 1
    266e:	89 83       	std	Y+1, r24	; 0x01
    2670:	49 c0       	rjmp	.+146    	; 0x2704 <Dio_ReadChannel+0x114>
		}
		else
		{
			result = STD_LOW;
    2672:	19 82       	std	Y+1, r1	; 0x01
    2674:	47 c0       	rjmp	.+142    	; 0x2704 <Dio_ReadChannel+0x114>
		}
		break;
	case DIO_PORTB:
		if CHK_BIT(DIO_PINB_REG,pin)
    2676:	e6 e3       	ldi	r30, 0x36	; 54
    2678:	f0 e0       	ldi	r31, 0x00	; 0
    267a:	80 81       	ld	r24, Z
    267c:	28 2f       	mov	r18, r24
    267e:	30 e0       	ldi	r19, 0x00	; 0
    2680:	8b 81       	ldd	r24, Y+3	; 0x03
    2682:	88 2f       	mov	r24, r24
    2684:	90 e0       	ldi	r25, 0x00	; 0
    2686:	a9 01       	movw	r20, r18
    2688:	02 c0       	rjmp	.+4      	; 0x268e <Dio_ReadChannel+0x9e>
    268a:	55 95       	asr	r21
    268c:	47 95       	ror	r20
    268e:	8a 95       	dec	r24
    2690:	e2 f7       	brpl	.-8      	; 0x268a <Dio_ReadChannel+0x9a>
    2692:	ca 01       	movw	r24, r20
    2694:	81 70       	andi	r24, 0x01	; 1
    2696:	90 70       	andi	r25, 0x00	; 0
    2698:	88 23       	and	r24, r24
    269a:	19 f0       	breq	.+6      	; 0x26a2 <Dio_ReadChannel+0xb2>
		{
			result = STD_HIGH;
    269c:	81 e0       	ldi	r24, 0x01	; 1
    269e:	89 83       	std	Y+1, r24	; 0x01
    26a0:	31 c0       	rjmp	.+98     	; 0x2704 <Dio_ReadChannel+0x114>
		}
		else
		{
			result = STD_LOW;
    26a2:	19 82       	std	Y+1, r1	; 0x01
    26a4:	2f c0       	rjmp	.+94     	; 0x2704 <Dio_ReadChannel+0x114>
		}
		break;
	case DIO_PORTC:
		if CHK_BIT(DIO_PINC_REG,pin)
    26a6:	e3 e3       	ldi	r30, 0x33	; 51
    26a8:	f0 e0       	ldi	r31, 0x00	; 0
    26aa:	80 81       	ld	r24, Z
    26ac:	28 2f       	mov	r18, r24
    26ae:	30 e0       	ldi	r19, 0x00	; 0
    26b0:	8b 81       	ldd	r24, Y+3	; 0x03
    26b2:	88 2f       	mov	r24, r24
    26b4:	90 e0       	ldi	r25, 0x00	; 0
    26b6:	a9 01       	movw	r20, r18
    26b8:	02 c0       	rjmp	.+4      	; 0x26be <Dio_ReadChannel+0xce>
    26ba:	55 95       	asr	r21
    26bc:	47 95       	ror	r20
    26be:	8a 95       	dec	r24
    26c0:	e2 f7       	brpl	.-8      	; 0x26ba <Dio_ReadChannel+0xca>
    26c2:	ca 01       	movw	r24, r20
    26c4:	81 70       	andi	r24, 0x01	; 1
    26c6:	90 70       	andi	r25, 0x00	; 0
    26c8:	88 23       	and	r24, r24
    26ca:	19 f0       	breq	.+6      	; 0x26d2 <Dio_ReadChannel+0xe2>
		{
			result = STD_HIGH;
    26cc:	81 e0       	ldi	r24, 0x01	; 1
    26ce:	89 83       	std	Y+1, r24	; 0x01
    26d0:	19 c0       	rjmp	.+50     	; 0x2704 <Dio_ReadChannel+0x114>
		}
		else
		{
			result = STD_LOW;
    26d2:	19 82       	std	Y+1, r1	; 0x01
    26d4:	17 c0       	rjmp	.+46     	; 0x2704 <Dio_ReadChannel+0x114>
		}
		break;
	case DIO_PORTD:
		if CHK_BIT(DIO_PIND_REG,pin)
    26d6:	e0 e3       	ldi	r30, 0x30	; 48
    26d8:	f0 e0       	ldi	r31, 0x00	; 0
    26da:	80 81       	ld	r24, Z
    26dc:	28 2f       	mov	r18, r24
    26de:	30 e0       	ldi	r19, 0x00	; 0
    26e0:	8b 81       	ldd	r24, Y+3	; 0x03
    26e2:	88 2f       	mov	r24, r24
    26e4:	90 e0       	ldi	r25, 0x00	; 0
    26e6:	a9 01       	movw	r20, r18
    26e8:	02 c0       	rjmp	.+4      	; 0x26ee <Dio_ReadChannel+0xfe>
    26ea:	55 95       	asr	r21
    26ec:	47 95       	ror	r20
    26ee:	8a 95       	dec	r24
    26f0:	e2 f7       	brpl	.-8      	; 0x26ea <Dio_ReadChannel+0xfa>
    26f2:	ca 01       	movw	r24, r20
    26f4:	81 70       	andi	r24, 0x01	; 1
    26f6:	90 70       	andi	r25, 0x00	; 0
    26f8:	88 23       	and	r24, r24
    26fa:	19 f0       	breq	.+6      	; 0x2702 <Dio_ReadChannel+0x112>
		{
			result = STD_HIGH;
    26fc:	81 e0       	ldi	r24, 0x01	; 1
    26fe:	89 83       	std	Y+1, r24	; 0x01
    2700:	01 c0       	rjmp	.+2      	; 0x2704 <Dio_ReadChannel+0x114>
		}
		else
		{
			result = STD_LOW;
    2702:	19 82       	std	Y+1, r1	; 0x01
		}
		break;
	}
	return result;
    2704:	89 81       	ldd	r24, Y+1	; 0x01
}
    2706:	0f 90       	pop	r0
    2708:	0f 90       	pop	r0
    270a:	0f 90       	pop	r0
    270c:	0f 90       	pop	r0
    270e:	0f 90       	pop	r0
    2710:	cf 91       	pop	r28
    2712:	df 91       	pop	r29
    2714:	08 95       	ret

00002716 <adcInit>:
 * Author	:  Eng_Fawzi
 ********************************/
#include "Adc.h"

void adcInit(void)
{
    2716:	df 93       	push	r29
    2718:	cf 93       	push	r28
    271a:	cd b7       	in	r28, 0x3d	; 61
    271c:	de b7       	in	r29, 0x3e	; 62
	ADC_ADMUX_REG|=(AVCC5V_REF<<6);  /*	AVCC aas Vref	*/
    271e:	a7 e2       	ldi	r26, 0x27	; 39
    2720:	b0 e0       	ldi	r27, 0x00	; 0
    2722:	e7 e2       	ldi	r30, 0x27	; 39
    2724:	f0 e0       	ldi	r31, 0x00	; 0
    2726:	80 81       	ld	r24, Z
    2728:	80 64       	ori	r24, 0x40	; 64
    272a:	8c 93       	st	X, r24
	ADC_ADCSRA_REG=(ADC_ENABLE)|(ADCPS_128);
    272c:	e6 e2       	ldi	r30, 0x26	; 38
    272e:	f0 e0       	ldi	r31, 0x00	; 0
    2730:	87 e8       	ldi	r24, 0x87	; 135
    2732:	80 83       	st	Z, r24
}
    2734:	cf 91       	pop	r28
    2736:	df 91       	pop	r29
    2738:	08 95       	ret

0000273a <adcRead>:
u16 adcRead(u8 chnlNo)
{
    273a:	df 93       	push	r29
    273c:	cf 93       	push	r28
    273e:	00 d0       	rcall	.+0      	; 0x2740 <adcRead+0x6>
    2740:	0f 92       	push	r0
    2742:	cd b7       	in	r28, 0x3d	; 61
    2744:	de b7       	in	r29, 0x3e	; 62
    2746:	8b 83       	std	Y+3, r24	; 0x03
    u16 result;
    ADC_ADMUX_REG = (ADC_ADMUX_REG & 0xF8)|(chnlNo);
    2748:	a7 e2       	ldi	r26, 0x27	; 39
    274a:	b0 e0       	ldi	r27, 0x00	; 0
    274c:	e7 e2       	ldi	r30, 0x27	; 39
    274e:	f0 e0       	ldi	r31, 0x00	; 0
    2750:	80 81       	ld	r24, Z
    2752:	98 2f       	mov	r25, r24
    2754:	98 7f       	andi	r25, 0xF8	; 248
    2756:	8b 81       	ldd	r24, Y+3	; 0x03
    2758:	89 2b       	or	r24, r25
    275a:	8c 93       	st	X, r24
    ADC_ADCSRA_REG|=(ADC_START_CONVERSION);
    275c:	a6 e2       	ldi	r26, 0x26	; 38
    275e:	b0 e0       	ldi	r27, 0x00	; 0
    2760:	e6 e2       	ldi	r30, 0x26	; 38
    2762:	f0 e0       	ldi	r31, 0x00	; 0
    2764:	80 81       	ld	r24, Z
    2766:	80 64       	ori	r24, 0x40	; 64
    2768:	8c 93       	st	X, r24
 	while(!(CHK_BIT(ADC_ADCSRA_REG,ADIF_BIT_NO)))
    276a:	e6 e2       	ldi	r30, 0x26	; 38
    276c:	f0 e0       	ldi	r31, 0x00	; 0
    276e:	80 81       	ld	r24, Z
    2770:	82 95       	swap	r24
    2772:	8f 70       	andi	r24, 0x0F	; 15
    2774:	88 2f       	mov	r24, r24
    2776:	90 e0       	ldi	r25, 0x00	; 0
    2778:	81 70       	andi	r24, 0x01	; 1
    277a:	90 70       	andi	r25, 0x00	; 0
    277c:	00 97       	sbiw	r24, 0x00	; 0
    277e:	a9 f3       	breq	.-22     	; 0x276a <adcRead+0x30>
 		  {
 		  	  /*	Do Nothing	*/
 		  	  	  ;
 		  }
 	/*	Clear Interrupt Flag To Be Ready For Another Conversion	*/
 	 ADC_ADCSRA_REG|=(1<<ADIF_BIT_NO);
    2780:	a6 e2       	ldi	r26, 0x26	; 38
    2782:	b0 e0       	ldi	r27, 0x00	; 0
    2784:	e6 e2       	ldi	r30, 0x26	; 38
    2786:	f0 e0       	ldi	r31, 0x00	; 0
    2788:	80 81       	ld	r24, Z
    278a:	80 61       	ori	r24, 0x10	; 16
    278c:	8c 93       	st	X, r24
    result=(ADC_ADCL_REG|(ADC_ADCH_REG<<8));
    278e:	e4 e2       	ldi	r30, 0x24	; 36
    2790:	f0 e0       	ldi	r31, 0x00	; 0
    2792:	80 81       	ld	r24, Z
    2794:	28 2f       	mov	r18, r24
    2796:	30 e0       	ldi	r19, 0x00	; 0
    2798:	e5 e2       	ldi	r30, 0x25	; 37
    279a:	f0 e0       	ldi	r31, 0x00	; 0
    279c:	80 81       	ld	r24, Z
    279e:	88 2f       	mov	r24, r24
    27a0:	90 e0       	ldi	r25, 0x00	; 0
    27a2:	98 2f       	mov	r25, r24
    27a4:	88 27       	eor	r24, r24
    27a6:	82 2b       	or	r24, r18
    27a8:	93 2b       	or	r25, r19
    27aa:	9a 83       	std	Y+2, r25	; 0x02
    27ac:	89 83       	std	Y+1, r24	; 0x01
 	return result;
    27ae:	89 81       	ldd	r24, Y+1	; 0x01
    27b0:	9a 81       	ldd	r25, Y+2	; 0x02
}
    27b2:	0f 90       	pop	r0
    27b4:	0f 90       	pop	r0
    27b6:	0f 90       	pop	r0
    27b8:	cf 91       	pop	r28
    27ba:	df 91       	pop	r29
    27bc:	08 95       	ret

000027be <__udivmodqi4>:
    27be:	99 1b       	sub	r25, r25
    27c0:	79 e0       	ldi	r23, 0x09	; 9
    27c2:	04 c0       	rjmp	.+8      	; 0x27cc <__udivmodqi4_ep>

000027c4 <__udivmodqi4_loop>:
    27c4:	99 1f       	adc	r25, r25
    27c6:	96 17       	cp	r25, r22
    27c8:	08 f0       	brcs	.+2      	; 0x27cc <__udivmodqi4_ep>
    27ca:	96 1b       	sub	r25, r22

000027cc <__udivmodqi4_ep>:
    27cc:	88 1f       	adc	r24, r24
    27ce:	7a 95       	dec	r23
    27d0:	c9 f7       	brne	.-14     	; 0x27c4 <__udivmodqi4_loop>
    27d2:	80 95       	com	r24
    27d4:	08 95       	ret

000027d6 <__udivmodhi4>:
    27d6:	aa 1b       	sub	r26, r26
    27d8:	bb 1b       	sub	r27, r27
    27da:	51 e1       	ldi	r21, 0x11	; 17
    27dc:	07 c0       	rjmp	.+14     	; 0x27ec <__udivmodhi4_ep>

000027de <__udivmodhi4_loop>:
    27de:	aa 1f       	adc	r26, r26
    27e0:	bb 1f       	adc	r27, r27
    27e2:	a6 17       	cp	r26, r22
    27e4:	b7 07       	cpc	r27, r23
    27e6:	10 f0       	brcs	.+4      	; 0x27ec <__udivmodhi4_ep>
    27e8:	a6 1b       	sub	r26, r22
    27ea:	b7 0b       	sbc	r27, r23

000027ec <__udivmodhi4_ep>:
    27ec:	88 1f       	adc	r24, r24
    27ee:	99 1f       	adc	r25, r25
    27f0:	5a 95       	dec	r21
    27f2:	a9 f7       	brne	.-22     	; 0x27de <__udivmodhi4_loop>
    27f4:	80 95       	com	r24
    27f6:	90 95       	com	r25
    27f8:	bc 01       	movw	r22, r24
    27fa:	cd 01       	movw	r24, r26
    27fc:	08 95       	ret

000027fe <__prologue_saves__>:
    27fe:	2f 92       	push	r2
    2800:	3f 92       	push	r3
    2802:	4f 92       	push	r4
    2804:	5f 92       	push	r5
    2806:	6f 92       	push	r6
    2808:	7f 92       	push	r7
    280a:	8f 92       	push	r8
    280c:	9f 92       	push	r9
    280e:	af 92       	push	r10
    2810:	bf 92       	push	r11
    2812:	cf 92       	push	r12
    2814:	df 92       	push	r13
    2816:	ef 92       	push	r14
    2818:	ff 92       	push	r15
    281a:	0f 93       	push	r16
    281c:	1f 93       	push	r17
    281e:	cf 93       	push	r28
    2820:	df 93       	push	r29
    2822:	cd b7       	in	r28, 0x3d	; 61
    2824:	de b7       	in	r29, 0x3e	; 62
    2826:	ca 1b       	sub	r28, r26
    2828:	db 0b       	sbc	r29, r27
    282a:	0f b6       	in	r0, 0x3f	; 63
    282c:	f8 94       	cli
    282e:	de bf       	out	0x3e, r29	; 62
    2830:	0f be       	out	0x3f, r0	; 63
    2832:	cd bf       	out	0x3d, r28	; 61
    2834:	09 94       	ijmp

00002836 <__epilogue_restores__>:
    2836:	2a 88       	ldd	r2, Y+18	; 0x12
    2838:	39 88       	ldd	r3, Y+17	; 0x11
    283a:	48 88       	ldd	r4, Y+16	; 0x10
    283c:	5f 84       	ldd	r5, Y+15	; 0x0f
    283e:	6e 84       	ldd	r6, Y+14	; 0x0e
    2840:	7d 84       	ldd	r7, Y+13	; 0x0d
    2842:	8c 84       	ldd	r8, Y+12	; 0x0c
    2844:	9b 84       	ldd	r9, Y+11	; 0x0b
    2846:	aa 84       	ldd	r10, Y+10	; 0x0a
    2848:	b9 84       	ldd	r11, Y+9	; 0x09
    284a:	c8 84       	ldd	r12, Y+8	; 0x08
    284c:	df 80       	ldd	r13, Y+7	; 0x07
    284e:	ee 80       	ldd	r14, Y+6	; 0x06
    2850:	fd 80       	ldd	r15, Y+5	; 0x05
    2852:	0c 81       	ldd	r16, Y+4	; 0x04
    2854:	1b 81       	ldd	r17, Y+3	; 0x03
    2856:	aa 81       	ldd	r26, Y+2	; 0x02
    2858:	b9 81       	ldd	r27, Y+1	; 0x01
    285a:	ce 0f       	add	r28, r30
    285c:	d1 1d       	adc	r29, r1
    285e:	0f b6       	in	r0, 0x3f	; 63
    2860:	f8 94       	cli
    2862:	de bf       	out	0x3e, r29	; 62
    2864:	0f be       	out	0x3f, r0	; 63
    2866:	cd bf       	out	0x3d, r28	; 61
    2868:	ed 01       	movw	r28, r26
    286a:	08 95       	ret

0000286c <_exit>:
    286c:	f8 94       	cli

0000286e <__stop_program>:
    286e:	ff cf       	rjmp	.-2      	; 0x286e <__stop_program>
